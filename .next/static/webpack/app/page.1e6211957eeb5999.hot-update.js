/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "?f4e8":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/_version.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"abi/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxZQUFZLENBQ25DLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vX3ZlcnNpb24uanM/OTJiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYWJpLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: function() { return /* binding */ AbiCoder; },\n/* harmony export */   defaultAbiCoder: function() { return /* binding */ defaultAbiCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\");\n/* harmony import */ var _coders_abstract_coder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./coders/abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _coders_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coders/address */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/address.js\");\n/* harmony import */ var _coders_array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./coders/array */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/array.js\");\n/* harmony import */ var _coders_boolean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./coders/boolean */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js\");\n/* harmony import */ var _coders_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./coders/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\");\n/* harmony import */ var _coders_fixed_bytes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./coders/fixed-bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js\");\n/* harmony import */ var _coders_null__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./coders/null */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/null.js\");\n/* harmony import */ var _coders_number__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./coders/number */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/number.js\");\n/* harmony import */ var _coders_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./coders/string */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/string.js\");\n/* harmony import */ var _coders_tuple__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./coders/tuple */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js\");\n/* harmony import */ var _fragments__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fragments */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/fragments.js\");\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\n\n\n\n\n\n\n\n\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nclass AbiCoder {\n    _getCoder(param) {\n        switch(param.baseType){\n            case \"address\":\n                return new _coders_address__WEBPACK_IMPORTED_MODULE_2__.AddressCoder(param.name);\n            case \"bool\":\n                return new _coders_boolean__WEBPACK_IMPORTED_MODULE_3__.BooleanCoder(param.name);\n            case \"string\":\n                return new _coders_string__WEBPACK_IMPORTED_MODULE_4__.StringCoder(param.name);\n            case \"bytes\":\n                return new _coders_bytes__WEBPACK_IMPORTED_MODULE_5__.BytesCoder(param.name);\n            case \"array\":\n                return new _coders_array__WEBPACK_IMPORTED_MODULE_6__.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new _coders_tuple__WEBPACK_IMPORTED_MODULE_7__.TupleCoder((param.components || []).map((component)=>{\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new _coders_null__WEBPACK_IMPORTED_MODULE_8__.NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || size % 8 !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new _coders_number__WEBPACK_IMPORTED_MODULE_9__.NumberCoder(size / 8, match[1] === \"int\", param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new _coders_fixed_bytes__WEBPACK_IMPORTED_MODULE_10__.FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() {\n        return 32;\n    }\n    _getReader(data, allowLoose) {\n        return new _coders_abstract_coder__WEBPACK_IMPORTED_MODULE_11__.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new _coders_abstract_coder__WEBPACK_IMPORTED_MODULE_11__.Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type)=>this._getCoder(_fragments__WEBPACK_IMPORTED_MODULE_12__.ParamType.from(type)));\n        const coder = new _coders_tuple__WEBPACK_IMPORTED_MODULE_7__.TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                count: {\n                    types: types.length,\n                    values: values.length\n                },\n                value: {\n                    types: types,\n                    values: values\n                }\n            });\n        }\n        const coders = types.map((type)=>this._getCoder(_fragments__WEBPACK_IMPORTED_MODULE_12__.ParamType.from(type)));\n        const coder = new _coders_tuple__WEBPACK_IMPORTED_MODULE_7__.TupleCoder(coders, \"_\");\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type)=>this._getCoder(_fragments__WEBPACK_IMPORTED_MODULE_12__.ParamType.from(type)));\n        const coder = new _coders_tuple__WEBPACK_IMPORTED_MODULE_7__.TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_13__.arrayify)(data), loose));\n    }\n    constructor(coerceFunc){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_14__.defineReadOnly)(this, \"coerceFunc\", coerceFunc || null);\n    }\n}\nconst defaultAbiCoder = new AbiCoder(); //# sourceMappingURL=abi-coder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coder: function() { return /* binding */ Coder; },\n/* harmony export */   Reader: function() { return /* binding */ Reader; },\n/* harmony export */   Writer: function() { return /* binding */ Writer; },\n/* harmony export */   checkResultErrors: function() { return /* binding */ checkResultErrors; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function(path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for(let key in object){\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({\n                    path: childPath,\n                    error: error\n                });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nclass Coder {\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n    constructor(name, type, localName, dynamic){\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n}\nclass Writer {\n    get data() {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexConcat)(this._data);\n    }\n    get length() {\n        return this._dataLength;\n    }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n                bytes,\n                this._padding.slice(paddingOffset)\n            ]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n                this._padding.slice(bytes.length % this.wordSize),\n                bytes\n            ]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value)=>{\n            this._data[offset] = this._getValue(value);\n        };\n    }\n    constructor(wordSize){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n}\nclass Reader {\n    get data() {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(this._data);\n    }\n    get consumed() {\n        return this._offset;\n    }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(this.readBytes(this.wordSize));\n    }\n    constructor(data, wordSize, coerceFunc, allowLoose){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_data\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(data));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_coerceFunc\", coerceFunc);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n} //# sourceMappingURL=abstract-coder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/address.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/address.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressCoder: function() { return /* binding */ AddressCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\n\n\nclass AddressCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_1__.getAddress)(value);\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_1__.getAddress)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexZeroPad)(reader.readValue().toHexString(), 20));\n    }\n    constructor(localName){\n        super(\"address\", \"address\", localName, false);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFDdUM7QUFDRjtBQUNUO0FBQ2xDLE1BQU1HLHFCQUFxQkQsa0RBQUtBO0lBSW5DRSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsS0FBSyxFQUFFO1FBQ2xCLElBQUk7WUFDQUEsUUFBUVAsa0VBQVVBLENBQUNPO1FBQ3ZCLEVBQ0EsT0FBT0MsT0FBTztZQUNWLElBQUksQ0FBQ0MsV0FBVyxDQUFDRCxNQUFNRSxPQUFPLEVBQUVIO1FBQ3BDO1FBQ0EsT0FBT0QsT0FBT0ssVUFBVSxDQUFDSjtJQUM3QjtJQUNBSyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPYixrRUFBVUEsQ0FBQ0MsZ0VBQVVBLENBQUNZLE9BQU9DLFNBQVMsR0FBR0MsV0FBVyxJQUFJO0lBQ25FO0lBakJBQyxZQUFZQyxTQUFTLENBQUU7UUFDbkIsS0FBSyxDQUFDLFdBQVcsV0FBV0EsV0FBVztJQUMzQztBQWdCSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2FkZHJlc3MuanM/NjBlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgaGV4WmVyb1BhZCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuZXhwb3J0IGNsYXNzIEFkZHJlc3NDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJhZGRyZXNzXCIsIFwiYWRkcmVzc1wiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0QWRkcmVzcyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKGVycm9yLm1lc3NhZ2UsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiBnZXRBZGRyZXNzKGhleFplcm9QYWQocmVhZGVyLnJlYWRWYWx1ZSgpLnRvSGV4U3RyaW5nKCksIDIwKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0QWRkcmVzcyIsImhleFplcm9QYWQiLCJDb2RlciIsIkFkZHJlc3NDb2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwiZXJyb3IiLCJfdGhyb3dFcnJvciIsIm1lc3NhZ2UiLCJ3cml0ZVZhbHVlIiwiZGVjb2RlIiwicmVhZGVyIiwicmVhZFZhbHVlIiwidG9IZXhTdHJpbmciLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/address.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCoder: function() { return /* binding */ AnonymousCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\n// Clones the functionality of an existing Coder, but without a localName\nclass AnonymousCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n    constructor(coder){\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n} //# sourceMappingURL=anonymous.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYW5vbnltb3VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWE7QUFDNEI7QUFDekMseUVBQXlFO0FBQ2xFLE1BQU1DLHVCQUF1QkQsa0RBQUtBO0lBS3JDRSxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsWUFBWTtJQUNsQztJQUNBRSxPQUFPQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0gsS0FBSyxDQUFDQyxNQUFNLENBQUNDLFFBQVFDO0lBQ3JDO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUNJLE1BQU0sQ0FBQ0M7SUFDN0I7SUFaQUMsWUFBWU4sS0FBSyxDQUFFO1FBQ2YsS0FBSyxDQUFDQSxNQUFNTyxJQUFJLEVBQUVQLE1BQU1RLElBQUksRUFBRUMsV0FBV1QsTUFBTVUsT0FBTztRQUN0RCxJQUFJLENBQUNWLEtBQUssR0FBR0E7SUFDakI7QUFVSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2Fub255bW91cy5qcz9hMjVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuLy8gQ2xvbmVzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGFuIGV4aXN0aW5nIENvZGVyLCBidXQgd2l0aG91dCBhIGxvY2FsTmFtZVxuZXhwb3J0IGNsYXNzIEFub255bW91c0NvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvZGVyKSB7XG4gICAgICAgIHN1cGVyKGNvZGVyLm5hbWUsIGNvZGVyLnR5cGUsIHVuZGVmaW5lZCwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFub255bW91cy5qcy5tYXAiXSwibmFtZXMiOlsiQ29kZXIiLCJBbm9ueW1vdXNDb2RlciIsImRlZmF1bHRWYWx1ZSIsImNvZGVyIiwiZW5jb2RlIiwid3JpdGVyIiwidmFsdWUiLCJkZWNvZGUiLCJyZWFkZXIiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0eXBlIiwidW5kZWZpbmVkIiwiZHluYW1pYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/array.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayCoder: function() { return /* binding */ ArrayCoder; },\n/* harmony export */   pack: function() { return /* binding */ pack; },\n/* harmony export */   unpack: function() { return /* binding */ unpack; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\");\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _anonymous__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./anonymous */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js\");\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\n\nfunction pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    } else if (values && typeof values === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder)=>{\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new _abstract_coder__WEBPACK_IMPORTED_MODULE_2__.Writer(writer.wordSize);\n    let dynamicWriter = new _abstract_coder__WEBPACK_IMPORTED_MODULE_2__.Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index)=>{\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset)=>{\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func)=>{\n        func(staticWriter.length);\n    });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nfunction unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder)=>{\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder)=>{\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index)=>{\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: ()=>{\n                    throw value;\n                }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n    for(let i = 0; i < values.length; i++){\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: ()=>{\n                    throw value;\n                }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nclass ArrayCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_2__.Coder {\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for(let i = 0; i < this.length; i++){\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n        let coders = [];\n        for(let i = 0; i < value.length; i++){\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for(let i = 0; i < count; i++){\n            coders.push(new _anonymous__WEBPACK_IMPORTED_MODULE_3__.AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n    constructor(coder, length, localName){\n        const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n        const dynamic = length === -1 || coder.dynamic;\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n} //# sourceMappingURL=array.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/array.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanCoder: function() { return /* binding */ BooleanCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\nclass BooleanCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n    constructor(localName){\n        super(\"bool\", \"bool\", localName, false);\n    }\n} //# sourceMappingURL=boolean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYm9vbGVhbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQzRCO0FBQ2xDLE1BQU1DLHFCQUFxQkQsa0RBQUtBO0lBSW5DRSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsS0FBSyxFQUFFO1FBQ2xCLE9BQU9ELE9BQU9FLFVBQVUsQ0FBQ0QsUUFBUSxJQUFJO0lBQ3pDO0lBQ0FFLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU9BLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLENBQUNDLElBQUksRUFBRSxDQUFDRixPQUFPRyxTQUFTLEdBQUdDLE1BQU07SUFDOUQ7SUFYQUMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxRQUFRLFFBQVFBLFdBQVc7SUFDckM7QUFVSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2Jvb2xlYW4uanM/MmIwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmV4cG9ydCBjbGFzcyBCb29sZWFuQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYm9vbFwiLCBcImJvb2xcIiwgbG9jYWxOYW1lLCBmYWxzZSk7XG4gICAgfVxuICAgIGRlZmF1bHRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbmNvZGUod3JpdGVyLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUgPyAxIDogMCk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy50eXBlLCAhcmVhZGVyLnJlYWRWYWx1ZSgpLmlzWmVybygpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sZWFuLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlciIsIkJvb2xlYW5Db2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwid3JpdGVWYWx1ZSIsImRlY29kZSIsInJlYWRlciIsImNvZXJjZSIsInR5cGUiLCJyZWFkVmFsdWUiLCJpc1plcm8iLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesCoder: function() { return /* binding */ BytesCoder; },\n/* harmony export */   DynamicBytesCoder: function() { return /* binding */ DynamicBytesCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\n\nclass DynamicBytesCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n    constructor(type, localName){\n        super(type, type, localName, true);\n    }\n}\nclass BytesCoder extends DynamicBytesCoder {\n    decode(reader) {\n        return reader.coerce(this.name, (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.hexlify)(super.decode(reader)));\n    }\n    constructor(localName){\n        super(\"bytes\", localName);\n    }\n} //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhO0FBQzRDO0FBQ2hCO0FBQ2xDLE1BQU1HLDBCQUEwQkQsa0RBQUtBO0lBSXhDRSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsS0FBSyxFQUFFO1FBQ2xCQSxRQUFRUCw4REFBUUEsQ0FBQ087UUFDakIsSUFBSUMsU0FBU0YsT0FBT0csVUFBVSxDQUFDRixNQUFNQyxNQUFNO1FBQzNDQSxVQUFVRixPQUFPSSxVQUFVLENBQUNIO1FBQzVCLE9BQU9DO0lBQ1g7SUFDQUcsT0FBT0MsTUFBTSxFQUFFO1FBQ1gsT0FBT0EsT0FBT0MsU0FBUyxDQUFDRCxPQUFPRSxTQUFTLEdBQUdDLFFBQVEsSUFBSTtJQUMzRDtJQWRBQyxZQUFZQyxJQUFJLEVBQUVDLFNBQVMsQ0FBRTtRQUN6QixLQUFLLENBQUNELE1BQU1BLE1BQU1DLFdBQVc7SUFDakM7QUFhSjtBQUNPLE1BQU1DLG1CQUFtQmhCO0lBSTVCUSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPQSxPQUFPUSxNQUFNLENBQUMsSUFBSSxDQUFDQyxJQUFJLEVBQUVwQiw2REFBT0EsQ0FBQyxLQUFLLENBQUNVLE9BQU9DO0lBQ3pEO0lBTEFJLFlBQVlFLFNBQVMsQ0FBRTtRQUNuQixLQUFLLENBQUMsU0FBU0E7SUFDbkI7QUFJSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL2J5dGVzLmpzPzQ3YzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgQ29kZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuZXhwb3J0IGNsYXNzIER5bmFtaWNCeXRlc0NvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGxvY2FsTmFtZSkge1xuICAgICAgICBzdXBlcih0eXBlLCB0eXBlLCBsb2NhbE5hbWUsIHRydWUpO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBcIjB4XCI7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICBsZXQgbGVuZ3RoID0gd3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgbGVuZ3RoICs9IHdyaXRlci53cml0ZUJ5dGVzKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLnJlYWRCeXRlcyhyZWFkZXIucmVhZFZhbHVlKCkudG9OdW1iZXIoKSwgdHJ1ZSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJ5dGVzQ29kZXIgZXh0ZW5kcyBEeW5hbWljQnl0ZXNDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwiYnl0ZXNcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIGhleGxpZnkoc3VwZXIuZGVjb2RlKHJlYWRlcikpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiYXJyYXlpZnkiLCJoZXhsaWZ5IiwiQ29kZXIiLCJEeW5hbWljQnl0ZXNDb2RlciIsImRlZmF1bHRWYWx1ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwibGVuZ3RoIiwid3JpdGVWYWx1ZSIsIndyaXRlQnl0ZXMiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkQnl0ZXMiLCJyZWFkVmFsdWUiLCJ0b051bWJlciIsImNvbnN0cnVjdG9yIiwidHlwZSIsImxvY2FsTmFtZSIsIkJ5dGVzQ29kZXIiLCJjb2VyY2UiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedBytesCoder: function() { return /* binding */ FixedBytesCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\n\n// @TODO: Merge this with bytes\nclass FixedBytesCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.arrayify)(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.hexlify)(reader.readBytes(this.size)));\n    }\n    constructor(size, localName){\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n} //# sourceMappingURL=fixed-bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvZml4ZWQtYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDNEM7QUFDaEI7QUFDekMsK0JBQStCO0FBQ3hCLE1BQU1HLHdCQUF3QkQsa0RBQUtBO0lBTXRDRSxlQUFlO1FBQ1gsT0FBTyxxRUFBdUVDLFNBQVMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDL0c7SUFDQUMsT0FBT0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7UUFDbEIsSUFBSUMsT0FBT1YsOERBQVFBLENBQUNTO1FBQ3BCLElBQUlDLEtBQUtDLE1BQU0sS0FBSyxJQUFJLENBQUNMLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUNNLFdBQVcsQ0FBQyx5QkFBeUJIO1FBQzlDO1FBQ0EsT0FBT0QsT0FBT0ssVUFBVSxDQUFDSDtJQUM3QjtJQUNBSSxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPQSxPQUFPQyxNQUFNLENBQUMsSUFBSSxDQUFDQyxJQUFJLEVBQUVoQiw2REFBT0EsQ0FBQ2MsT0FBT0csU0FBUyxDQUFDLElBQUksQ0FBQ1osSUFBSTtJQUN0RTtJQWpCQWEsWUFBWWIsSUFBSSxFQUFFYyxTQUFTLENBQUU7UUFDekIsSUFBSUgsT0FBTyxVQUFVSSxPQUFPZjtRQUM1QixLQUFLLENBQUNXLE1BQU1BLE1BQU1HLFdBQVc7UUFDN0IsSUFBSSxDQUFDZCxJQUFJLEdBQUdBO0lBQ2hCO0FBY0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9saWIuZXNtL2NvZGVycy9maXhlZC1ieXRlcy5qcz85OTBlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbi8vIEBUT0RPOiBNZXJnZSB0aGlzIHdpdGggYnl0ZXNcbmV4cG9ydCBjbGFzcyBGaXhlZEJ5dGVzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSwgbG9jYWxOYW1lKSB7XG4gICAgICAgIGxldCBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gKFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIpLnN1YnN0cmluZygwLCAyICsgdGhpcy5zaXplICogMik7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIGxldCBkYXRhID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcImluY29ycmVjdCBkYXRhIGxlbmd0aFwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZUJ5dGVzKGRhdGEpO1xuICAgIH1cbiAgICBkZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgaGV4bGlmeShyZWFkZXIucmVhZEJ5dGVzKHRoaXMuc2l6ZSkpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXhlZC1ieXRlcy5qcy5tYXAiXSwibmFtZXMiOlsiYXJyYXlpZnkiLCJoZXhsaWZ5IiwiQ29kZXIiLCJGaXhlZEJ5dGVzQ29kZXIiLCJkZWZhdWx0VmFsdWUiLCJzdWJzdHJpbmciLCJzaXplIiwiZW5jb2RlIiwid3JpdGVyIiwidmFsdWUiLCJkYXRhIiwibGVuZ3RoIiwiX3Rocm93RXJyb3IiLCJ3cml0ZUJ5dGVzIiwiZGVjb2RlIiwicmVhZGVyIiwiY29lcmNlIiwibmFtZSIsInJlYWRCeXRlcyIsImNvbnN0cnVjdG9yIiwibG9jYWxOYW1lIiwiU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/null.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/null.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NullCoder: function() { return /* binding */ NullCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\nclass NullCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n    constructor(localName){\n        super(\"null\", \"\", localName, false);\n    }\n} //# sourceMappingURL=null.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvbnVsbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQzRCO0FBQ2xDLE1BQU1DLGtCQUFrQkQsa0RBQUtBO0lBSWhDRSxlQUFlO1FBQ1gsT0FBTztJQUNYO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRUMsS0FBSyxFQUFFO1FBQ2xCLElBQUlBLFNBQVMsTUFBTTtZQUNmLElBQUksQ0FBQ0MsV0FBVyxDQUFDLFlBQVlEO1FBQ2pDO1FBQ0EsT0FBT0QsT0FBT0csVUFBVSxDQUFDLEVBQUU7SUFDL0I7SUFDQUMsT0FBT0MsTUFBTSxFQUFFO1FBQ1hBLE9BQU9DLFNBQVMsQ0FBQztRQUNqQixPQUFPRCxPQUFPRSxNQUFNLENBQUMsSUFBSSxDQUFDQyxJQUFJLEVBQUU7SUFDcEM7SUFmQUMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxRQUFRLElBQUlBLFdBQVc7SUFDakM7QUFjSixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL251bGwuanM/ZmQ3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmV4cG9ydCBjbGFzcyBOdWxsQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lKSB7XG4gICAgICAgIHN1cGVyKFwibnVsbFwiLCBcIlwiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJub3QgbnVsbFwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZUJ5dGVzKFtdKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZWFkZXIucmVhZEJ5dGVzKDApO1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIG51bGwpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bGwuanMubWFwIl0sIm5hbWVzIjpbIkNvZGVyIiwiTnVsbENvZGVyIiwiZGVmYXVsdFZhbHVlIiwiZW5jb2RlIiwid3JpdGVyIiwidmFsdWUiLCJfdGhyb3dFcnJvciIsIndyaXRlQnl0ZXMiLCJkZWNvZGUiLCJyZWFkZXIiLCJyZWFkQnl0ZXMiLCJjb2VyY2UiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJsb2NhbE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/null.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/number.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/number.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumberCoder: function() { return /* binding */ NumberCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n\n\n\n\nclass NumberCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(_ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.One).mul(_ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(_ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n    constructor(size, signed, localName){\n        const name = (signed ? \"int\" : \"uint\") + size * 8;\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n} //# sourceMappingURL=number.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvbnVtYmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUN3QztBQUN5QjtBQUNyQztBQUNsQyxNQUFNTSxvQkFBb0JELGtEQUFLQTtJQU9sQ0UsZUFBZTtRQUNYLE9BQU87SUFDWDtJQUNBQyxPQUFPQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtRQUNsQixJQUFJQyxJQUFJWCwrREFBU0EsQ0FBQ1ksSUFBSSxDQUFDRjtRQUN2QixxQ0FBcUM7UUFDckMsSUFBSUcsZUFBZVosZ0VBQVVBLENBQUNhLElBQUksQ0FBQ0wsT0FBT00sUUFBUSxHQUFHO1FBQ3JELElBQUksSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDYixJQUFJQyxTQUFTSixhQUFhQyxJQUFJLENBQUMsSUFBSSxDQUFDSSxJQUFJLEdBQUcsSUFBSTtZQUMvQyxJQUFJUCxFQUFFUSxFQUFFLENBQUNGLFdBQVdOLEVBQUVTLEVBQUUsQ0FBQ0gsT0FBT0ksR0FBRyxDQUFDbEIseURBQUdBLEVBQUVtQixHQUFHLENBQUNwQixpRUFBV0EsSUFBSTtnQkFDeEQsSUFBSSxDQUFDcUIsV0FBVyxDQUFDLHVCQUF1QmI7WUFDNUM7UUFDSixPQUNLLElBQUlDLEVBQUVTLEVBQUUsQ0FBQ2hCLDBEQUFJQSxLQUFLTyxFQUFFUSxFQUFFLENBQUNOLGFBQWFDLElBQUksQ0FBQyxJQUFJLENBQUNJLElBQUksR0FBRyxLQUFLO1lBQzNELElBQUksQ0FBQ0ssV0FBVyxDQUFDLHVCQUF1QmI7UUFDNUM7UUFDQUMsSUFBSUEsRUFBRWEsTUFBTSxDQUFDLElBQUksQ0FBQ04sSUFBSSxHQUFHLEdBQUdKLElBQUksQ0FBQyxJQUFJLENBQUNJLElBQUksR0FBRztRQUM3QyxJQUFJLElBQUksQ0FBQ0YsTUFBTSxFQUFFO1lBQ2JMLElBQUlBLEVBQUVjLFFBQVEsQ0FBQyxJQUFJLENBQUNQLElBQUksR0FBRyxHQUFHTSxNQUFNLENBQUMsSUFBSWYsT0FBT00sUUFBUTtRQUM1RDtRQUNBLE9BQU9OLE9BQU9pQixVQUFVLENBQUNmO0lBQzdCO0lBQ0FnQixPQUFPQyxNQUFNLEVBQUU7UUFDWCxJQUFJbEIsUUFBUWtCLE9BQU9DLFNBQVMsR0FBR2YsSUFBSSxDQUFDLElBQUksQ0FBQ0ksSUFBSSxHQUFHO1FBQ2hELElBQUksSUFBSSxDQUFDRixNQUFNLEVBQUU7WUFDYk4sUUFBUUEsTUFBTWUsUUFBUSxDQUFDLElBQUksQ0FBQ1AsSUFBSSxHQUFHO1FBQ3ZDO1FBQ0EsT0FBT1UsT0FBT0UsTUFBTSxDQUFDLElBQUksQ0FBQ0MsSUFBSSxFQUFFckI7SUFDcEM7SUFsQ0FzQixZQUFZZCxJQUFJLEVBQUVGLE1BQU0sRUFBRWlCLFNBQVMsQ0FBRTtRQUNqQyxNQUFNRixPQUFRLENBQUNmLFNBQVMsUUFBUSxNQUFLLElBQU1FLE9BQU87UUFDbEQsS0FBSyxDQUFDYSxNQUFNQSxNQUFNRSxXQUFXO1FBQzdCLElBQUksQ0FBQ2YsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0YsTUFBTSxHQUFHQTtJQUNsQjtBQThCSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL251bWJlci5qcz9lZTM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgTWF4VWludDI1NiwgTmVnYXRpdmVPbmUsIE9uZSwgWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcbmltcG9ydCB7IENvZGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmV4cG9ydCBjbGFzcyBOdW1iZXJDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzaXplLCBzaWduZWQsIGxvY2FsTmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lID0gKChzaWduZWQgPyBcImludFwiIDogXCJ1aW50XCIpICsgKHNpemUgKiA4KSk7XG4gICAgICAgIHN1cGVyKG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnNpZ25lZCA9IHNpZ25lZDtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IHYgPSBCaWdOdW1iZXIuZnJvbSh2YWx1ZSk7XG4gICAgICAgIC8vIENoZWNrIGJvdW5kcyBhcmUgc2FmZSBmb3IgZW5jb2RpbmdcbiAgICAgICAgbGV0IG1heFVpbnRWYWx1ZSA9IE1heFVpbnQyNTYubWFzayh3cml0ZXIud29yZFNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICBsZXQgYm91bmRzID0gbWF4VWludFZhbHVlLm1hc2sodGhpcy5zaXplICogOCAtIDEpO1xuICAgICAgICAgICAgaWYgKHYuZ3QoYm91bmRzKSB8fCB2Lmx0KGJvdW5kcy5hZGQoT25lKS5tdWwoTmVnYXRpdmVPbmUpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2Lmx0KFplcm8pIHx8IHYuZ3QobWF4VWludFZhbHVlLm1hc2sodGhpcy5zaXplICogOCkpKSB7XG4gICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdiA9IHYudG9Ud29zKHRoaXMuc2l6ZSAqIDgpLm1hc2sodGhpcy5zaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgdiA9IHYuZnJvbVR3b3ModGhpcy5zaXplICogOCkudG9Ud29zKDggKiB3cml0ZXIud29yZFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2KTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICBsZXQgdmFsdWUgPSByZWFkZXIucmVhZFZhbHVlKCkubWFzayh0aGlzLnNpemUgKiA4KTtcbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmZyb21Ud29zKHRoaXMuc2l6ZSAqIDgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdmFsdWUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlci5qcy5tYXAiXSwibmFtZXMiOlsiQmlnTnVtYmVyIiwiTWF4VWludDI1NiIsIk5lZ2F0aXZlT25lIiwiT25lIiwiWmVybyIsIkNvZGVyIiwiTnVtYmVyQ29kZXIiLCJkZWZhdWx0VmFsdWUiLCJlbmNvZGUiLCJ3cml0ZXIiLCJ2YWx1ZSIsInYiLCJmcm9tIiwibWF4VWludFZhbHVlIiwibWFzayIsIndvcmRTaXplIiwic2lnbmVkIiwiYm91bmRzIiwic2l6ZSIsImd0IiwibHQiLCJhZGQiLCJtdWwiLCJfdGhyb3dFcnJvciIsInRvVHdvcyIsImZyb21Ud29zIiwid3JpdGVWYWx1ZSIsImRlY29kZSIsInJlYWRlciIsInJlYWRWYWx1ZSIsImNvZXJjZSIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsImxvY2FsTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/number.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/string.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/string.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringCoder: function() { return /* binding */ StringCoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\");\n\n\n\nclass StringCoder extends _bytes__WEBPACK_IMPORTED_MODULE_0__.DynamicBytesCoder {\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(value));\n    }\n    decode(reader) {\n        return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.toUtf8String)(super.decode(reader));\n    }\n    constructor(localName){\n        super(\"string\", localName);\n    }\n} //# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ3NEO0FBQ3ZCO0FBQ3JDLE1BQU1HLG9CQUFvQkQscURBQWlCQTtJQUk5Q0UsZUFBZTtRQUNYLE9BQU87SUFDWDtJQUNBQyxPQUFPQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQ0YsT0FBT0MsUUFBUU4sbUVBQVdBLENBQUNPO0lBQzVDO0lBQ0FDLE9BQU9DLE1BQU0sRUFBRTtRQUNYLE9BQU9SLG9FQUFZQSxDQUFDLEtBQUssQ0FBQ08sT0FBT0M7SUFDckM7SUFYQUMsWUFBWUMsU0FBUyxDQUFFO1FBQ25CLEtBQUssQ0FBQyxVQUFVQTtJQUNwQjtBQVVKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvc3RyaW5nLmpzPzJmYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IER5bmFtaWNCeXRlc0NvZGVyIH0gZnJvbSBcIi4vYnl0ZXNcIjtcbmV4cG9ydCBjbGFzcyBTdHJpbmdDb2RlciBleHRlbmRzIER5bmFtaWNCeXRlc0NvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpIHtcbiAgICAgICAgc3VwZXIoXCJzdHJpbmdcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgZW5jb2RlKHdyaXRlciwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuY29kZSh3cml0ZXIsIHRvVXRmOEJ5dGVzKHZhbHVlKSk7XG4gICAgfVxuICAgIGRlY29kZShyZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1V0ZjhCeXRlcyIsInRvVXRmOFN0cmluZyIsIkR5bmFtaWNCeXRlc0NvZGVyIiwiU3RyaW5nQ29kZXIiLCJkZWZhdWx0VmFsdWUiLCJlbmNvZGUiLCJ3cml0ZXIiLCJ2YWx1ZSIsImRlY29kZSIsInJlYWRlciIsImNvbnN0cnVjdG9yIiwibG9jYWxOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/string.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TupleCoder: function() { return /* binding */ TupleCoder; }\n/* harmony export */ });\n/* harmony import */ var _abstract_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/array.js\");\n\n\n\nclass TupleCoder extends _abstract_coder__WEBPACK_IMPORTED_MODULE_0__.Coder {\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder)=>{\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder)=>{\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index)=>{\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return (0,_array__WEBPACK_IMPORTED_MODULE_1__.pack)(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, (0,_array__WEBPACK_IMPORTED_MODULE_1__.unpack)(reader, this.coders));\n    }\n    constructor(coders, localName){\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder)=>{\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = \"tuple(\" + types.join(\",\") + \")\";\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n} //# sourceMappingURL=tuple.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9jb2RlcnMvdHVwbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDNEI7QUFDRjtBQUNoQyxNQUFNRyxtQkFBbUJILGtEQUFLQTtJQWNqQ0ksZUFBZTtRQUNYLE1BQU1DLFNBQVMsRUFBRTtRQUNqQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLENBQUNDO1lBQ2pCSCxPQUFPSSxJQUFJLENBQUNELE1BQU1KLFlBQVk7UUFDbEM7UUFDQSw0REFBNEQ7UUFDNUQsTUFBTU0sY0FBYyxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLENBQUNDLE9BQU9KO1lBQzNDLE1BQU1LLE9BQU9MLE1BQU1NLFNBQVM7WUFDNUIsSUFBSUQsTUFBTTtnQkFDTixJQUFJLENBQUNELEtBQUssQ0FBQ0MsS0FBSyxFQUFFO29CQUNkRCxLQUFLLENBQUNDLEtBQUssR0FBRztnQkFDbEI7Z0JBQ0FELEtBQUssQ0FBQ0MsS0FBSztZQUNmO1lBQ0EsT0FBT0Q7UUFDWCxHQUFHLENBQUM7UUFDSixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDTixNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPTztZQUN4QixJQUFJRixPQUFPTCxNQUFNTSxTQUFTO1lBQzFCLElBQUksQ0FBQ0QsUUFBUUgsV0FBVyxDQUFDRyxLQUFLLEtBQUssR0FBRztnQkFDbEM7WUFDSjtZQUNBLElBQUlBLFNBQVMsVUFBVTtnQkFDbkJBLE9BQU87WUFDWDtZQUNBLElBQUlSLE1BQU0sQ0FBQ1EsS0FBSyxJQUFJLE1BQU07Z0JBQ3RCO1lBQ0o7WUFDQVIsTUFBTSxDQUFDUSxLQUFLLEdBQUdSLE1BQU0sQ0FBQ1UsTUFBTTtRQUNoQztRQUNBLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQ1o7SUFDekI7SUFDQWEsT0FBT0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7UUFDbEIsT0FBT25CLDRDQUFJQSxDQUFDa0IsUUFBUSxJQUFJLENBQUNiLE1BQU0sRUFBRWM7SUFDckM7SUFDQUMsT0FBT0MsTUFBTSxFQUFFO1FBQ1gsT0FBT0EsT0FBT0MsTUFBTSxDQUFDLElBQUksQ0FBQ1YsSUFBSSxFQUFFWCw4Q0FBTUEsQ0FBQ29CLFFBQVEsSUFBSSxDQUFDaEIsTUFBTTtJQUM5RDtJQWxEQWtCLFlBQVlsQixNQUFNLEVBQUVRLFNBQVMsQ0FBRTtRQUMzQixJQUFJVyxVQUFVO1FBQ2QsTUFBTUMsUUFBUSxFQUFFO1FBQ2hCcEIsT0FBT0MsT0FBTyxDQUFDLENBQUNDO1lBQ1osSUFBSUEsTUFBTWlCLE9BQU8sRUFBRTtnQkFDZkEsVUFBVTtZQUNkO1lBQ0FDLE1BQU1qQixJQUFJLENBQUNELE1BQU1tQixJQUFJO1FBQ3pCO1FBQ0EsTUFBTUEsT0FBUSxXQUFXRCxNQUFNRSxJQUFJLENBQUMsT0FBTztRQUMzQyxLQUFLLENBQUMsU0FBU0QsTUFBTWIsV0FBV1c7UUFDaEMsSUFBSSxDQUFDbkIsTUFBTSxHQUFHQTtJQUNsQjtBQXVDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL2xpYi5lc20vY29kZXJzL3R1cGxlLmpzPzFjNmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBDb2RlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyXCI7XG5pbXBvcnQgeyBwYWNrLCB1bnBhY2sgfSBmcm9tIFwiLi9hcnJheVwiO1xuZXhwb3J0IGNsYXNzIFR1cGxlQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IoY29kZXJzLCBsb2NhbE5hbWUpIHtcbiAgICAgICAgbGV0IGR5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHlwZXMgPSBbXTtcbiAgICAgICAgY29kZXJzLmZvckVhY2goKGNvZGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29kZXIuZHluYW1pYykge1xuICAgICAgICAgICAgICAgIGR5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZXMucHVzaChjb2Rlci50eXBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAoXCJ0dXBsZShcIiArIHR5cGVzLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuICAgICAgICBzdXBlcihcInR1cGxlXCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXJzID0gY29kZXJzO1xuICAgIH1cbiAgICBkZWZhdWx0VmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLmNvZGVycy5mb3JFYWNoKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goY29kZXIuZGVmYXVsdFZhbHVlKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2Ugb25seSBvdXRwdXQgbmFtZWQgcHJvcGVydGllcyBmb3IgdW5pcXVlbHkgbmFtZWQgY29kZXJzXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gdGhpcy5jb2RlcnMucmVkdWNlKChhY2N1bSwgY29kZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBjb2Rlci5sb2NhbE5hbWU7XG4gICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmICghYWNjdW1bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW1bbmFtZV0gPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2N1bVtuYW1lXSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIC8vIEFkZCBuYW1lZCB2YWx1ZXNcbiAgICAgICAgdGhpcy5jb2RlcnMuZm9yRWFjaCgoY29kZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgIGlmICghbmFtZSB8fCB1bmlxdWVOYW1lc1tuYW1lXSAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IFwiX2xlbmd0aFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzW25hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHZhbHVlcyk7XG4gICAgfVxuICAgIGVuY29kZSh3cml0ZXIsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYWNrKHdyaXRlciwgdGhpcy5jb2RlcnMsIHZhbHVlKTtcbiAgICB9XG4gICAgZGVjb2RlKHJlYWRlcikge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIHVucGFjayhyZWFkZXIsIHRoaXMuY29kZXJzKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHVwbGUuanMubWFwIl0sIm5hbWVzIjpbIkNvZGVyIiwicGFjayIsInVucGFjayIsIlR1cGxlQ29kZXIiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZXMiLCJjb2RlcnMiLCJmb3JFYWNoIiwiY29kZXIiLCJwdXNoIiwidW5pcXVlTmFtZXMiLCJyZWR1Y2UiLCJhY2N1bSIsIm5hbWUiLCJsb2NhbE5hbWUiLCJpbmRleCIsIk9iamVjdCIsImZyZWV6ZSIsImVuY29kZSIsIndyaXRlciIsInZhbHVlIiwiZGVjb2RlIiwicmVhZGVyIiwiY29lcmNlIiwiY29uc3RydWN0b3IiLCJkeW5hbWljIiwidHlwZXMiLCJ0eXBlIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/fragments.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/fragments.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstructorFragment: function() { return /* binding */ ConstructorFragment; },\n/* harmony export */   ErrorFragment: function() { return /* binding */ ErrorFragment; },\n/* harmony export */   EventFragment: function() { return /* binding */ EventFragment; },\n/* harmony export */   FormatTypes: function() { return /* binding */ FormatTypes; },\n/* harmony export */   Fragment: function() { return /* binding */ Fragment; },\n/* harmony export */   FunctionFragment: function() { return /* binding */ FunctionFragment; },\n/* harmony export */   ParamType: function() { return /* binding */ ParamType; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\");\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = {\n    calldata: true,\n    memory: true,\n    storage: true\n};\nlet ModifiersNest = {\n    calldata: true,\n    memory: true\n};\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    } else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(\"unexpected character at position \".concat(i), \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = {\n            type: \"\",\n            name: \"\",\n            parent: parent,\n            state: {\n                allowType: true\n            }\n        };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = {\n        type: \"\",\n        name: \"\",\n        state: {\n            allowType: true\n        }\n    };\n    let node = parent;\n    for(let i = 0; i < param.length; i++){\n        let c = param[i];\n        switch(c){\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [\n                    newNode(node)\n                ];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for(let key in params){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(object, key, params[key]);\n    }\n}\nconst FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nclass ParamType {\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n                name: this.name || undefined\n            };\n            if (typeof this.indexed === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp)=>JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp)=>comp.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof value === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: value.name || null,\n            type: verifyType(value.type),\n            indexed: value.indexed == null ? null : !!value.indexed,\n            components: value.components ? value.components.map(ParamType.fromObject) : null\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n    constructor(constructorGuard, params){\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: this.components != null ? \"tuple\" : this.type\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param)=>ParamType.fromString(param, allowIndex));\n}\nclass Fragment {\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch(value.type){\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n    constructor(constructorGuard, params){\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n}\nclass EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof value === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier)=>{\n            switch(modifier.trim()){\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return value && value._isFragment && value.type === \"event\";\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier)=>{\n        switch(modifier.trim()){\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n        if (value.constant != null) {\n            if (!!value.constant !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = result.stateMutability === \"payable\";\n        if (value.payable != null) {\n            if (!!value.payable !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = result.constant ? \"view\" : \"payable\";\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nclass ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n                payable: this.payable,\n                gas: this.gas ? this.gas.toNumber() : undefined,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof value === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: value.gas ? _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(value.gas) : null\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = {\n            type: \"constructor\"\n        };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return value && value._isFragment && value.type === \"constructor\";\n    }\n}\nclass FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n                payable: this.payable,\n                gas: this.gas ? this.gas.toNumber() : undefined,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output)=>JSON.parse(output.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += this.stateMutability + \" \";\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output)=>output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof value === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: value.gas ? _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(value.gas) : null\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = {\n            type: \"function\"\n        };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return value && value._isFragment && value.type === \"function\";\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(\"cannot specify user defined \".concat(sig, \" error\"), \"fragment\", fragment);\n    }\n    return fragment;\n}\nclass ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof value === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = {\n            type: \"error\"\n        };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return value && value._isFragment && value.type === \"error\";\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError('invalid identifier \"'.concat(value, '\"'), \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for(let offset = 0; offset < value.length; offset++){\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n} //# sourceMappingURL=fragments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9mcmFnbWVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUN3QztBQUNNO0FBQ1o7QUFDVjtBQUNyQyxNQUFNSSxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7O0FBRWpDLE1BQU1FLG9CQUFvQixDQUFDO0FBQzNCLElBQUlDLGlCQUFpQjtJQUFFQyxVQUFVO0lBQU1DLFFBQVE7SUFBTUMsU0FBUztBQUFLO0FBQ25FLElBQUlDLGdCQUFnQjtJQUFFSCxVQUFVO0lBQU1DLFFBQVE7QUFBSztBQUNuRCxTQUFTRyxjQUFjQyxJQUFJLEVBQUVDLElBQUk7SUFDN0IsSUFBSUQsU0FBUyxXQUFXQSxTQUFTLFVBQVU7UUFDdkMsSUFBSU4sY0FBYyxDQUFDTyxLQUFLLEVBQUU7WUFDdEIsT0FBTztRQUNYO0lBQ0osT0FDSyxJQUFJRCxTQUFTLFdBQVc7UUFDekIsSUFBSUMsU0FBUyxXQUFXO1lBQ3BCLE9BQU87UUFDWDtJQUNKLE9BQ0ssSUFBSUQsS0FBS0UsT0FBTyxDQUFDLFFBQVEsS0FBS0YsU0FBUyxTQUFTO1FBQ2pELElBQUlGLGFBQWEsQ0FBQ0csS0FBSyxFQUFFO1lBQ3JCLE9BQU87UUFDWDtJQUNKO0lBQ0EsSUFBSVAsY0FBYyxDQUFDTyxLQUFLLElBQUlBLFNBQVMsV0FBVztRQUM1Q1QsT0FBT1csa0JBQWtCLENBQUMsb0JBQW9CLFFBQVFGO0lBQzFEO0lBQ0EsT0FBTztBQUNYO0FBQ0Esb0ZBQW9GO0FBQ3BGLFNBQVNHLGVBQWVDLEtBQUssRUFBRUMsWUFBWTtJQUN2QyxJQUFJQyxnQkFBZ0JGO0lBQ3BCLFNBQVNHLFdBQVdDLENBQUM7UUFDakJqQixPQUFPVyxrQkFBa0IsQ0FBQyxvQ0FBc0MsT0FBRk0sSUFBSyxTQUFTSjtJQUNoRjtJQUNBQSxRQUFRQSxNQUFNSyxPQUFPLENBQUMsT0FBTztJQUM3QixTQUFTQyxR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QUFDO0lBQ3JDO0lBQ0EsMkJBQTJCO0lBQzNCLE9BQU9oRjtBQUNYO0FBQ0EsNkhBQTZIO0FBQzdILE1BQU1pSCxrQkFBa0IsSUFBSXpFLE9BQU87QUFDbkMsU0FBUzhDLGlCQUFpQjlCLEtBQUs7SUFDM0IsSUFBSSxDQUFDQSxTQUFTLENBQUNBLE1BQU1XLEtBQUssQ0FBQzhDLGtCQUFrQjtRQUN6Q3pILE9BQU9XLGtCQUFrQixDQUFDLHVCQUE2QixPQUFOcUQsT0FBTSxNQUFJLFNBQVNBO0lBQ3hFO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLE1BQU0rQixhQUFhLElBQUkvQyxPQUFPO0FBQzlCLFNBQVMrQixhQUFhZixLQUFLO0lBQ3ZCQSxRQUFRQSxNQUFNc0IsSUFBSTtJQUNsQixJQUFJbkMsU0FBUyxFQUFFO0lBQ2YsSUFBSXVFLFFBQVE7SUFDWixJQUFJQyxRQUFRO0lBQ1osSUFBSyxJQUFJQyxTQUFTLEdBQUdBLFNBQVM1RCxNQUFNdkMsTUFBTSxFQUFFbUcsU0FBVTtRQUNsRCxJQUFJbEcsSUFBSXNDLEtBQUssQ0FBQzRELE9BQU87UUFDckIsSUFBSWxHLE1BQU0sT0FBT2lHLFVBQVUsR0FBRztZQUMxQnhFLE9BQU9qQixJQUFJLENBQUN3RjtZQUNaQSxRQUFRO1FBQ1osT0FDSztZQUNEQSxTQUFTaEc7WUFDVCxJQUFJQSxNQUFNLEtBQUs7Z0JBQ1hpRztZQUNKLE9BQ0ssSUFBSWpHLE1BQU0sS0FBSztnQkFDaEJpRztnQkFDQSxJQUFJQSxVQUFVLENBQUMsR0FBRztvQkFDZDNILE9BQU9XLGtCQUFrQixDQUFDLDBCQUEwQixTQUFTcUQ7Z0JBQ2pFO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsSUFBSTBELE9BQU87UUFDUHZFLE9BQU9qQixJQUFJLENBQUN3RjtJQUNoQjtJQUNBLE9BQU92RTtBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvbGliLmVzbS9mcmFnbWVudHMuanM/YTU2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbjtcbmNvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkID0ge307XG5sZXQgTW9kaWZpZXJzQnl0ZXMgPSB7IGNhbGxkYXRhOiB0cnVlLCBtZW1vcnk6IHRydWUsIHN0b3JhZ2U6IHRydWUgfTtcbmxldCBNb2RpZmllcnNOZXN0ID0geyBjYWxsZGF0YTogdHJ1ZSwgbWVtb3J5OiB0cnVlIH07XG5mdW5jdGlvbiBjaGVja01vZGlmaWVyKHR5cGUsIG5hbWUpIHtcbiAgICBpZiAodHlwZSA9PT0gXCJieXRlc1wiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKE1vZGlmaWVyc0J5dGVzW25hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlID09PSBcImFkZHJlc3NcIikge1xuICAgICAgICBpZiAobmFtZSA9PT0gXCJwYXlhYmxlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUuaW5kZXhPZihcIltcIikgPj0gMCB8fCB0eXBlID09PSBcInR1cGxlXCIpIHtcbiAgICAgICAgaWYgKE1vZGlmaWVyc05lc3RbbmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChNb2RpZmllcnNCeXRlc1tuYW1lXSB8fCBuYW1lID09PSBcInBheWFibGVcIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBtb2RpZmllclwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIEBUT0RPOiBNYWtlIHN1cmUgdGhhdCBjaGlsZHJlbiBvZiBhbiBpbmRleGVkIHR1cGxlIGFyZSBtYXJrZWQgd2l0aCBhIG51bGwgaW5kZXhlZFxuZnVuY3Rpb24gcGFyc2VQYXJhbVR5cGUocGFyYW0sIGFsbG93SW5kZXhlZCkge1xuICAgIGxldCBvcmlnaW5hbFBhcmFtID0gcGFyYW07XG4gICAgZnVuY3Rpb24gdGhyb3dFcnJvcihpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IHBvc2l0aW9uICR7aX1gLCBcInBhcmFtXCIsIHBhcmFtKTtcbiAgICB9XG4gICAgcGFyYW0gPSBwYXJhbS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpO1xuICAgIGZ1bmN0aW9uIG5ld05vZGUocGFyZW50KSB7XG4gICAgICAgIGxldCBub2RlID0geyB0eXBlOiBcIlwiLCBuYW1lOiBcIlwiLCBwYXJlbnQ6IHBhcmVudCwgc3RhdGU6IHsgYWxsb3dUeXBlOiB0cnVlIH0gfTtcbiAgICAgICAgaWYgKGFsbG93SW5kZXhlZCkge1xuICAgICAgICAgICAgbm9kZS5pbmRleGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGxldCBwYXJlbnQgPSB7IHR5cGU6IFwiXCIsIG5hbWU6IFwiXCIsIHN0YXRlOiB7IGFsbG93VHlwZTogdHJ1ZSB9IH07XG4gICAgbGV0IG5vZGUgPSBwYXJlbnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IHBhcmFtW2ldO1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuc3RhdGUuYWxsb3dUeXBlICYmIG5vZGUudHlwZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSBcInR1cGxlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFub2RlLnN0YXRlLmFsbG93UGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS50eXBlID0gdmVyaWZ5VHlwZShub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgIG5vZGUuY29tcG9uZW50cyA9IFtuZXdOb2RlKG5vZGUpXTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jb21wb25lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIilcIjpcbiAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5zdGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5uYW1lID09PSBcImluZGV4ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93SW5kZXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBub2RlLmluZGV4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tNb2RpZmllcihub2RlLnR5cGUsIG5vZGUubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZS50eXBlID0gdmVyaWZ5VHlwZShub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IG5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgY2hpbGQucGFyZW50O1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dQYXJhbXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93TmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd0FycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIsXCI6XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbmRleGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLCBub2RlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUudHlwZSA9IHZlcmlmeVR5cGUobm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICBsZXQgc2libGluZyA9IG5ld05vZGUobm9kZS5wYXJlbnQpO1xuICAgICAgICAgICAgICAgIC8veyB0eXBlOiBcIlwiLCBuYW1lOiBcIlwiLCBwYXJlbnQ6IG5vZGUucGFyZW50LCBzdGF0ZTogeyBhbGxvd1R5cGU6IHRydWUgfSB9O1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LmNvbXBvbmVudHMucHVzaChzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBIaXQgYSBzcGFjZS4uLlxuICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICAvLyBJZiByZWFkaW5nIHR5cGUsIHRoZSB0eXBlIGlzIGRvbmUgYW5kIG1heSByZWFkIGEgcGFyYW0gb3IgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChub2RlLnN0YXRlLmFsbG93VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSB2ZXJpZnlUeXBlKG5vZGUudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5zdGF0ZS5hbGxvd1R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93TmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93UGFyYW1zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiByZWFkaW5nIG5hbWUsIHRoZSBuYW1lIGlzIGRvbmVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0ZS5hbGxvd05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93SW5kZXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5kZXhlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLCBub2RlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICAgICAgICAgIGlmICghbm9kZS5zdGF0ZS5hbGxvd0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUudHlwZSArPSBjO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5yZWFkQXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIl1cIjpcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuc3RhdGUucmVhZEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUudHlwZSArPSBjO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUucmVhZEFycmF5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd0FycmF5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93TmFtZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChub2RlLnN0YXRlLmFsbG93VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUuc3RhdGUuYWxsb3dOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSArPSBjO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5zdGF0ZS5hbGxvd0FycmF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlLnN0YXRlLnJlYWRBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLnBhcmVudCkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5leHBlY3RlZCBlb2ZcIiwgXCJwYXJhbVwiLCBwYXJhbSk7XG4gICAgfVxuICAgIGRlbGV0ZSBwYXJlbnQuc3RhdGU7XG4gICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Iob3JpZ2luYWxQYXJhbS5sZW5ndGggLSA3KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5pbmRleGVkKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKG9yaWdpbmFsUGFyYW0ubGVuZ3RoIC0gNyk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5pbmRleGVkID0gdHJ1ZTtcbiAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hlY2tNb2RpZmllcihub2RlLnR5cGUsIG5vZGUubmFtZSkpIHtcbiAgICAgICAgbm9kZS5uYW1lID0gXCJcIjtcbiAgICB9XG4gICAgcGFyZW50LnR5cGUgPSB2ZXJpZnlUeXBlKHBhcmVudC50eXBlKTtcbiAgICByZXR1cm4gcGFyZW50O1xufVxuZnVuY3Rpb24gcG9wdWxhdGUob2JqZWN0LCBwYXJhbXMpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KG9iamVjdCwga2V5LCBwYXJhbXNba2V5XSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEZvcm1hdFR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgLy8gQmFyZSBmb3JtYXR0aW5nLCBhcyBpcyBuZWVkZWQgZm9yIGNvbXB1dGluZyBhIHNpZ2hhc2ggb2YgYW4gZXZlbnQgb3IgZnVuY3Rpb25cbiAgICBzaWdoYXNoOiBcInNpZ2hhc2hcIixcbiAgICAvLyBIdW1hbi1SZWFkYWJsZSB3aXRoIE1pbmltYWwgc3BhY2luZyBhbmQgd2l0aG91dCBuYW1lcyAoY29tcGFjdCBodW1hbi1yZWFkYWJsZSlcbiAgICBtaW5pbWFsOiBcIm1pbmltYWxcIixcbiAgICAvLyBIdW1hbi1SZWFkYWJsZSB3aXRoIG5pY2Ugc3BhY2luZywgaW5jbHVkaW5nIGFsbCBuYW1lc1xuICAgIGZ1bGw6IFwiZnVsbFwiLFxuICAgIC8vIEpTT04tZm9ybWF0IGEgbGEgU29saWRpdHlcbiAgICBqc29uOiBcImpzb25cIlxufSk7XG5jb25zdCBwYXJhbVR5cGVBcnJheSA9IG5ldyBSZWdFeHAoL14oLiopXFxbKFswLTldKilcXF0kLyk7XG5leHBvcnQgY2xhc3MgUGFyYW1UeXBlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVzZSBmcm9tU3RyaW5nXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBQYXJhbVR5cGUoKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBwb3B1bGF0ZSh0aGlzLCBwYXJhbXMpO1xuICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLnR5cGUubWF0Y2gocGFyYW1UeXBlQXJyYXkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogcGFyc2VJbnQobWF0Y2hbMl0gfHwgXCItMVwiKSxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBQYXJhbVR5cGUuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLmNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBiYXNlVHlwZTogXCJhcnJheVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBudWxsLFxuICAgICAgICAgICAgICAgIGJhc2VUeXBlOiAoKHRoaXMuY29tcG9uZW50cyAhPSBudWxsKSA/IFwidHVwbGVcIiA6IHRoaXMudHlwZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUGFyYW1UeXBlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG4gICAgLy8gRm9ybWF0IHRoZSBwYXJhbWV0ZXIgZnJhZ21lbnRcbiAgICAvLyAgIC0gc2lnaGFzaDogXCIodWludDI1NixhZGRyZXNzKVwiXG4gICAgLy8gICAtIG1pbmltYWw6IFwidHVwbGUodWludDI1NixhZGRyZXNzKSBpbmRleGVkXCJcbiAgICAvLyAgIC0gZnVsbDogICAgXCJ0dXBsZSh1aW50MjU2IGZvbywgYWRkcmVzcyBiYXIpIGluZGV4ZWQgYmF6XCJcbiAgICBmb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgIGlmICghZm9ybWF0KSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBGb3JtYXRUeXBlcy5zaWdoYXNoO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRm9ybWF0VHlwZXNbZm9ybWF0XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5qc29uKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICgodGhpcy5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiKSA/IFwidHVwbGVcIiA6IHRoaXMudHlwZSksXG4gICAgICAgICAgICAgICAgbmFtZTogKHRoaXMubmFtZSB8fCB1bmRlZmluZWQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAodGhpcy5pbmRleGVkKSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuaW5kZXhlZCA9IHRoaXMuaW5kZXhlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuY29tcG9uZW50cyA9IHRoaXMuY29tcG9uZW50cy5tYXAoKGNvbXApID0+IEpTT04ucGFyc2UoY29tcC5mb3JtYXQoZm9ybWF0KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIC8vIEFycmF5XG4gICAgICAgIGlmICh0aGlzLmJhc2VUeXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLmFycmF5Q2hpbGRyZW4uZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJbXCIgKyAodGhpcy5hcnJheUxlbmd0aCA8IDAgPyBcIlwiIDogU3RyaW5nKHRoaXMuYXJyYXlMZW5ndGgpKSArIFwiXVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmFzZVR5cGUgPT09IFwidHVwbGVcIikge1xuICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMudHlwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiKFwiICsgdGhpcy5jb21wb25lbnRzLm1hcCgoY29tcCkgPT4gY29tcC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5mdWxsKSA/IFwiLCBcIiA6IFwiLFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiIGluZGV4ZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwgJiYgdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiIFwiICsgdGhpcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHZhbHVlLCBhbGxvd0luZGV4ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1UeXBlLmZyb21TdHJpbmcodmFsdWUsIGFsbG93SW5kZXhlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcmFtVHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKFBhcmFtVHlwZS5pc1BhcmFtVHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFBhcmFtVHlwZShfY29uc3RydWN0b3JHdWFyZCwge1xuICAgICAgICAgICAgbmFtZTogKHZhbHVlLm5hbWUgfHwgbnVsbCksXG4gICAgICAgICAgICB0eXBlOiB2ZXJpZnlUeXBlKHZhbHVlLnR5cGUpLFxuICAgICAgICAgICAgaW5kZXhlZDogKCh2YWx1ZS5pbmRleGVkID09IG51bGwpID8gbnVsbCA6ICEhdmFsdWUuaW5kZXhlZCksXG4gICAgICAgICAgICBjb21wb25lbnRzOiAodmFsdWUuY29tcG9uZW50cyA/IHZhbHVlLmNvbXBvbmVudHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KSA6IG51bGwpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSwgYWxsb3dJbmRleGVkKSB7XG4gICAgICAgIGZ1bmN0aW9uIFBhcmFtVHlwaWZ5KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVR5cGUuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBub2RlLmluZGV4ZWQsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogbm9kZS5jb21wb25lbnRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGFyYW1UeXBpZnkocGFyc2VQYXJhbVR5cGUodmFsdWUsICEhYWxsb3dJbmRleGVkKSk7XG4gICAgfVxuICAgIHN0YXRpYyBpc1BhcmFtVHlwZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5faXNQYXJhbVR5cGUpO1xuICAgIH1cbn1cbjtcbmZ1bmN0aW9uIHBhcnNlUGFyYW1zKHZhbHVlLCBhbGxvd0luZGV4KSB7XG4gICAgcmV0dXJuIHNwbGl0TmVzdGluZyh2YWx1ZSkubWFwKChwYXJhbSkgPT4gUGFyYW1UeXBlLmZyb21TdHJpbmcocGFyYW0sIGFsbG93SW5kZXgpKTtcbn1cbmV4cG9ydCBjbGFzcyBGcmFnbWVudCB7XG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKSB7XG4gICAgICAgIGlmIChjb25zdHJ1Y3Rvckd1YXJkICE9PSBfY29uc3RydWN0b3JHdWFyZCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1c2UgYSBzdGF0aWMgZnJvbSBtZXRob2RcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwibmV3IEZyYWdtZW50KClcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9wdWxhdGUodGhpcywgcGFyYW1zKTtcbiAgICAgICAgdGhpcy5faXNGcmFnbWVudCA9IHRydWU7XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHZhbHVlKSB7XG4gICAgICAgIGlmIChGcmFnbWVudC5pc0ZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIEZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKEZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh2YWx1ZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJldmVudFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImNvbnN0cnVjdG9yXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJmYWxsYmFja1wiOlxuICAgICAgICAgICAgY2FzZSBcInJlY2VpdmVcIjpcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogU29tZXRoaW5nPyBNYXliZSByZXR1cm4gYSBGdW5jdGlvbkZyYWdtZW50PyBBIGN1c3RvbSBEZWZhdWx0RnVuY3Rpb25GcmFnbWVudD9cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnJhZ21lbnQgb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIFwicmV0dXJuc1wiIGlzIHN1cnJvdW5kZWQgYnkgYSBzcGFjZSBhbmQgYWxsIHdoaXRlc3BhY2UgaXMgZXhhY3RseSBvbmUgc3BhY2VcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcKC9nLCBcIiAoXCIpLnJlcGxhY2UoL1xcKS9nLCBcIikgXCIpLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHZhbHVlLnNwbGl0KFwiIFwiKVswXSA9PT0gXCJldmVudFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg1KS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnNwbGl0KFwiIFwiKVswXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg4KS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnNwbGl0KFwiKFwiKVswXS50cmltKCkgPT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnNwbGl0KFwiIFwiKVswXSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg1KS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgZnJhZ21lbnRcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0ZyYWdtZW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNGcmFnbWVudCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50RnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudCB7XG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0ID0gRm9ybWF0VHlwZXMuc2lnaGFzaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZvcm1hdCB0eXBlXCIsIFwiZm9ybWF0XCIsIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImV2ZW50XCIsXG4gICAgICAgICAgICAgICAgYW5vbnltb3VzOiB0aGlzLmFub255bW91cyxcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJldmVudCBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gdGhpcy5uYW1lICsgXCIoXCIgKyB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5mdWxsKSA/IFwiLCBcIiA6IFwiLFwiKSArIFwiKSBcIjtcbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYW5vbnltb3VzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiYW5vbnltb3VzIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSkge1xuICAgICAgICBpZiAoRXZlbnRGcmFnbWVudC5pc0V2ZW50RnJhZ21lbnQodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnR5cGUgIT09IFwiZXZlbnRcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXZlbnQgb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHZlcmlmeUlkZW50aWZpZXIodmFsdWUubmFtZSksXG4gICAgICAgICAgICBhbm9ueW1vdXM6IHZhbHVlLmFub255bW91cyxcbiAgICAgICAgICAgIGlucHV0czogKHZhbHVlLmlucHV0cyA/IHZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpIDogW10pLFxuICAgICAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdmFsdWUubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV2ZW50IHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYW5vbnltb3VzID0gZmFsc2U7XG4gICAgICAgIG1hdGNoWzNdLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChtb2RpZmllci50cmltKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYW5vbnltb3VzXCI6XG4gICAgICAgICAgICAgICAgICAgIGFub255bW91cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJ1bmtub3duIG1vZGlmaWVyOiBcIiArIG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3Qoe1xuICAgICAgICAgICAgbmFtZTogbWF0Y2hbMV0udHJpbSgpLFxuICAgICAgICAgICAgYW5vbnltb3VzOiBhbm9ueW1vdXMsXG4gICAgICAgICAgICBpbnB1dHM6IHBhcnNlUGFyYW1zKG1hdGNoWzJdLCB0cnVlKSxcbiAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGlzRXZlbnRGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLl9pc0ZyYWdtZW50ICYmIHZhbHVlLnR5cGUgPT09IFwiZXZlbnRcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VHYXModmFsdWUsIHBhcmFtcykge1xuICAgIHBhcmFtcy5nYXMgPSBudWxsO1xuICAgIGxldCBjb21wcyA9IHZhbHVlLnNwbGl0KFwiQFwiKTtcbiAgICBpZiAoY29tcHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIGlmIChjb21wcy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBodW1hbi1yZWFkYWJsZSBBQkkgc2lnbmF0dXJlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29tcHNbMV0ubWF0Y2goL15bMC05XSskLykpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGh1bWFuLXJlYWRhYmxlIEFCSSBzaWduYXR1cmUgZ2FzXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5nYXMgPSBCaWdOdW1iZXIuZnJvbShjb21wc1sxXSk7XG4gICAgICAgIHJldHVybiBjb21wc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnModmFsdWUsIHBhcmFtcykge1xuICAgIHBhcmFtcy5jb25zdGFudCA9IGZhbHNlO1xuICAgIHBhcmFtcy5wYXlhYmxlID0gZmFsc2U7XG4gICAgcGFyYW1zLnN0YXRlTXV0YWJpbGl0eSA9IFwibm9ucGF5YWJsZVwiO1xuICAgIHZhbHVlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgICAgICBzd2l0Y2ggKG1vZGlmaWVyLnRyaW0oKSkge1xuICAgICAgICAgICAgY2FzZSBcImNvbnN0YW50XCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLmNvbnN0YW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInBheWFibGVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJub25wYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwYXJhbXMuc3RhdGVNdXRhYmlsaXR5ID0gXCJub25wYXlhYmxlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicHVyZVwiOlxuICAgICAgICAgICAgICAgIHBhcmFtcy5jb25zdGFudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnN0YXRlTXV0YWJpbGl0eSA9IFwicHVyZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZpZXdcIjpcbiAgICAgICAgICAgICAgICBwYXJhbXMuY29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJleHRlcm5hbFwiOlxuICAgICAgICAgICAgY2FzZSBcInB1YmxpY1wiOlxuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVua25vd24gbW9kaWZpZXI6IFwiICsgbW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiB2ZXJpZnlTdGF0ZSh2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICAgICAgcGF5YWJsZTogdHJ1ZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInBheWFibGVcIlxuICAgIH07XG4gICAgaWYgKHZhbHVlLnN0YXRlTXV0YWJpbGl0eSAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSB2YWx1ZS5zdGF0ZU11dGFiaWxpdHk7XG4gICAgICAgIC8vIFNldCAoYW5kIGNoZWNrIHRoaW5ncyBhcmUgY29uc2lzdGVudCkgdGhlIGNvbnN0YW50IHByb3BlcnR5XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9IChyZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInZpZXdcIiB8fCByZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInB1cmVcIik7XG4gICAgICAgIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoKCEhdmFsdWUuY29uc3RhbnQpICE9PSByZXN1bHQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgZnVuY3Rpb24gd2l0aCBtdXRhYmlsaXR5IFwiICsgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IChhbmQgY2hlY2sgdGhpbmdzIGFyZSBjb25zaXN0ZW50KSB0aGUgcGF5YWJsZSBwcm9wZXJ0eVxuICAgICAgICByZXN1bHQucGF5YWJsZSA9IChyZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInBheWFibGVcIik7XG4gICAgICAgIGlmICh2YWx1ZS5wYXlhYmxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICgoISF2YWx1ZS5wYXlhYmxlKSAhPT0gcmVzdWx0LnBheWFibGUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgcGF5YWJsZSBmdW5jdGlvbiB3aXRoIG11dGFiaWxpdHkgXCIgKyByZXN1bHQuc3RhdGVNdXRhYmlsaXR5LCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZS5wYXlhYmxlICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnBheWFibGUgPSAhIXZhbHVlLnBheWFibGU7XG4gICAgICAgIC8vIElmIHBheWFibGUgd2UgY2FuIGFzc3VtZSBub24tY29uc3RhbnQ7IG90aGVyd2lzZSB3ZSBjYW4ndCBhc3N1bWVcbiAgICAgICAgaWYgKHZhbHVlLmNvbnN0YW50ID09IG51bGwgJiYgIXJlc3VsdC5wYXlhYmxlICYmIHZhbHVlLnR5cGUgIT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuYWJsZSB0byBkZXRlcm1pbmUgc3RhdGVNdXRhYmlsaXR5XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG4gICAgICAgIGlmIChyZXN1bHQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPSAocmVzdWx0LnBheWFibGUgPyBcInBheWFibGVcIiA6IFwibm9ucGF5YWJsZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnBheWFibGUgJiYgcmVzdWx0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgcGF5YWJsZSBmdW5jdGlvblwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG4gICAgICAgIHJlc3VsdC5wYXlhYmxlID0gIXJlc3VsdC5jb25zdGFudDtcbiAgICAgICAgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSA9IChyZXN1bHQuY29uc3RhbnQgPyBcInZpZXdcIiA6IFwicGF5YWJsZVwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUudHlwZSAhPT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmFibGUgdG8gZGV0ZXJtaW5lIHN0YXRlTXV0YWJpbGl0eVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBjbGFzcyBDb25zdHJ1Y3RvckZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuICAgIGZvcm1hdChmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RvclwiLFxuICAgICAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eTogKCh0aGlzLnN0YXRlTXV0YWJpbGl0eSAhPT0gXCJub25wYXlhYmxlXCIpID8gdGhpcy5zdGF0ZU11dGFiaWxpdHkgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIHBheWFibGU6IHRoaXMucGF5YWJsZSxcbiAgICAgICAgICAgICAgICBnYXM6ICh0aGlzLmdhcyA/IHRoaXMuZ2FzLnRvTnVtYmVyKCkgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBmb3JtYXQgYSBjb25zdHJ1Y3RvciBmb3Igc2lnaGFzaFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJmb3JtYXQoc2lnaGFzaClcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiY29uc3RydWN0b3IoXCIgKyB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbigoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5mdWxsKSA/IFwiLCBcIiA6IFwiLFwiKSArIFwiKSBcIjtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICYmIHRoaXMuc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuc3RhdGVNdXRhYmlsaXR5ICsgXCIgXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvckZyYWdtZW50LmlzQ29uc3RydWN0b3JGcmFnbWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUudHlwZSAhPT0gXCJjb25zdHJ1Y3RvclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb25zdHJ1Y3RvciBvYmplY3RcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXRlID0gdmVyaWZ5U3RhdGUodmFsdWUpO1xuICAgICAgICBpZiAoc3RhdGUuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY29uc3RhbnRcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBpbnB1dHM6ICh2YWx1ZS5pbnB1dHMgPyB2YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KSA6IFtdKSxcbiAgICAgICAgICAgIHBheWFibGU6IHN0YXRlLnBheWFibGUsXG4gICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IHN0YXRlLnN0YXRlTXV0YWJpbGl0eSxcbiAgICAgICAgICAgIGdhczogKHZhbHVlLmdhcyA/IEJpZ051bWJlci5mcm9tKHZhbHVlLmdhcykgOiBudWxsKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQsIHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7IHR5cGU6IFwiY29uc3RydWN0b3JcIiB9O1xuICAgICAgICB2YWx1ZSA9IHBhcnNlR2FzKHZhbHVlLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcGFyZW5zID0gdmFsdWUubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghcGFyZW5zIHx8IHBhcmVuc1sxXS50cmltKCkgIT09IFwiY29uc3RydWN0b3JcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgY29uc3RydWN0b3Igc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5pbnB1dHMgPSBwYXJzZVBhcmFtcyhwYXJlbnNbMl0udHJpbSgpLCBmYWxzZSk7XG4gICAgICAgIHBhcnNlTW9kaWZpZXJzKHBhcmVuc1szXS50cmltKCksIHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21PYmplY3QocGFyYW1zKTtcbiAgICB9XG4gICAgc3RhdGljIGlzQ29uc3RydWN0b3JGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLl9pc0ZyYWdtZW50ICYmIHZhbHVlLnR5cGUgPT09IFwiY29uc3RydWN0b3JcIik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRnJhZ21lbnQgZXh0ZW5kcyBDb25zdHJ1Y3RvckZyYWdtZW50IHtcbiAgICBmb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgIGlmICghZm9ybWF0KSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBGb3JtYXRUeXBlcy5zaWdoYXNoO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRm9ybWF0VHlwZXNbZm9ybWF0XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5qc29uKSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICAgICAgY29uc3RhbnQ6IHRoaXMuY29uc3RhbnQsXG4gICAgICAgICAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiAoKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIikgPyB0aGlzLnN0YXRlTXV0YWJpbGl0eSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgcGF5YWJsZTogdGhpcy5wYXlhYmxlLFxuICAgICAgICAgICAgICAgIGdhczogKHRoaXMuZ2FzID8gdGhpcy5nYXMudG9OdW1iZXIoKSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSksXG4gICAgICAgICAgICAgICAgb3V0cHV0czogdGhpcy5vdXRwdXRzLm1hcCgob3V0cHV0KSA9PiBKU09OLnBhcnNlKG91dHB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcImZ1bmN0aW9uIFwiO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm5hbWUgKyBcIihcIiArIHRoaXMuaW5wdXRzLm1hcCgoaW5wdXQpID0+IGlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiIDogXCIsXCIpICsgXCIpIFwiO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAodGhpcy5zdGF0ZU11dGFiaWxpdHkgKyBcIiBcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb25zdGFudCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcInZpZXcgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vdXRwdXRzICYmIHRoaXMub3V0cHV0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCJyZXR1cm5zIChcIiArIHRoaXMub3V0cHV0cy5tYXAoKG91dHB1dCkgPT4gb3V0cHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKFwiLCBcIikgKyBcIikgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5nYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIkBcIiArIHRoaXMuZ2FzLnRvU3RyaW5nKCkgKyBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKEZ1bmN0aW9uRnJhZ21lbnQuaXNGdW5jdGlvbkZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZ1bmN0aW9uIG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhdGUgPSB2ZXJpZnlTdGF0ZSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBuYW1lOiB2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgY29uc3RhbnQ6IHN0YXRlLmNvbnN0YW50LFxuICAgICAgICAgICAgaW5wdXRzOiAodmFsdWUuaW5wdXRzID8gdmFsdWUuaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCkgOiBbXSksXG4gICAgICAgICAgICBvdXRwdXRzOiAodmFsdWUub3V0cHV0cyA/IHZhbHVlLm91dHB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KSA6IFtdKSxcbiAgICAgICAgICAgIHBheWFibGU6IHN0YXRlLnBheWFibGUsXG4gICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IHN0YXRlLnN0YXRlTXV0YWJpbGl0eSxcbiAgICAgICAgICAgIGdhczogKHZhbHVlLmdhcyA/IEJpZ051bWJlci5mcm9tKHZhbHVlLmdhcykgOiBudWxsKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQsIHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7IHR5cGU6IFwiZnVuY3Rpb25cIiB9O1xuICAgICAgICB2YWx1ZSA9IHBhcnNlR2FzKHZhbHVlLCBwYXJhbXMpO1xuICAgICAgICBsZXQgY29tcHMgPSB2YWx1ZS5zcGxpdChcIiByZXR1cm5zIFwiKTtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZ1bmN0aW9uIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyZW5zID0gY29tcHNbMF0ubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghcGFyZW5zKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmdW5jdGlvbiBzaWduYXR1cmVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLm5hbWUgPSBwYXJlbnNbMV0udHJpbSgpO1xuICAgICAgICBpZiAocGFyYW1zLm5hbWUpIHtcbiAgICAgICAgICAgIHZlcmlmeUlkZW50aWZpZXIocGFyYW1zLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5pbnB1dHMgPSBwYXJzZVBhcmFtcyhwYXJlbnNbMl0sIGZhbHNlKTtcbiAgICAgICAgcGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSwgcGFyYW1zKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBvdXRwdXRzXG4gICAgICAgIGlmIChjb21wcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgcmV0dXJucyA9IGNvbXBzWzFdLm1hdGNoKHJlZ2V4UGFyZW4pO1xuICAgICAgICAgICAgaWYgKHJldHVybnNbMV0udHJpbSgpICE9IFwiXCIgfHwgcmV0dXJuc1szXS50cmltKCkgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmV4cGVjdGVkIHRva2Vuc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtcy5vdXRwdXRzID0gcGFyc2VQYXJhbXMocmV0dXJuc1syXSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zLm91dHB1dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHBhcmFtcyk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0Z1bmN0aW9uRnJhZ21lbnQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5faXNGcmFnbWVudCAmJiB2YWx1ZS50eXBlID09PSBcImZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cbi8vZXhwb3J0IGNsYXNzIFN0cnVjdEZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuLy99XG5mdW5jdGlvbiBjaGVja0ZvcmJpZGRlbihmcmFnbWVudCkge1xuICAgIGNvbnN0IHNpZyA9IGZyYWdtZW50LmZvcm1hdCgpO1xuICAgIGlmIChzaWcgPT09IFwiRXJyb3Ioc3RyaW5nKVwiIHx8IHNpZyA9PT0gXCJQYW5pYyh1aW50MjU2KVwiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGNhbm5vdCBzcGVjaWZ5IHVzZXIgZGVmaW5lZCAke3NpZ30gZXJyb3JgLCBcImZyYWdtZW50XCIsIGZyYWdtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xufVxuZXhwb3J0IGNsYXNzIEVycm9yRnJhZ21lbnQgZXh0ZW5kcyBGcmFnbWVudCB7XG4gICAgZm9ybWF0KGZvcm1hdCkge1xuICAgICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0ID0gRm9ybWF0VHlwZXMuc2lnaGFzaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZvcm1hdCB0eXBlXCIsIFwiZm9ybWF0XCIsIGZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcImVycm9yIFwiO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm5hbWUgKyBcIihcIiArIHRoaXMuaW5wdXRzLm1hcCgoaW5wdXQpID0+IGlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiIDogXCIsXCIpICsgXCIpIFwiO1xuICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWUpIHtcbiAgICAgICAgaWYgKEVycm9yRnJhZ21lbnQuaXNFcnJvckZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGVycm9yIG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICB0eXBlOiB2YWx1ZS50eXBlLFxuICAgICAgICAgICAgbmFtZTogdmVyaWZ5SWRlbnRpZmllcih2YWx1ZS5uYW1lKSxcbiAgICAgICAgICAgIGlucHV0czogKHZhbHVlLmlucHV0cyA/IHZhbHVlLmlucHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpIDogW10pXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjaGVja0ZvcmJpZGRlbihuZXcgRXJyb3JGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSB7IHR5cGU6IFwiZXJyb3JcIiB9O1xuICAgICAgICBsZXQgcGFyZW5zID0gdmFsdWUubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghcGFyZW5zKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBlcnJvciBzaWduYXR1cmVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLm5hbWUgPSBwYXJlbnNbMV0udHJpbSgpO1xuICAgICAgICBpZiAocGFyYW1zLm5hbWUpIHtcbiAgICAgICAgICAgIHZlcmlmeUlkZW50aWZpZXIocGFyYW1zLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5pbnB1dHMgPSBwYXJzZVBhcmFtcyhwYXJlbnNbMl0sIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNoZWNrRm9yYmlkZGVuKEVycm9yRnJhZ21lbnQuZnJvbU9iamVjdChwYXJhbXMpKTtcbiAgICB9XG4gICAgc3RhdGljIGlzRXJyb3JGcmFnbWVudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLl9pc0ZyYWdtZW50ICYmIHZhbHVlLnR5cGUgPT09IFwiZXJyb3JcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gdmVyaWZ5VHlwZSh0eXBlKSB7XG4gICAgLy8gVGhlc2UgbmVlZCB0byBiZSB0cmFuc2Zvcm1lZCB0byB0aGVpciBmdWxsIGRlc2NyaXB0aW9uXG4gICAgaWYgKHR5cGUubWF0Y2goL151aW50KCR8W14xLTldKS8pKSB7XG4gICAgICAgIHR5cGUgPSBcInVpbnQyNTZcIiArIHR5cGUuc3Vic3RyaW5nKDQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlLm1hdGNoKC9eaW50KCR8W14xLTldKS8pKSB7XG4gICAgICAgIHR5cGUgPSBcImludDI1NlwiICsgdHlwZS5zdWJzdHJpbmcoMyk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBtb3JlIHZlcmlmaWNhdGlvblxuICAgIHJldHVybiB0eXBlO1xufVxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vc29saWRpdHkvYmxvYi8xZjhmMWEzZGI5M2E1NDhkMDU1NWUzZTE0Y2ZjNTVhMTBlMjViNjBlL2RvY3MvZ3JhbW1hci9Tb2xpZGl0eUxleGVyLmc0I0wyMzRcbmNvbnN0IHJlZ2V4SWRlbnRpZmllciA9IG5ldyBSZWdFeHAoXCJeW2EtekEtWiRfXVthLXpBLVowLTkkX10qJFwiKTtcbmZ1bmN0aW9uIHZlcmlmeUlkZW50aWZpZXIodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlIHx8ICF2YWx1ZS5tYXRjaChyZWdleElkZW50aWZpZXIpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgaWRlbnRpZmllciBcIiR7dmFsdWV9XCJgLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgcmVnZXhQYXJlbiA9IG5ldyBSZWdFeHAoXCJeKFteKShdKilcXFxcKCguKilcXFxcKShbXikoXSopJFwiKTtcbmZ1bmN0aW9uIHNwbGl0TmVzdGluZyh2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgYWNjdW0gPSBcIlwiO1xuICAgIGxldCBkZXB0aCA9IDA7XG4gICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgdmFsdWUubGVuZ3RoOyBvZmZzZXQrKykge1xuICAgICAgICBsZXQgYyA9IHZhbHVlW29mZnNldF07XG4gICAgICAgIGlmIChjID09PSBcIixcIiAmJiBkZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYWNjdW0pO1xuICAgICAgICAgICAgYWNjdW0gPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYWNjdW0gKz0gYztcbiAgICAgICAgICAgIGlmIChjID09PSBcIihcIikge1xuICAgICAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjID09PSBcIilcIikge1xuICAgICAgICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgICAgICAgICAgaWYgKGRlcHRoID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5iYWxhbmNlZCBwYXJlbnRoZXNpc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFjY3VtKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFjY3VtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZyYWdtZW50cy5qcy5tYXAiXSwibmFtZXMiOlsiQmlnTnVtYmVyIiwiZGVmaW5lUmVhZE9ubHkiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiX2NvbnN0cnVjdG9yR3VhcmQiLCJNb2RpZmllcnNCeXRlcyIsImNhbGxkYXRhIiwibWVtb3J5Iiwic3RvcmFnZSIsIk1vZGlmaWVyc05lc3QiLCJjaGVja01vZGlmaWVyIiwidHlwZSIsIm5hbWUiLCJpbmRleE9mIiwidGhyb3dBcmd1bWVudEVycm9yIiwicGFyc2VQYXJhbVR5cGUiLCJwYXJhbSIsImFsbG93SW5kZXhlZCIsIm9yaWdpbmFsUGFyYW0iLCJ0aHJvd0Vycm9yIiwiaSIsInJlcGxhY2UiLCJuZXdOb2RlIiwicGFyZW50Iiwibm9kZSIsInN0YXRlIiwiYWxsb3dUeXBlIiwiaW5kZXhlZCIsImxlbmd0aCIsImMiLCJhbGxvd1BhcmFtcyIsInZlcmlmeVR5cGUiLCJjb21wb25lbnRzIiwiY2hpbGQiLCJhbGxvd05hbWUiLCJhbGxvd0FycmF5Iiwic2libGluZyIsInB1c2giLCJyZWFkQXJyYXkiLCJwb3B1bGF0ZSIsIm9iamVjdCIsInBhcmFtcyIsImtleSIsIkZvcm1hdFR5cGVzIiwiT2JqZWN0IiwiZnJlZXplIiwic2lnaGFzaCIsIm1pbmltYWwiLCJmdWxsIiwianNvbiIsInBhcmFtVHlwZUFycmF5IiwiUmVnRXhwIiwiUGFyYW1UeXBlIiwiZm9ybWF0IiwicmVzdWx0IiwiYmFzZVR5cGUiLCJ1bmRlZmluZWQiLCJtYXAiLCJjb21wIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiYXJyYXlDaGlsZHJlbiIsImFycmF5TGVuZ3RoIiwiU3RyaW5nIiwiam9pbiIsImZyb20iLCJ2YWx1ZSIsImZyb21TdHJpbmciLCJmcm9tT2JqZWN0IiwiaXNQYXJhbVR5cGUiLCJQYXJhbVR5cGlmeSIsIl9pc1BhcmFtVHlwZSIsImNvbnN0cnVjdG9yIiwiY29uc3RydWN0b3JHdWFyZCIsImVycm9ycyIsIlVOU1VQUE9SVEVEX09QRVJBVElPTiIsIm9wZXJhdGlvbiIsIm1hdGNoIiwicGFyc2VJbnQiLCJwYXJzZVBhcmFtcyIsImFsbG93SW5kZXgiLCJzcGxpdE5lc3RpbmciLCJGcmFnbWVudCIsImlzRnJhZ21lbnQiLCJGdW5jdGlvbkZyYWdtZW50IiwiRXZlbnRGcmFnbWVudCIsIkNvbnN0cnVjdG9yRnJhZ21lbnQiLCJFcnJvckZyYWdtZW50IiwidHJpbSIsInNwbGl0Iiwic3Vic3RyaW5nIiwiX2lzRnJhZ21lbnQiLCJhbm9ueW1vdXMiLCJpbnB1dHMiLCJpbnB1dCIsImlzRXZlbnRGcmFnbWVudCIsInZlcmlmeUlkZW50aWZpZXIiLCJyZWdleFBhcmVuIiwiZm9yRWFjaCIsIm1vZGlmaWVyIiwid2FybiIsInBhcnNlR2FzIiwiZ2FzIiwiY29tcHMiLCJwYXJzZU1vZGlmaWVycyIsImNvbnN0YW50IiwicGF5YWJsZSIsInN0YXRlTXV0YWJpbGl0eSIsImNvbnNvbGUiLCJsb2ciLCJ2ZXJpZnlTdGF0ZSIsInRvTnVtYmVyIiwiaXNDb25zdHJ1Y3RvckZyYWdtZW50IiwicGFyZW5zIiwib3V0cHV0cyIsIm91dHB1dCIsInRvU3RyaW5nIiwiaXNGdW5jdGlvbkZyYWdtZW50IiwicmV0dXJucyIsImNoZWNrRm9yYmlkZGVuIiwiZnJhZ21lbnQiLCJzaWciLCJpc0Vycm9yRnJhZ21lbnQiLCJyZWdleElkZW50aWZpZXIiLCJhY2N1bSIsImRlcHRoIiwib2Zmc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/fragments.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/interface.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/abi/lib.esm/interface.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorDescription: function() { return /* binding */ ErrorDescription; },\n/* harmony export */   Indexed: function() { return /* binding */ Indexed; },\n/* harmony export */   Interface: function() { return /* binding */ Interface; },\n/* harmony export */   LogDescription: function() { return /* binding */ LogDescription; },\n/* harmony export */   TransactionDescription: function() { return /* binding */ TransactionDescription; },\n/* harmony export */   checkResultErrors: function() { return /* reexport safe */ _coders_abstract_coder__WEBPACK_IMPORTED_MODULE_2__.checkResultErrors; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _abi_coder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abi-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js\");\n/* harmony import */ var _coders_abstract_coder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./coders/abstract-coder */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _fragments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fragments */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/fragments.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nclass LogDescription extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.Description {\n}\nclass TransactionDescription extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.Description {\n}\nclass ErrorDescription extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.Description {\n}\nclass Indexed extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\n            \"string\"\n        ],\n        reason: true\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\n            \"uint256\"\n        ]\n    }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/ class Interface {\n    format(format) {\n        if (!format) {\n            format = _fragments__WEBPACK_IMPORTED_MODULE_4__.FormatTypes.full;\n        }\n        if (format === _fragments__WEBPACK_IMPORTED_MODULE_4__.FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment)=>fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === _fragments__WEBPACK_IMPORTED_MODULE_4__.FormatTypes.json) {\n            return JSON.stringify(abi.map((j)=>JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return _abi_coder__WEBPACK_IMPORTED_MODULE_5__.defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getAddress)(address);\n    }\n    static getSighash(fragment) {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexDataSlice)((0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.id)(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.id)(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isHexString)(nameOrSignatureOrSighash)) {\n            for(const name in this.functions){\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f)=>f.split(\"(\" /* fix:) */ )[0] === name);\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[_fragments__WEBPACK_IMPORTED_MODULE_4__.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isHexString)(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for(const name in this.events){\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f)=>f.split(\"(\" /* fix:) */ )[0] === name);\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[_fragments__WEBPACK_IMPORTED_MODULE_4__.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isHexString)(nameOrSignatureOrSighash)) {\n            const getSighash = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(this.constructor, \"getSighash\");\n            for(const name in this.errors){\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f)=>f.split(\"(\" /* fix:) */ )[0] === name);\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[_fragments__WEBPACK_IMPORTED_MODULE_4__.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof fragment === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof fragment === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.arrayify)(data);\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof fragment === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.concat)([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.arrayify)(data);\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.concat)([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.arrayify)(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch(bytes.length % this._abiCoder._getWordSize()){\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) {}\n                break;\n            case 4:\n                {\n                    const selector = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(bytes.slice(0, 4));\n                    const builtin = BuiltinErrors[selector];\n                    if (builtin) {\n                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                        errorName = builtin.name;\n                        errorSignature = builtin.signature;\n                        if (builtin.reason) {\n                            reason = errorArgs[0];\n                        }\n                        if (errorName === \"Error\") {\n                            message = \"; VM Exception while processing transaction: reverted with reason string \".concat(JSON.stringify(errorArgs[0]));\n                        } else if (errorName === \"Panic\") {\n                            message = \"; VM Exception while processing transaction: reverted with panic code \".concat(errorArgs[0]);\n                        }\n                    } else {\n                        try {\n                            const error = this.getError(selector);\n                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                            errorName = error.name;\n                            errorSignature = error.format();\n                        } catch (error) {}\n                    }\n                    break;\n                }\n        }\n        return logger.throwError(\"call revert exception\" + message, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(data),\n            errorArgs,\n            errorName,\n            errorSignature,\n            reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof functionFragment === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value)=>{\n            if (param.type === \"string\") {\n                return (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.id)(value);\n            } else if (param.type === \"bytes\") {\n                return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_9__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(value));\n            }\n            if (param.type === \"bool\" && typeof value === \"boolean\") {\n                value = value ? \"0x01\" : \"0x00\";\n            }\n            if (param.type.match(/^u?int/)) {\n                value = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\n                    \"address\"\n                ], [\n                    value\n                ]);\n            }\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexZeroPad)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(value), 32);\n        };\n        values.forEach((value, index)=>{\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value)=>encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while(topics.length && topics[topics.length - 1] === null){\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index)=>{\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push((0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.id)(value));\n                } else if (param.type === \"bytes\") {\n                    topics.push((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_9__.keccak256)(value));\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([\n                        param.type\n                    ], [\n                        value\n                    ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof eventFragment === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"topics[0]\",\n                    expected: topicHash,\n                    value: topics[0]\n                });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index)=>{\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(_fragments__WEBPACK_IMPORTED_MODULE_4__.ParamType.fromObject({\n                        type: \"bytes32\",\n                        name: param.name\n                    }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.concat)(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index)=>{\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({\n                        _isIndexed: true,\n                        hash: null\n                    });\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({\n                        _isIndexed: true,\n                        hash: resultIndexed[indexedIndex++]\n                    });\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: ()=>{\n                            throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n                        }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for(let i = 0; i < result.length; i++){\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: ()=>{\n                        throw wrapAccessError(\"index \".concat(i), value);\n                    }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(tx.value || \"0\")\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify)(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */ static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n    constructor(fragments){\n        let abi = [];\n        if (typeof fragments === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"fragments\", abi.map((fragment)=>{\n            return _fragments__WEBPACK_IMPORTED_MODULE_4__.Fragment.from(fragment);\n        }).filter((fragment)=>fragment != null));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_abiCoder\", (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getAbiCoder\")());\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"functions\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"errors\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"events\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment)=>{\n            let bucket = null;\n            switch(fragment.type){\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"deploy\", _fragments__WEBPACK_IMPORTED_MODULE_4__.ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_isInterface\", true);\n    }\n} //# sourceMappingURL=interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/interface.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"abstract-provider/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlci9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLDBCQUEwQixDQUNqRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyL2xpYi5lc20vX3ZlcnNpb24uanM/N2M4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiYWJzdHJhY3QtcHJvdmlkZXIvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-provider/lib.esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockForkEvent: function() { return /* binding */ BlockForkEvent; },\n/* harmony export */   ForkEvent: function() { return /* binding */ ForkEvent; },\n/* harmony export */   Provider: function() { return /* binding */ Provider; },\n/* harmony export */   TransactionForkEvent: function() { return /* binding */ TransactionForkEvent; },\n/* harmony export */   TransactionOrderForkEvent: function() { return /* binding */ TransactionOrderForkEvent; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nclass ForkEvent extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nclass BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: expiry || 0,\n            blockHash: blockHash\n        });\n    }\n}\nclass TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: expiry || 0,\n            hash: hash\n        });\n    }\n}\nclass TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry){\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: expiry || 0,\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nclass Provider {\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { block, gasPrice } = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error)=>{\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                lastBaseFeePerGas = block.baseFeePerGas;\n                maxPriorityFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return {\n                lastBaseFeePerGas,\n                maxFeePerGas,\n                maxPriorityFeePerGas,\n                gasPrice\n            };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n    constructor(){\n        logger.checkAbstract(new.target, Provider);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"_isProvider\", true);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"abstract-signer/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSx3QkFBd0IsQ0FDL0Msb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9fdmVyc2lvbi5qcz8xODBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJhYnN0cmFjdC1zaWduZXIvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/abstract-signer/lib.esm/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Signer: function() { return /* binding */ Signer; },\n/* harmony export */   VoidSigner: function() { return /* binding */ VoidSigner; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nconst allowedTransactionKeys = [\n    \"accessList\",\n    \"ccipReadEnabled\",\n    \"chainId\",\n    \"customData\",\n    \"data\",\n    \"from\",\n    \"gasLimit\",\n    \"gasPrice\",\n    \"maxFeePerGas\",\n    \"maxPriorityFeePerGas\",\n    \"nonce\",\n    \"to\",\n    \"type\",\n    \"value\"\n];\nconst forwardErrors = [\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED\n];\n;\n;\nclass Signer {\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"call\");\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for(const key in transaction){\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.shallowCopy)(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result)=>{\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to)=>__awaiter(this, void 0, void 0, function*() {\n                        if (to == null) {\n                            return null;\n                        }\n                        const address = yield this.resolveName(to);\n                        if (address == null) {\n                            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                        }\n                        return address;\n                    }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error)=>{});\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            } else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            } else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        } else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    } else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    } else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                } else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error)=>{\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            } else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results)=>{\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.resolveProperties)(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: operation || \"_checkProvider\"\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor(){\n        logger.checkAbstract(new.target, Signer);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"_isSigner\", true);\n    }\n}\nclass VoidSigner extends Signer {\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(()=>{\n            logger.throwError(message, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: operation\n            });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n    constructor(address, provider){\n        super();\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"address\", address);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"provider\", provider || null);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWSxTQUFLLElBQUksU0FBSSxDQUFDQSxTQUFTLElBQUssU0FBVUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLENBQUMsRUFBRUMsU0FBUztJQUNuRixTQUFTQyxNQUFNQyxLQUFLO1FBQUksT0FBT0EsaUJBQWlCSCxJQUFJRyxRQUFRLElBQUlILEVBQUUsU0FBVUksT0FBTztZQUFJQSxRQUFRRDtRQUFRO0lBQUk7SUFDM0csT0FBTyxJQUFLSCxDQUFBQSxLQUFNQSxDQUFBQSxJQUFJSyxPQUFNLENBQUMsRUFBRyxTQUFVRCxPQUFPLEVBQUVFLE1BQU07UUFDckQsU0FBU0MsVUFBVUosS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFVBQVVRLElBQUksQ0FBQ047WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUMxRixTQUFTQyxTQUFTUixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsU0FBUyxDQUFDLFFBQVEsQ0FBQ0U7WUFBUyxFQUFFLE9BQU9PLEdBQUc7Z0JBQUVKLE9BQU9JO1lBQUk7UUFBRTtRQUM3RixTQUFTRixLQUFLSSxNQUFNO1lBQUlBLE9BQU9DLElBQUksR0FBR1QsUUFBUVEsT0FBT1QsS0FBSyxJQUFJRCxNQUFNVSxPQUFPVCxLQUFLLEVBQUVXLElBQUksQ0FBQ1AsV0FBV0k7UUFBVztRQUM3R0gsS0FBSyxDQUFDUCxZQUFZQSxVQUFVYyxLQUFLLENBQUNqQixTQUFTQyxjQUFjLEVBQUUsR0FBR1UsSUFBSTtJQUN0RTtBQUNKO0FBQzJGO0FBQzVDO0FBQ1Y7QUFDckMsTUFBTVksU0FBUyxJQUFJRix5REFBTUEsQ0FBQ0MsNkNBQU9BO0FBQ2pDLE1BQU1FLHlCQUF5QjtJQUMzQjtJQUFjO0lB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YnN0cmFjdC1zaWduZXIvbGliLmVzbS9pbmRleC5qcz81YjU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSwgcmVzb2x2ZVByb3BlcnRpZXMsIHNoYWxsb3dDb3B5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmNvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXMgPSBbXG4gICAgXCJhY2Nlc3NMaXN0XCIsIFwiY2NpcFJlYWRFbmFibGVkXCIsIFwiY2hhaW5JZFwiLCBcImN1c3RvbURhdGFcIiwgXCJkYXRhXCIsIFwiZnJvbVwiLCBcImdhc0xpbWl0XCIsIFwiZ2FzUHJpY2VcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcIm5vbmNlXCIsIFwidG9cIiwgXCJ0eXBlXCIsIFwidmFsdWVcIlxuXTtcbmNvbnN0IGZvcndhcmRFcnJvcnMgPSBbXG4gICAgTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMsXG4gICAgTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELFxuICAgIExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQsXG5dO1xuO1xuO1xuZXhwb3J0IGNsYXNzIFNpZ25lciB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIE1VU1QgY2FsbCBzdXBlclxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBsb2dnZXIuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LCBTaWduZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9pc1NpZ25lclwiLCB0cnVlKTtcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIE1BWSBvdmVycmlkZSB0aGVzZVxuICAgIGdldEJhbGFuY2UoYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRCYWxhbmNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0QmFsYW5jZSh0aGlzLmdldEFkZHJlc3MoKSwgYmxvY2tUYWcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0VHJhbnNhY3Rpb25Db3VudChibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcImdldFRyYW5zYWN0aW9uQ291bnRcIik7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KHRoaXMuZ2V0QWRkcmVzcygpLCBibG9ja1RhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgXCJmcm9tXCIgaWYgdW5zcGVjaWZpZWQsIGFuZCBlc3RpbWF0ZXMgdGhlIGdhcyBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gICAgZXN0aW1hdGVHYXModHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJlc3RpbWF0ZUdhc1wiKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5lc3RpbWF0ZUdhcyh0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgXCJmcm9tXCIgaWYgdW5zcGVjaWZpZWQsIGFuZCBjYWxscyB3aXRoIHRoZSB0cmFuc2FjdGlvblxuICAgIGNhbGwodHJhbnNhY3Rpb24sIGJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiY2FsbFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHR4LCBibG9ja1RhZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBQb3B1bGF0ZXMgYWxsIGZpZWxkcyBpbiBhIHRyYW5zYWN0aW9uLCBzaWducyBpdCBhbmQgc2VuZHMgaXQgdG8gdGhlIG5ldHdvcmtcbiAgICBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJzZW5kVHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHlpZWxkIHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICBjb25zdCBzaWduZWRUeCA9IHlpZWxkIHRoaXMuc2lnblRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLnByb3ZpZGVyLnNlbmRUcmFuc2FjdGlvbihzaWduZWRUeCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRDaGFpbklkKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcImdldENoYWluSWRcIik7XG4gICAgICAgICAgICBjb25zdCBuZXR3b3JrID0geWllbGQgdGhpcy5wcm92aWRlci5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICByZXR1cm4gbmV0d29yay5jaGFpbklkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0R2FzUHJpY2UoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0R2FzUHJpY2VcIik7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRHYXNQcmljZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0RmVlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRGZWVEYXRhXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0RmVlRGF0YSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzb2x2ZU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcInJlc29sdmVOYW1lXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIucmVzb2x2ZU5hbWUobmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDaGVja3MgYSB0cmFuc2FjdGlvbiBkb2VzIG5vdCBjb250YWluIGludmFsaWQga2V5cyBhbmQgaWZcbiAgICAvLyBubyBcImZyb21cIiBpcyBwcm92aWRlZCwgcG9wdWxhdGVzIGl0LlxuICAgIC8vIC0gZG9lcyBOT1QgcmVxdWlyZSBhIHByb3ZpZGVyXG4gICAgLy8gLSBhZGRzIFwiZnJvbVwiIGlzIG5vdCBwcmVzZW50XG4gICAgLy8gLSByZXR1cm5zIGEgQ09QWSAoc2FmZSB0byBtdXRhdGUgdGhlIHJlc3VsdClcbiAgICAvLyBCeSBkZWZhdWx0IGNhbGxlZCBmcm9tOiAob3ZlcnJpZGluZyB0aGVzZSBwcmV2ZW50cyBpdClcbiAgICAvLyAgIC0gY2FsbFxuICAgIC8vICAgLSBlc3RpbWF0ZUdhc1xuICAgIC8vICAgLSBwb3B1bGF0ZVRyYW5zYWN0aW9uIChhbmQgdGhlcmVmb3Igc2VuZFRyYW5zYWN0aW9uKVxuICAgIGNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChhbGxvd2VkVHJhbnNhY3Rpb25LZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0cmFuc2FjdGlvbiBrZXk6IFwiICsga2V5LCBcInRyYW5zYWN0aW9uXCIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eCA9IHNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKHR4LmZyb20gPT0gbnVsbCkge1xuICAgICAgICAgICAgdHguZnJvbSA9IHRoaXMuZ2V0QWRkcmVzcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGFueSBwcm92aWRlZCBhZGRyZXNzIG1hdGNoZXMgdGhpcyBzaWduZXJcbiAgICAgICAgICAgIHR4LmZyb20gPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHR4LmZyb20pLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0QWRkcmVzcygpXG4gICAgICAgICAgICBdKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0WzBdLnRvTG93ZXJDYXNlKCkgIT09IHJlc3VsdFsxXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRbMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuICAgIC8vIFBvcHVsYXRlcyBBTEwga2V5cyBmb3IgYSB0cmFuc2FjdGlvbiBhbmQgY2hlY2tzIHRoYXQgXCJmcm9tXCIgbWF0Y2hlc1xuICAgIC8vIHRoaXMgU2lnbmVyLiBTaG91bGQgYmUgdXNlZCBieSBzZW5kVHJhbnNhY3Rpb24gYnV0IE5PVCBieSBzaWduVHJhbnNhY3Rpb24uXG4gICAgLy8gQnkgZGVmYXVsdCBjYWxsZWQgZnJvbTogKG92ZXJyaWRpbmcgdGhlc2UgcHJldmVudHMgaXQpXG4gICAgLy8gICAtIHNlbmRUcmFuc2FjdGlvblxuICAgIC8vXG4gICAgLy8gTm90ZXM6XG4gICAgLy8gIC0gV2UgYWxsb3cgZ2FzUHJpY2UgZm9yIEVJUC0xNTU5IGFzIGxvbmcgYXMgaXQgbWF0Y2hlcyBtYXhGZWVQZXJHYXNcbiAgICBwb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpO1xuICAgICAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC50byA9IFByb21pc2UucmVzb2x2ZSh0eC50bykudGhlbigodG8pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB5aWVsZCB0aGlzLnJlc29sdmVOYW1lKHRvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByb3ZpZGVkIEVOUyBuYW1lIHJlc29sdmVzIHRvIG51bGxcIiwgXCJ0eC50b1wiLCB0byk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhpcyBlcnJvciBmcm9tIGNhdXNpbmcgYW4gVW5oYW5kbGVkUHJvbWlzZUV4Y2VwdGlvblxuICAgICAgICAgICAgICAgIHR4LnRvLmNhdGNoKChlcnJvcikgPT4geyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvIG5vdCBhbGxvdyBtaXhpbmcgcHJlLWVpcC0xNTU5IGFuZCBlaXAtMTU1OSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBjb25zdCBoYXNFaXAxNTU5ID0gKHR4Lm1heEZlZVBlckdhcyAhPSBudWxsIHx8IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9IG51bGwpO1xuICAgICAgICAgICAgaWYgKHR4Lmdhc1ByaWNlICE9IG51bGwgJiYgKHR4LnR5cGUgPT09IDIgfHwgaGFzRWlwMTU1OSkpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gZG8gbm90IHN1cHBvcnQgZ2FzUHJpY2VcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodHgudHlwZSA9PT0gMCB8fCB0eC50eXBlID09PSAxKSAmJiBoYXNFaXAxNTU5KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByZS1laXAtMTU1OSB0cmFuc2FjdGlvbiBkbyBub3Qgc3VwcG9ydCBtYXhGZWVQZXJHYXMvbWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKHR4LnR5cGUgPT09IDIgfHwgdHgudHlwZSA9PSBudWxsKSAmJiAodHgubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGdWxseS1mb3JtZWQgRUlQLTE1NTkgdHJhbnNhY3Rpb24gKHNraXAgZ2V0RmVlRGF0YSlcbiAgICAgICAgICAgICAgICB0eC50eXBlID0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR4LnR5cGUgPT09IDAgfHwgdHgudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0IExlZ2FjeSBvciBFSVAtMjkzMCB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRlIG1pc3NpbmcgZ2FzUHJpY2VcbiAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0eC5nYXNQcmljZSA9IHRoaXMuZ2V0R2FzUHJpY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGdldCBmZWUgZGF0YSB0byBkZXRlcm1pbmUgdGhpbmdzXG4gICAgICAgICAgICAgICAgY29uc3QgZmVlRGF0YSA9IHlpZWxkIHRoaXMuZ2V0RmVlRGF0YSgpO1xuICAgICAgICAgICAgICAgIGlmICh0eC50eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhdXRvLWRldGVjdCB0aGUgaW50ZW5kZWQgdHlwZSBvZiB0aGlzIHRyYW5zYWN0aW9uLi4uXG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyAhPSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5ldHdvcmsgc3VwcG9ydHMgRUlQLTE1NTkhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGdyYWRlIHRyYW5zYWN0aW9uIGZyb20gbnVsbCB0byBlaXAtMTU1OVxuICAgICAgICAgICAgICAgICAgICAgICAgdHgudHlwZSA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIGxlZ2FjeSBnYXNQcmljZSBwcm9wZXJ0eSBvbiBhbiBlaXAtMTU1OSBuZXR3b3JrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSBnYXNQcmljZSBhcyBib3RoIGZlZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSB0eC5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdHguZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBnYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRlIG1pc3NpbmcgZmVlIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhQcmlvcml0eUZlZVBlckdhcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmVlRGF0YS5nYXNQcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXR3b3JrIGRvZXNuJ3Qgc3VwcG9ydCBFSVAtMTU1OS4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLi4uYnV0IHRoZXkgYXJlIHRyeWluZyB0byB1c2UgRUlQLTE1NTkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VpcDE1NTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFSVAtMTU1OVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwicG9wdWxhdGVUcmFuc2FjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4Lmdhc1ByaWNlID0gZmVlRGF0YS5nYXNQcmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHVudHlwZWQgdHJhbnNhY3Rpb24gdG8gbGVnYWN5XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldEZlZURhdGEgaGFzIGZhaWxlZCB1cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZmFpbGVkIHRvIGdldCBjb25zaXN0ZW50IGZlZSBkYXRhXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNpZ25lci5nZXRGZWVEYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR4LnR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXRseSB1c2luZyBFSVAtMTU1OVxuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eC5ub25jZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHgubm9uY2UgPSB0aGlzLmdldFRyYW5zYWN0aW9uQ291bnQoXCJwZW5kaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4Lmdhc0xpbWl0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5nYXNMaW1pdCA9IHRoaXMuZXN0aW1hdGVHYXModHgpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yd2FyZEVycm9ycy5pbmRleE9mKGVycm9yLmNvZGUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIiwgTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHg6IHR4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR4LmNoYWluSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHR4LmNoYWluSWQgPSB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHR4LmNoYWluSWQgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh0eC5jaGFpbklkKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRDaGFpbklkKClcbiAgICAgICAgICAgICAgICBdKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzWzFdICE9PSAwICYmIHJlc3VsdHNbMF0gIT09IHJlc3VsdHNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJjaGFpbklkIGFkZHJlc3MgbWlzbWF0Y2hcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQgcmVzb2x2ZVByb3BlcnRpZXModHgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFN1Yi1jbGFzc2VzIFNIT1VMRCBsZWF2ZSB0aGVzZSBhbG9uZVxuICAgIF9jaGVja1Byb3ZpZGVyKG9wZXJhdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibWlzc2luZyBwcm92aWRlclwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogKG9wZXJhdGlvbiB8fCBcIl9jaGVja1Byb3ZpZGVyXCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaXNTaWduZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9pc1NpZ25lcik7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFZvaWRTaWduZXIgZXh0ZW5kcyBTaWduZXIge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIHByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBwcm92aWRlciB8fCBudWxsKTtcbiAgICB9XG4gICAgZ2V0QWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmFkZHJlc3MpO1xuICAgIH1cbiAgICBfZmFpbChtZXNzYWdlLCBvcGVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uOiBvcGVyYXRpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mYWlsKFwiVm9pZFNpZ25lciBjYW5ub3Qgc2lnbiBtZXNzYWdlc1wiLCBcInNpZ25NZXNzYWdlXCIpO1xuICAgIH1cbiAgICBzaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHRyYW5zYWN0aW9uc1wiLCBcInNpZ25UcmFuc2FjdGlvblwiKTtcbiAgICB9XG4gICAgX3NpZ25UeXBlZERhdGEoZG9tYWluLCB0eXBlcywgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIHR5cGVkIGRhdGFcIiwgXCJzaWduVHlwZWREYXRhXCIpO1xuICAgIH1cbiAgICBjb25uZWN0KHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVm9pZFNpZ25lcih0aGlzLmFkZHJlc3MsIHByb3ZpZGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiZGVmaW5lUmVhZE9ubHkiLCJyZXNvbHZlUHJvcGVydGllcyIsInNoYWxsb3dDb3B5IiwiTG9nZ2VyIiwidmVyc2lvbiIsImxvZ2dlciIsImFsbG93ZWRUcmFuc2FjdGlvbktleXMiLCJmb3J3YXJkRXJyb3JzIiwiZXJyb3JzIiwiSU5TVUZGSUNJRU5UX0ZVTkRTIiwiTk9OQ0VfRVhQSVJFRCIsIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEIiwiU2lnbmVyIiwiZ2V0QmFsYW5jZSIsImJsb2NrVGFnIiwiX2NoZWNrUHJvdmlkZXIiLCJwcm92aWRlciIsImdldEFkZHJlc3MiLCJnZXRUcmFuc2FjdGlvbkNvdW50IiwiZXN0aW1hdGVHYXMiLCJ0cmFuc2FjdGlvbiIsInR4IiwiY2hlY2tUcmFuc2FjdGlvbiIsImNhbGwiLCJzZW5kVHJhbnNhY3Rpb24iLCJwb3B1bGF0ZVRyYW5zYWN0aW9uIiwic2lnbmVkVHgiLCJzaWduVHJhbnNhY3Rpb24iLCJnZXRDaGFpbklkIiwibmV0d29yayIsImdldE5ldHdvcmsiLCJjaGFpbklkIiwiZ2V0R2FzUHJpY2UiLCJnZXRGZWVEYXRhIiwicmVzb2x2ZU5hbWUiLCJuYW1lIiwia2V5IiwiaW5kZXhPZiIsInRocm93QXJndW1lbnRFcnJvciIsImZyb20iLCJhbGwiLCJ0b0xvd2VyQ2FzZSIsInRvIiwiYWRkcmVzcyIsImNhdGNoIiwiZXJyb3IiLCJoYXNFaXAxNTU5IiwibWF4RmVlUGVyR2FzIiwibWF4UHJpb3JpdHlGZWVQZXJHYXMiLCJnYXNQcmljZSIsInR5cGUiLCJmZWVEYXRhIiwidGhyb3dFcnJvciIsIlVOU1VQUE9SVEVEX09QRVJBVElPTiIsIm9wZXJhdGlvbiIsIm5vbmNlIiwiZ2FzTGltaXQiLCJjb2RlIiwiVU5QUkVESUNUQUJMRV9HQVNfTElNSVQiLCJyZXN1bHRzIiwiaXNTaWduZXIiLCJfaXNTaWduZXIiLCJjb25zdHJ1Y3RvciIsImNoZWNrQWJzdHJhY3QiLCJWb2lkU2lnbmVyIiwiX2ZhaWwiLCJtZXNzYWdlIiwic2lnbk1lc3NhZ2UiLCJfc2lnblR5cGVkRGF0YSIsImRvbWFpbiIsInR5cGVzIiwiY29ubmVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/address/lib.esm/_version.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"address/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hZGRyZXNzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsZ0JBQWdCLENBQ3ZDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWRkcmVzcy9saWIuZXNtL192ZXJzaW9uLmpzPzA2ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFkZHJlc3MvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/address/lib.esm/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddress: function() { return /* binding */ getAddress; },\n/* harmony export */   getContractAddress: function() { return /* binding */ getContractAddress; },\n/* harmony export */   getCreate2Address: function() { return /* binding */ getCreate2Address; },\n/* harmony export */   getIcapAddress: function() { return /* binding */ getIcapAddress; },\n/* harmony export */   isAddress: function() { return /* binding */ isAddress; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/rlp */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/_version.js\");\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction getChecksumAddress(address) {\n    if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for(let i = 0; i < 40; i++){\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)(expanded));\n    for(let i = 0; i < 40; i += 2){\n        if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor(let i = 0; i < 10; i++){\n    ibanLookup[String(i)] = String(i);\n}\nfor(let i = 0; i < 26; i++){\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c)=>{\n        return ibanLookup[c];\n    }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while(expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - parseInt(expanded, 10) % 97);\n    while(checksum.length < 2){\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nfunction getAddress(address) {\n    let result = null;\n    if (typeof address !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n    // Maybe ICAP? (we only support direct mode)\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__._base36To16)(address.substring(4));\n        while(result.length < 40){\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nfunction isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    } catch (error) {}\n    return false;\n}\nfunction getIcapAddress(address) {\n    let base36 = (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__._base16To36)(getAddress(address).substring(2)).toUpperCase();\n    while(base36.length < 30){\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nfunction getContractAddress(transaction) {\n    let from = null;\n    try {\n        from = getAddress(transaction.from);\n    } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_ethersproject_rlp__WEBPACK_IMPORTED_MODULE_5__.encode)([\n        from,\n        nonce\n    ])), 12));\n}\nfunction getCreate2Address(from, salt, initCodeHash) {\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataLength)(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataLength)(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        \"0xff\",\n        getAddress(from),\n        salt,\n        initCodeHash\n    ])), 12));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/base64/lib.esm/base64.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\n\nfunction decode(textData) {\n    textData = atob(textData);\n    const data = [];\n    for(let i = 0; i < textData.length; i++){\n        data.push(textData.charCodeAt(i));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(data);\n}\nfunction encode(data) {\n    data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(data);\n    let textData = \"\";\n    for(let i = 0; i < data.length; i++){\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvbGliLmVzbS9iYXNlNjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDbUM7QUFDekMsU0FBU0MsT0FBT0MsUUFBUTtJQUMzQkEsV0FBV0MsS0FBS0Q7SUFDaEIsTUFBTUUsT0FBTyxFQUFFO0lBQ2YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFNBQVNJLE1BQU0sRUFBRUQsSUFBSztRQUN0Q0QsS0FBS0csSUFBSSxDQUFDTCxTQUFTTSxVQUFVLENBQUNIO0lBQ2xDO0lBQ0EsT0FBT0wsOERBQVFBLENBQUNJO0FBQ3BCO0FBQ08sU0FBU0ssT0FBT0wsSUFBSTtJQUN2QkEsT0FBT0osOERBQVFBLENBQUNJO0lBQ2hCLElBQUlGLFdBQVc7SUFDZixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUQsS0FBS0UsTUFBTSxFQUFFRCxJQUFLO1FBQ2xDSCxZQUFZUSxPQUFPQyxZQUFZLENBQUNQLElBQUksQ0FBQ0MsRUFBRTtJQUMzQztJQUNBLE9BQU9PLEtBQUtWO0FBQ2hCLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvbGliLmVzbS9iYXNlNjQuanM/MTM0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKHRleHREYXRhKSB7XG4gICAgdGV4dERhdGEgPSBhdG9iKHRleHREYXRhKTtcbiAgICBjb25zdCBkYXRhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBkYXRhLnB1c2godGV4dERhdGEuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheWlmeShkYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgIGRhdGEgPSBhcnJheWlmeShkYXRhKTtcbiAgICBsZXQgdGV4dERhdGEgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0ZXh0RGF0YSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gYnRvYSh0ZXh0RGF0YSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbImFycmF5aWZ5IiwiZGVjb2RlIiwidGV4dERhdGEiLCJhdG9iIiwiZGF0YSIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2hhckNvZGVBdCIsImVuY29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImJ0b2EiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/base64/lib.esm/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* reexport safe */ _base64__WEBPACK_IMPORTED_MODULE_0__.decode; },\n/* harmony export */   encode: function() { return /* reexport safe */ _base64__WEBPACK_IMPORTED_MODULE_0__.encode; }\n/* harmony export */ });\n/* harmony import */ var _base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTtBQUM2QixDQUMxQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Jhc2U2NC9saWIuZXNtL2luZGV4LmpzP2NjZWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgeyBkZWNvZGUsIGVuY29kZSB9IGZyb20gXCIuL2Jhc2U2NFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImRlY29kZSIsImVuY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethersproject/basex/lib.esm/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base32: function() { return /* binding */ Base32; },\n/* harmony export */   Base58: function() { return /* binding */ Base58; },\n/* harmony export */   BaseX: function() { return /* binding */ BaseX; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */ \n\nclass BaseX {\n    encode(value) {\n        let source = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(value);\n        if (source.length === 0) {\n            return \"\";\n        }\n        let digits = [\n            0\n        ];\n        for(let i = 0; i < source.length; ++i){\n            let carry = source[i];\n            for(let j = 0; j < digits.length; ++j){\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = carry / this.base | 0;\n            }\n            while(carry > 0){\n                digits.push(carry % this.base);\n                carry = carry / this.base | 0;\n            }\n        }\n        let string = \"\";\n        // deal with leading zeros\n        for(let k = 0; source[k] === 0 && k < source.length - 1; ++k){\n            string += this._leader;\n        }\n        // convert digits to a string\n        for(let q = digits.length - 1; q >= 0; --q){\n            string += this.alphabet[digits[q]];\n        }\n        return string;\n    }\n    decode(value) {\n        if (typeof value !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        let bytes = [];\n        if (value.length === 0) {\n            return new Uint8Array(bytes);\n        }\n        bytes.push(0);\n        for(let i = 0; i < value.length; i++){\n            let byte = this._alphabetMap[value[i]];\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n            let carry = byte;\n            for(let j = 0; j < bytes.length; ++j){\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n            while(carry > 0){\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for(let k = 0; value[k] === this._leader && k < value.length - 1; ++k){\n            bytes.push(0);\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(new Uint8Array(bytes.reverse()));\n    }\n    constructor(alphabet){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"alphabet\", alphabet);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"base\", alphabet.length);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"_alphabetMap\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.defineReadOnly)(this, \"_leader\", alphabet.charAt(0));\n        // pre-compute lookup table\n        for(let i = 0; i < alphabet.length; i++){\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n //console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/_version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/bignumber/lib.esm/_version.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"bignumber/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iaWdudW1iZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxrQkFBa0IsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iaWdudW1iZXIvbGliLmVzbS9fdmVyc2lvbi5qcz9mNTdlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJiaWdudW1iZXIvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BigNumber: function() { return /* binding */ BigNumber; },\n/* harmony export */   _base16To36: function() { return /* binding */ _base16To36; },\n/* harmony export */   _base36To16: function() { return /* binding */ _base36To16; },\n/* harmony export */   isBigNumberish: function() { return /* binding */ isBigNumberish; }\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/_version.js\");\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */ \nvar BN = (bn_js__WEBPACK_IMPORTED_MODULE_0___default().BN);\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nfunction isBigNumberish(value) {\n    return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(value) || typeof value === \"bigint\" || (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isBytes)(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nclass BigNumber {\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return this._hex[0] === \"-\";\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        } catch (e) {}\n        return logger.throwError(\"this platform does not support BigInt\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return {\n            type: \"BigNumber\",\n            hex: this.toHexString()\n        };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof value === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof anyValue === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isBytes)(anyValue)) {\n            return BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof hex === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof hex === \"string\") {\n                    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(hex) || hex[0] === \"-\" && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(hex.substring(1))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n    constructor(constructorGuard, hex){\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof value !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while(value.length > 4 && value.substring(0, 4) === \"0x00\"){\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return new BN(\"-\" + hex.substring(3), 16);\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = {\n        fault: fault,\n        operation: operation\n    };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nfunction _base36To16(value) {\n    return new BN(value, 36).toString(16);\n}\n// value should have no prefix\nfunction _base16To36(value) {\n    return new BN(value, 16).toString(36);\n} //# sourceMappingURL=bignumber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FixedFormat: function() { return /* binding */ FixedFormat; },\n/* harmony export */   FixedNumber: function() { return /* binding */ FixedNumber; },\n/* harmony export */   formatFixed: function() { return /* binding */ formatFixed; },\n/* harmony export */   parseFixed: function() { return /* binding */ parseFixed; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/_version.js\");\n/* harmony import */ var _bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst _constructorGuard = {};\nconst Zero = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(0);\nconst NegativeOne = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = {\n        fault: fault,\n        operation: operation\n    };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile(zeros.length < 256){\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof decimals !== \"number\") {\n        try {\n            decimals = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(decimals).toNumber();\n        } catch (e) {}\n    }\n    if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return \"1\" + zeros.substring(0, decimals);\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nfunction formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while(fraction.length < multiplier.length - 1){\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nfunction parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof value !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = value.substring(0, 1) === \"-\";\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while(fraction[fraction.length - 1] === \"0\"){\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while(fraction.length < multiplier.length - 1){\n        fraction += \"0\";\n    }\n    const wholeValue = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(whole);\n    const fractionValue = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(fraction);\n    let wei = wholeValue.mul(multiplier).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nclass FixedFormat {\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof value === \"number\") {\n            value = \"fixed128x\".concat(value);\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof value === \"string\") {\n            if (value === \"fixed\") {\n            // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = match[1] !== \"u\";\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key, type, defaultValue)=>{\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof value[key] !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n    constructor(constructorGuard, signed, width, decimals){\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n}\nclass FixedNumber {\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || decimals % 1) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return this._value === \"0.0\" || this._value === \"0\";\n    }\n    isNegative() {\n        return this._value[0] === \"-\";\n    }\n    toString() {\n        return this._value;\n    }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(hex, width / 8);\n    }\n    toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !(0,_bignumber__WEBPACK_IMPORTED_MODULE_2__.isBigNumberish)(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = _bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof value === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isBytes)(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n    constructor(constructorGuard, hex, value, format){\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\"); //# sourceMappingURL=fixednumber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/_version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/bytes/lib.esm/_version.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"bytes/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ieXRlcy9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLGNBQWMsQ0FDckMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ieXRlcy9saWIuZXNtL192ZXJzaW9uLmpzPzY5OTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImJ5dGVzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethersproject/bytes/lib.esm/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayify: function() { return /* binding */ arrayify; },\n/* harmony export */   concat: function() { return /* binding */ concat; },\n/* harmony export */   hexConcat: function() { return /* binding */ hexConcat; },\n/* harmony export */   hexDataLength: function() { return /* binding */ hexDataLength; },\n/* harmony export */   hexDataSlice: function() { return /* binding */ hexDataSlice; },\n/* harmony export */   hexStripZeros: function() { return /* binding */ hexStripZeros; },\n/* harmony export */   hexValue: function() { return /* binding */ hexValue; },\n/* harmony export */   hexZeroPad: function() { return /* binding */ hexZeroPad; },\n/* harmony export */   hexlify: function() { return /* binding */ hexlify; },\n/* harmony export */   isBytes: function() { return /* binding */ isBytes; },\n/* harmony export */   isBytesLike: function() { return /* binding */ isBytesLike; },\n/* harmony export */   isHexString: function() { return /* binding */ isHexString; },\n/* harmony export */   joinSignature: function() { return /* binding */ joinSignature; },\n/* harmony export */   splitSignature: function() { return /* binding */ splitSignature; },\n/* harmony export */   stripZeros: function() { return /* binding */ stripZeros; },\n/* harmony export */   zeroPad: function() { return /* binding */ zeroPad; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/_version.js\");\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!value.toHexString;\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nfunction isBytesLike(value) {\n    return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\nfunction isInteger(value) {\n    return typeof value === \"number\" && value == value && value % 1 === 0;\n}\nfunction isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof value === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for(let i = 0; i < value.length; i++){\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof value === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while(value){\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for(let i = 0; i < hex.length; i += 2){\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction concat(items) {\n    const objects = items.map((item)=>arrayify(item));\n    const length = objects.reduce((accum, item)=>accum + item.length, 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object)=>{\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nfunction stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while(start < result.length && result[start] === 0){\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nfunction zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nfunction isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nfunction hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof value === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while(value){\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof value === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return \"0x0\" + value;\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for(let i = 0; i < value.length; i++){\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/ function hexDataLength(data) {\n    if (typeof data !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || data.length % 2) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nfunction hexDataSlice(data, offset, endOffset) {\n    if (typeof data !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || data.length % 2) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nfunction hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item)=>{\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nfunction hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, {\n        hexPad: \"left\"\n    }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nfunction hexStripZeros(value) {\n    if (typeof value !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while(offset < value.length && value[offset] === \"0\"){\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nfunction hexZeroPad(value, length) {\n    if (typeof value !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while(value.length < 2 * length + 2){\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nfunction splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - result.v % 2;\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = vs[0] >= 128 ? 1 : 0;\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - result.v % 2;\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        signature.recoveryParam ? \"0x1c\" : \"0x1b\"\n    ]));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/addresses.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressZero: function() { return /* binding */ AddressZero; }\n/* harmony export */ });\nconst AddressZero = \"0x0000000000000000000000000000000000000000\"; //# sourceMappingURL=addresses.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9hZGRyZXNzZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGNBQWMsNkNBQTZDLENBQ3hFLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vYWRkcmVzc2VzLmpzP2MzMmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEFkZHJlc3NaZXJvID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3Nlcy5qcy5tYXAiXSwibmFtZXMiOlsiQWRkcmVzc1plcm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MaxInt256: function() { return /* binding */ MaxInt256; },\n/* harmony export */   MaxUint256: function() { return /* binding */ MaxUint256; },\n/* harmony export */   MinInt256: function() { return /* binding */ MinInt256; },\n/* harmony export */   NegativeOne: function() { return /* binding */ NegativeOne; },\n/* harmony export */   One: function() { return /* binding */ One; },\n/* harmony export */   Two: function() { return /* binding */ Two; },\n/* harmony export */   WeiPerEther: function() { return /* binding */ WeiPerEther; },\n/* harmony export */   Zero: function() { return /* binding */ Zero; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n\nconst NegativeOne = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(-1);\nconst Zero = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(0);\nconst One = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(1);\nconst Two = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(2);\nconst WeiPerEther = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"1000000000000000000\");\nconst MaxUint256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst MinInt256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"-0x8000000000000000000000000000000000000000000000000000000000000000\");\nconst MaxInt256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__.BigNumber.from(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n //# sourceMappingURL=bignumbers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9iaWdudW1iZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNyRCxNQUFNQyxjQUFnQixXQUFXLEdBQUVELCtEQUFTQSxDQUFDRSxJQUFJLENBQUMsQ0FBQztBQUNuRCxNQUFNQyxPQUFTLFdBQVcsR0FBRUgsK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMzQyxNQUFNRSxNQUFRLFdBQVcsR0FBRUosK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMxQyxNQUFNRyxNQUFRLFdBQVcsR0FBRUwsK0RBQVNBLENBQUNFLElBQUksQ0FBQztBQUMxQyxNQUFNSSxjQUFnQixXQUFXLEdBQUVOLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDbEQsTUFBTUssYUFBZSxXQUFXLEdBQUVQLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDakQsTUFBTU0sWUFBYyxXQUFXLEdBQUVSLCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDaEQsTUFBTU8sWUFBYyxXQUFXLEdBQUVULCtEQUFTQSxDQUFDRSxJQUFJLENBQUM7QUFDdUMsQ0FDdkYsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9iaWdudW1iZXJzLmpzPzAxZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuY29uc3QgTmVnYXRpdmVPbmUgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbSgtMSkpO1xuY29uc3QgWmVybyA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDApKTtcbmNvbnN0IE9uZSA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDEpKTtcbmNvbnN0IFR3byA9ICggLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDIpKTtcbmNvbnN0IFdlaVBlckV0aGVyID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oXCIxMDAwMDAwMDAwMDAwMDAwMDAwXCIpKTtcbmNvbnN0IE1heFVpbnQyNTYgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKSk7XG5jb25zdCBNaW5JbnQyNTYgPSAoIC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIi0weDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIikpO1xuY29uc3QgTWF4SW50MjU2ID0gKCAvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oXCIweDdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIikpO1xuZXhwb3J0IHsgTmVnYXRpdmVPbmUsIFplcm8sIE9uZSwgVHdvLCBXZWlQZXJFdGhlciwgTWF4VWludDI1NiwgTWluSW50MjU2LCBNYXhJbnQyNTYsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdudW1iZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJCaWdOdW1iZXIiLCJOZWdhdGl2ZU9uZSIsImZyb20iLCJaZXJvIiwiT25lIiwiVHdvIiwiV2VpUGVyRXRoZXIiLCJNYXhVaW50MjU2IiwiTWluSW50MjU2IiwiTWF4SW50MjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/hashes.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashZero: function() { return /* binding */ HashZero; }\n/* harmony export */ });\nconst HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\"; //# sourceMappingURL=hashes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9oYXNoZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFdBQVcscUVBQXFFLENBQzdGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vaGFzaGVzLmpzPzYzZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEhhc2haZXJvID0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2hlcy5qcy5tYXAiXSwibmFtZXMiOlsiSGFzaFplcm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressZero: function() { return /* reexport safe */ _addresses__WEBPACK_IMPORTED_MODULE_0__.AddressZero; },\n/* harmony export */   EtherSymbol: function() { return /* reexport safe */ _strings__WEBPACK_IMPORTED_MODULE_3__.EtherSymbol; },\n/* harmony export */   HashZero: function() { return /* reexport safe */ _hashes__WEBPACK_IMPORTED_MODULE_2__.HashZero; },\n/* harmony export */   MaxInt256: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.MaxInt256; },\n/* harmony export */   MaxUint256: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.MaxUint256; },\n/* harmony export */   MinInt256: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.MinInt256; },\n/* harmony export */   NegativeOne: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.NegativeOne; },\n/* harmony export */   One: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.One; },\n/* harmony export */   Two: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.Two; },\n/* harmony export */   WeiPerEther: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.WeiPerEther; },\n/* harmony export */   Zero: function() { return /* reexport safe */ _bignumbers__WEBPACK_IMPORTED_MODULE_1__.Zero; }\n/* harmony export */ });\n/* harmony import */ var _addresses__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addresses */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var _bignumbers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bignumbers */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var _hashes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hashes */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\");\n/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strings */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/strings.js\");\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUM2QjtBQUNnRTtBQUN0RTtBQUNJLENBQ3hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vaW5kZXguanM/OWI5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCB7IEFkZHJlc3NaZXJvIH0gZnJvbSBcIi4vYWRkcmVzc2VzXCI7XG5leHBvcnQgeyBOZWdhdGl2ZU9uZSwgWmVybywgT25lLCBUd28sIFdlaVBlckV0aGVyLCBNYXhVaW50MjU2LCBNaW5JbnQyNTYsIE1heEludDI1NiB9IGZyb20gXCIuL2JpZ251bWJlcnNcIjtcbmV4cG9ydCB7IEhhc2haZXJvIH0gZnJvbSBcIi4vaGFzaGVzXCI7XG5leHBvcnQgeyBFdGhlclN5bWJvbCB9IGZyb20gXCIuL3N0cmluZ3NcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJBZGRyZXNzWmVybyIsIk5lZ2F0aXZlT25lIiwiWmVybyIsIk9uZSIsIlR3byIsIldlaVBlckV0aGVyIiwiTWF4VWludDI1NiIsIk1pbkludDI1NiIsIk1heEludDI1NiIsIkhhc2haZXJvIiwiRXRoZXJTeW1ib2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/constants/lib.esm/strings.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherSymbol: function() { return /* binding */ EtherSymbol; }\n/* harmony export */ });\n// NFKC (composed)             // (decomposed)\nconst EtherSymbol = \"Ξ\"; // \"\\uD835\\uDF63\";\n //# sourceMappingURL=strings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvbGliLmVzbS9zdHJpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4Q0FBOEM7QUFDdkMsTUFBTUEsY0FBYyxJQUFTLENBQUMsa0JBQWtCO0NBQ3ZELG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL2xpYi5lc20vc3RyaW5ncy5qcz81MzcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5GS0MgKGNvbXBvc2VkKSAgICAgICAgICAgICAvLyAoZGVjb21wb3NlZClcbmV4cG9ydCBjb25zdCBFdGhlclN5bWJvbCA9IFwiXFx1MDM5ZVwiOyAvLyBcIlxcdUQ4MzVcXHVERjYzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdzLmpzLm1hcCJdLCJuYW1lcyI6WyJFdGhlclN5bWJvbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/strings.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/_version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/contracts/lib.esm/_version.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"contracts/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb250cmFjdHMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxrQkFBa0IsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb250cmFjdHMvbGliLmVzbS9fdmVyc2lvbi5qcz8yOGQyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJjb250cmFjdHMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/contracts/lib.esm/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: function() { return /* binding */ BaseContract; },\n/* harmony export */   Contract: function() { return /* binding */ Contract; },\n/* harmony export */   ContractFactory: function() { return /* binding */ ContractFactory; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/interface.js\");\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true,\n    data: true,\n    from: true,\n    gasLimit: true,\n    gasPrice: true,\n    nonce: true,\n    to: true,\n    value: true,\n    type: true,\n    accessList: true,\n    maxFeePerGas: true,\n    maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const name = yield nameOrPromise;\n        if (typeof name !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(name);\n        } catch (error) {}\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index)=>{\n                return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v)=>resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function*() {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n            overrides = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.resolveProperties)({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check)=>__awaiter(this, void 0, void 0, function*() {\n                        if ((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(check.signer) !== check.override) {\n                            logger.throwError(\"Contract with a Signer cannot override from\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"overrides.from\"\n                            });\n                        }\n                        return check.override;\n                    }));\n            } else {\n                overrides.from = contract.signer.getAddress();\n            }\n        } else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n        //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.resolveProperties)({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.resolveProperties)(overrides) || {}\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_5__.accessListify)(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(data);\n            for(let i = 0; i < bytes.length; i++){\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key)=>overrides[key] != null);\n        if (leftovers.length) {\n            logger.throwError(\"cannot override \".concat(leftovers.map((l)=>JSON.stringify(l)).join(\",\")), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = contract.signer || contract.provider;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations)=>{\n        return wait(confirmations).then((receipt)=>{\n            receipt.events = receipt.logs.map((log)=>{\n                let event = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.deepCopy)(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e) {}\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics)=>{\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = ()=>{\n                    return contract.provider;\n                };\n                event.getBlock = ()=>{\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = ()=>{\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = ()=>{\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = contract.signer || contract.provider;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return __awaiter(this, void 0, void 0, function*() {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n                const overrides = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            } catch (error) {\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return __awaiter(this, void 0, void 0, function*() {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic)=>{\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    addListener(listener, once) {\n        this._listeners.push({\n            listener: listener,\n            once: once\n        });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item)=>{\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i)=>i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item)=>{\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(()=>{\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !item.once;\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {}\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [\n            event\n        ];\n    }\n    constructor(tag, filter){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"tag\", tag);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"filter\", filter);\n        this._listeners = [];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor(){\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics)=>{\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = (0,_ethersproject_abi__WEBPACK_IMPORTED_MODULE_7__.checkResultErrors)(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n    constructor(address, contractInterface, fragment, topics){\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [\n                topic\n            ];\n        }\n        super(getEventTag(filter), filter);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"address\", address);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"interface\", contractInterface);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"fragment\", fragment);\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics)=>{\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        } catch (error) {\n        // No matching event\n        }\n    }\n    constructor(address, contractInterface){\n        super(\"*\", {\n            address: address\n        });\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"address\", address);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"interface\", contractInterface);\n    }\n}\nclass BaseContract {\n    static getContractAddress(transaction) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getContractAddress)(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (_ethersproject_abi__WEBPACK_IMPORTED_MODULE_8__.Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new _ethersproject_abi__WEBPACK_IMPORTED_MODULE_8__.Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(()=>{\n                    return this;\n                });\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code)=>{\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction(fallback)\"\n            });\n        }\n        const tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(overrides || {});\n        [\n            \"from\",\n            \"to\"\n        ].forEach(function(key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: key\n            });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(()=>{\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof signerOrProvider === \"string\") {\n            signerOrProvider = new _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_9__.VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return _ethersproject_abi__WEBPACK_IMPORTED_MODULE_8__.Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof eventName === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof topic !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) {}\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.deepCopy)(log);\n        event.removeListener = ()=>{\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = ()=>{\n            return this.provider.getBlock(log.blockHash);\n        };\n        event.getTransaction = ()=>{\n            return this.provider.getTransaction(log.transactionHash);\n        };\n        event.getTransactionReceipt = ()=>{\n            return this.provider.getTransactionReceipt(log.transactionHash);\n        };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"once\"\n            });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log)=>{\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(runningEvent.filter);\n        if (typeof fromBlockOrBlockhash === \"string\" && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.isHexString)(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        } else {\n            filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n            filter.toBlock = toBlock != null ? toBlock : \"latest\";\n        }\n        return this.provider.getLogs(filter).then((logs)=>{\n            return logs.map((log)=>this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = runningEvent.run(args) > 0;\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key)=>{\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for(let tag in this._runningEvents){\n                this._runningEvents[tag].listeners().forEach((listener)=>{\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for(const tag in this._runningEvents){\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    constructor(addressOrName, contractInterface, signerOrProvider){\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"interface\", (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"provider\", null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"signer\", null);\n        } else if (_ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_9__.Signer.isSigner(signerOrProvider)) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"provider\", signerOrProvider.provider || null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"signer\", signerOrProvider);\n        } else if (_ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_10__.Provider.isProvider(signerOrProvider)) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"provider\", signerOrProvider);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"callStatic\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"estimateGas\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"functions\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"populateTransaction\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature)=>{\n                var _this = this;\n                const event = this.interface.events[eventSignature];\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.filters, eventSignature, function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    return {\n                        address: _this.address,\n                        topics: _this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name)=>{\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(\"Duplicate definition of \".concat(name, \" (\").concat(filters.join(\", \"), \")\"));\n                }\n            });\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_runningEvents\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"address\", addressOrName);\n        if (this.provider) {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"resolvedAddress\", Promise.resolve((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e)=>{});\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature)=>{\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(\"Duplicate ABI entry for \".concat(JSON.stringify(signature)));\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[\"%\".concat(name)]) {\n                    uniqueNames[\"%\".concat(name)] = [];\n                }\n                uniqueNames[\"%\".concat(name)].push(signature);\n            }\n            if (this[signature] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name)=>{\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, name, this[signature]);\n                }\n            } catch (e) {}\n            if (this.functions[name] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n}\nclass Contract extends BaseContract {\n}\nclass ContractFactory {\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n            tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(args.pop());\n            for(const key in tx){\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\n            \"data\",\n            \"from\",\n            \"to\"\n        ].forEach((key)=>{\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: key\n            });\n        });\n        if (tx.value) {\n            const value = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.concat)([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return __awaiter(this, void 0, void 0, function*() {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(this.constructor, \"getContractAddress\")(tx);\n            const contract = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return this.constructor.getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new this.constructor(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.MISSING_ARGUMENT, {\n                argument: \"compilerOutput\"\n            });\n        }\n        if (typeof compilerOutput === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getContractAddress)(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n    constructor(contractInterface, bytecode, signer){\n        let bytecodeHex = null;\n        if (typeof bytecode === \"string\") {\n            bytecodeHex = bytecode;\n        } else if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.isBytes)(bytecode)) {\n            bytecodeHex = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(bytecode);\n        } else if (bytecode && typeof bytecode.object === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.isHexString)(bytecodeHex) || bytecodeHex.length % 2) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !_ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_9__.Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"bytecode\", bytecodeHex);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"interface\", (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getInterface\")(contractInterface));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"signer\", signer || null);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/_version.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"hash/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsYUFBYSxDQUNwQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvbGliLmVzbS9fdmVyc2lvbi5qcz85NGE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJoYXNoLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode_arithmetic: function() { return /* binding */ decode_arithmetic; },\n/* harmony export */   read_compressed_payload: function() { return /* binding */ read_compressed_payload; },\n/* harmony export */   read_emoji_trie: function() { return /* binding */ read_emoji_trie; },\n/* harmony export */   read_mapped_map: function() { return /* binding */ read_mapped_map; },\n/* harmony export */   read_member_array: function() { return /* binding */ read_member_array; },\n/* harmony export */   read_payload: function() { return /* binding */ read_payload; },\n/* harmony export */   read_zero_terminated_array: function() { return /* binding */ read_zero_terminated_array; },\n/* harmony export */   signed: function() { return /* binding */ signed; }\n/* harmony export */ });\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function(arr, depth) {\n        forEach.call(arr, function(val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for(let i = 0; i < array.length; i++){\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nfunction decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() {\n        return bytes[pos++] << 8 | bytes[pos++];\n    }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [\n        0,\n        1\n    ]; // first symbol has frequency 1\n    for(let i = 1; i < symbol_count; i++){\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = read_buffer << 8 | bytes[pos++];\n            read_width = 8;\n        }\n        return read_buffer >> --read_width & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for(let i = 0; i < N; i++)register = register << 1 | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while(true){\n        let value = Math.floor(((register - low + 1) * total - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while(end - start > 1){\n            let mid = start + end >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            } else {\n                start = mid;\n            }\n        }\n        if (start == 0) break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while(((a ^ b) & HALF) == 0){\n            register = register << 1 & MASK | read_bit();\n            a = a << 1 & MASK;\n            b = b << 1 & MASK | 1;\n        }\n        while(a & ~b & QRTR){\n            register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n            a = a << 1 ^ HALF;\n            b = (b ^ HALF) << 1 | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map((x)=>{\n        switch(x - offset){\n            case 3:\n                return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 2:\n                return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n            case 1:\n                return offset + bytes[pos_payload++];\n            default:\n                return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nfunction read_payload(v) {\n    let pos = 0;\n    return ()=>v[pos++];\n}\nfunction read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nfunction signed(i) {\n    return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for(let i = 0; i < n; i++)v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = -1; i < n; i++)v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for(let i = 0, x = 0; i < n; i++)v[i] = x += signed(next());\n    return v;\n}\nfunction read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < vN[i]; j++){\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map((x)=>lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nfunction read_mapped_map(next) {\n    let ret = [];\n    while(true){\n        let w = next();\n        if (w == 0) break;\n        ret.push(read_linear_table(w, next));\n    }\n    while(true){\n        let w = next() - 1;\n        if (w < 0) break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nfunction read_zero_terminated_array(next) {\n    let v = [];\n    while(true){\n        let i = next();\n        if (i == 0) break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(()=>[]);\n    for(let i = 0; i < w; i++){\n        read_deltas(n, next).forEach((x, j)=>m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i)=>{\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j)=>{\n            let j_dy = j * dy;\n            return [\n                x + j * dx,\n                ys.map((y)=>y + j_dy)\n            ];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map((v)=>[\n            v[0],\n            v.slice(1)\n        ]);\n}\nfunction read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b)=>a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while(true){\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0) break;\n            branches.push({\n                set: new Set(keys),\n                node: read()\n            });\n        }\n        branches.sort((a, b)=>b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = temp / 3 | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return {\n            branches,\n            valid,\n            fe0f,\n            save,\n            check\n        };\n    }\n} //# sourceMappingURL=decoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getData: function() { return /* binding */ getData; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decoder.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\");\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ \n\nfunction getData() {\n    return (0,_decoder_js__WEBPACK_IMPORTED_MODULE_0__.read_compressed_payload)((0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_1__.decode)(\"\"));\n} //# sourceMappingURL=include.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ens_normalize: function() { return /* binding */ ens_normalize; },\n/* harmony export */   ens_normalize_post_check: function() { return /* binding */ ens_normalize_post_check; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _include_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./include.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\");\n/* harmony import */ var _decoder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decoder.js */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\");\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */ \n\nconst r = (0,_include_js__WEBPACK_IMPORTED_MODULE_0__.getData)();\n\n// @TODO: This should be lazily loaded\nconst VALID = new Set((0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_member_array)(r));\nconst IGNORED = new Set((0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_member_array)(r));\nconst MAPPED = (0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_mapped_map)(r);\nconst EMOJI_ROOT = (0,_decoder_js__WEBPACK_IMPORTED_MODULE_1__.read_emoji_trie)(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8CodePoints)(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter((cp)=>cp != 0xFE0F);\n}\nfunction ens_normalize_post_check(name) {\n    for (let label of name.split(\".\")){\n        let cps = explode_cp(label);\n        try {\n            for(let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--){\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(\"underscore only allowed at start\");\n                }\n            }\n            if (cps.length >= 4 && cps.every((cp)=>cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(\"invalid label extension\");\n            }\n        } catch (err) {\n            throw new Error('Invalid label \"'.concat(label, '\": ').concat(err.message));\n        }\n    }\n    return name;\n}\nfunction ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while(input.length){\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(\"Disallowed codepoint: 0x\".concat(cp.toString(16).toUpperCase()));\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize(\"NFC\");\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten) eaten.length = 0; // clear input buffer (if needed)\n    while(pos){\n        let cp = cps[--pos];\n        node = (_a = node.branches.find((x)=>x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node) break;\n        if (node.save) {\n            saved = cp;\n        } else if (node.check) {\n            if (cp === saved) break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n        }\n        if (node.valid) {\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n} //# sourceMappingURL=lib.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/id.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   id: function() { return /* binding */ id; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\nfunction id(text) {\n    return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_0__.keccak256)((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(text));\n} //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vaWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBQ0E7QUFDOUMsU0FBU0UsR0FBR0MsSUFBSTtJQUNuQixPQUFPSCxtRUFBU0EsQ0FBQ0MsbUVBQVdBLENBQUNFO0FBQ2pDLEVBQ0EsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vaWQuanM/NDY1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5leHBvcnQgZnVuY3Rpb24gaWQodGV4dCkge1xuICAgIHJldHVybiBrZWNjYWsyNTYodG9VdGY4Qnl0ZXModGV4dCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIl0sIm5hbWVzIjpbImtlY2NhazI1NiIsInRvVXRmOEJ5dGVzIiwiaWQiLCJ0ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/message.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/message.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hashMessage: function() { return /* binding */ hashMessage; },\n/* harmony export */   messagePrefix: function() { return /* binding */ messagePrefix; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\n\nconst messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nfunction hashMessage(message) {\n    if (typeof message === \"string\") {\n        message = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(message);\n    }\n    return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(messagePrefix),\n        (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(String(message.length)),\n        message\n    ]));\n} //# sourceMappingURL=message.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QztBQUNPO0FBQ0E7QUFDOUMsTUFBTUcsZ0JBQWdCLGlDQUFpQztBQUN2RCxTQUFTQyxZQUFZQyxPQUFPO0lBQy9CLElBQUksT0FBUUEsWUFBYSxVQUFVO1FBQy9CQSxVQUFVSCxtRUFBV0EsQ0FBQ0c7SUFDMUI7SUFDQSxPQUFPSixtRUFBU0EsQ0FBQ0QsNERBQU1BLENBQUM7UUFDcEJFLG1FQUFXQSxDQUFDQztRQUNaRCxtRUFBV0EsQ0FBQ0ksT0FBT0QsUUFBUUUsTUFBTTtRQUNqQ0Y7S0FDSDtBQUNMLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbWVzc2FnZS5qcz8wY2NiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmNhdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuZXhwb3J0IGNvbnN0IG1lc3NhZ2VQcmVmaXggPSBcIlxceDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuXCI7XG5leHBvcnQgZnVuY3Rpb24gaGFzaE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgKG1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSB0b1V0ZjhCeXRlcyhtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGtlY2NhazI1Nihjb25jYXQoW1xuICAgICAgICB0b1V0ZjhCeXRlcyhtZXNzYWdlUHJlZml4KSxcbiAgICAgICAgdG9VdGY4Qnl0ZXMoU3RyaW5nKG1lc3NhZ2UubGVuZ3RoKSksXG4gICAgICAgIG1lc3NhZ2VcbiAgICBdKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25jYXQiLCJrZWNjYWsyNTYiLCJ0b1V0ZjhCeXRlcyIsIm1lc3NhZ2VQcmVmaXgiLCJoYXNoTWVzc2FnZSIsIm1lc3NhZ2UiLCJTdHJpbmciLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/message.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/namehash.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsEncode: function() { return /* binding */ dnsEncode; },\n/* harmony export */   ensNormalize: function() { return /* binding */ ensNormalize; },\n/* harmony export */   isValidName: function() { return /* binding */ isValidName; },\n/* harmony export */   namehash: function() { return /* binding */ namehash; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\");\n/* harmony import */ var _ens_normalize_lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ens-normalize/lib */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\");\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    if (comp.length === 0) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8Bytes)((0,_ens_normalize_lib__WEBPACK_IMPORTED_MODULE_3__.ens_normalize)(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for(let i = 0; i < bytes.length; i++){\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\nfunction ensNormalize(name) {\n    return ensNameSplit(name).map((comp)=>(0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_2__.toUtf8String)(comp)).join(\".\");\n}\nfunction isValidName(name) {\n    try {\n        return ensNameSplit(name).length !== 0;\n    } catch (error) {}\n    return false;\n}\nfunction namehash(name) {\n    /* istanbul ignore if */ if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while(comps.length){\n        result = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            result,\n            (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_4__.keccak256)(comps.pop())\n        ]));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexlify)(result);\n}\nfunction dnsEncode(name) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.concat)(ensNameSplit(name).map((comp)=>{\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n} //# sourceMappingURL=namehash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbmFtZWhhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF1RDtBQUNZO0FBQ2Q7QUFDTjtBQUNWO0FBQ3JDLE1BQU1PLFNBQVMsSUFBSUYseURBQU1BLENBQUNDLDZDQUFPQTtBQUNtQjtBQUNwRCxNQUFNRyxRQUFRLElBQUlDLFdBQVc7QUFDN0JELE1BQU1FLElBQUksQ0FBQztBQUNYLFNBQVNDLGVBQWVDLElBQUk7SUFDeEIsSUFBSUEsS0FBS0MsTUFBTSxLQUFLLEdBQUc7UUFDbkIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLFNBQVNHLGFBQWFDLElBQUk7SUFDdEIsTUFBTUMsUUFBUWhCLG1FQUFXQSxDQUFDTSxpRUFBYUEsQ0FBQ1M7SUFDeEMsTUFBTUUsUUFBUSxFQUFFO0lBQ2hCLElBQUlGLEtBQUtILE1BQU0sS0FBSyxHQUFHO1FBQ25CLE9BQU9LO0lBQ1g7SUFDQSxJQUFJQyxPQUFPO0lBQ1gsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE1BQU1KLE1BQU0sRUFBRU8sSUFBSztRQUNuQyxNQUFNQyxJQUFJSixLQUFLLENBQUNHLEVBQUU7UUFDbEIsOENBQThDO1FBQzlDLElBQUlDLE1BQU0sTUFBTTtZQUNaSCxNQUFNSSxJQUFJLENBQUNYLGVBQWVNLE1BQU1NLEtBQUssQ0FBQ0osTUFBTUM7WUFDNUNELE9BQU9DLElBQUk7UUFDZjtJQUNKO0lBQ0EscURBQXFEO0lBQ3JELElBQUlELFFBQVFGLE1BQU1KLE1BQU0sRUFBRTtRQUN0QixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQUksTUFBTUksSUFBSSxDQUFDWCxlQUFlTSxNQUFNTSxLQUFLLENBQUNKO0lBQ3RDLE9BQU9EO0FBQ1g7QUFDTyxTQUFTTSxhQUFhUixJQUFJO0lBQzdCLE9BQU9ELGFBQWFDLE1BQU1TLEdBQUcsQ0FBQyxDQUFDYixPQUFTVixvRUFBWUEsQ0FBQ1UsT0FBT2MsSUFBSSxDQUFDO0FBQ3JFO0FBQ08sU0FBU0MsWUFBWVgsSUFBSTtJQUM1QixJQUFJO1FBQ0EsT0FBUUQsYUFBYUMsTUFBTUgsTUFBTSxLQUFLO0lBQzFDLEVBQ0EsT0FBT2UsT0FBTyxDQUFFO0lBQ2hCLE9BQU87QUFDWDtBQUNPLFNBQVNDLFNBQVNiLElBQUk7SUFDekIsc0JBQXNCLEdBQ3RCLElBQUksT0FBUUEsU0FBVSxVQUFVO1FBQzVCVixPQUFPd0Isa0JBQWtCLENBQUMsa0NBQWtDLFFBQVFkO0lBQ3hFO0lBQ0EsSUFBSWUsU0FBU3ZCO0lBQ2IsTUFBTVUsUUFBUUgsYUFBYUM7SUFDM0IsTUFBT0UsTUFBTUwsTUFBTSxDQUFFO1FBQ2pCa0IsU0FBUzVCLG1FQUFTQSxDQUFDSiw0REFBTUEsQ0FBQztZQUFDZ0M7WUFBUTVCLG1FQUFTQSxDQUFDZSxNQUFNYyxHQUFHO1NBQUk7SUFDOUQ7SUFDQSxPQUFPaEMsNkRBQU9BLENBQUMrQjtBQUNuQjtBQUNPLFNBQVNFLFVBQVVqQixJQUFJO0lBQzFCLE9BQU9oQiw2REFBT0EsQ0FBQ0QsNERBQU1BLENBQUNnQixhQUFhQyxNQUFNUyxHQUFHLENBQUMsQ0FBQ2I7UUFDMUMsd0RBQXdEO1FBQ3hELElBQUlBLEtBQUtDLE1BQU0sR0FBRyxJQUFJO1lBQ2xCLE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLE1BQU1HLFFBQVEsSUFBSVIsV0FBV0csS0FBS0MsTUFBTSxHQUFHO1FBQzNDSSxNQUFNaUIsR0FBRyxDQUFDdEIsTUFBTTtRQUNoQkssS0FBSyxDQUFDLEVBQUUsR0FBR0EsTUFBTUosTUFBTSxHQUFHO1FBQzFCLE9BQU9JO0lBQ1gsT0FBTztBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL2xpYi5lc20vbmFtZWhhc2guanM/Y2MxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXQsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuaW1wb3J0IHsgZW5zX25vcm1hbGl6ZSB9IGZyb20gXCIuL2Vucy1ub3JtYWxpemUvbGliXCI7XG5jb25zdCBaZXJvcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcblplcm9zLmZpbGwoMCk7XG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudChjb21wKSB7XG4gICAgaWYgKGNvbXAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXA7XG59XG5mdW5jdGlvbiBlbnNOYW1lU3BsaXQobmFtZSkge1xuICAgIGNvbnN0IGJ5dGVzID0gdG9VdGY4Qnl0ZXMoZW5zX25vcm1hbGl6ZShuYW1lKSk7XG4gICAgY29uc3QgY29tcHMgPSBbXTtcbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbXBzO1xuICAgIH1cbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkID0gYnl0ZXNbaV07XG4gICAgICAgIC8vIEEgc2VwYXJhdG9yIChpLmUuIFwiLlwiKTsgY29weSB0aGlzIGNvbXBvbmVudFxuICAgICAgICBpZiAoZCA9PT0gMHgyZSkge1xuICAgICAgICAgICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0LCBpKSkpO1xuICAgICAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlIHdhcyBhIHN0cmF5IHNlcGFyYXRvciBhdCB0aGUgZW5kIG9mIHRoZSBuYW1lXG4gICAgaWYgKGxhc3QgPj0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IGVtcHR5IGNvbXBvbmVudFwiKTtcbiAgICB9XG4gICAgY29tcHMucHVzaChjaGVja0NvbXBvbmVudChieXRlcy5zbGljZShsYXN0KSkpO1xuICAgIHJldHVybiBjb21wcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnNOb3JtYWxpemUobmFtZSkge1xuICAgIHJldHVybiBlbnNOYW1lU3BsaXQobmFtZSkubWFwKChjb21wKSA9PiB0b1V0ZjhTdHJpbmcoY29tcCkpLmpvaW4oXCIuXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROYW1lKG5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gKGVuc05hbWVTcGxpdChuYW1lKS5sZW5ndGggIT09IDApO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuYW1laGFzaChuYW1lKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHR5cGVvZiAobmFtZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRU5TIG5hbWU7IG5vdCBhIHN0cmluZ1wiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBaZXJvcztcbiAgICBjb25zdCBjb21wcyA9IGVuc05hbWVTcGxpdChuYW1lKTtcbiAgICB3aGlsZSAoY29tcHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGtlY2NhazI1Nihjb25jYXQoW3Jlc3VsdCwga2VjY2FrMjU2KGNvbXBzLnBvcCgpKV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGhleGxpZnkocmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkbnNFbmNvZGUobmFtZSkge1xuICAgIHJldHVybiBoZXhsaWZ5KGNvbmNhdChlbnNOYW1lU3BsaXQobmFtZSkubWFwKChjb21wKSA9PiB7XG4gICAgICAgIC8vIEROUyBkb2VzIG5vdCBhbGxvdyBjb21wb25lbnRzIG92ZXIgNjMgYnl0ZXMgaW4gbGVuZ3RoXG4gICAgICAgIGlmIChjb21wLmxlbmd0aCA+IDYzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIEROUyBlbmNvZGVkIGVudHJ5OyBsZW5ndGggZXhjZWVkcyA2MyBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGNvbXAubGVuZ3RoICsgMSk7XG4gICAgICAgIGJ5dGVzLnNldChjb21wLCAxKTtcbiAgICAgICAgYnl0ZXNbMF0gPSBieXRlcy5sZW5ndGggLSAxO1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfSkpKSArIFwiMDBcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hbWVoYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJjb25jYXQiLCJoZXhsaWZ5IiwidG9VdGY4Qnl0ZXMiLCJ0b1V0ZjhTdHJpbmciLCJrZWNjYWsyNTYiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZW5zX25vcm1hbGl6ZSIsIlplcm9zIiwiVWludDhBcnJheSIsImZpbGwiLCJjaGVja0NvbXBvbmVudCIsImNvbXAiLCJsZW5ndGgiLCJFcnJvciIsImVuc05hbWVTcGxpdCIsIm5hbWUiLCJieXRlcyIsImNvbXBzIiwibGFzdCIsImkiLCJkIiwicHVzaCIsInNsaWNlIiwiZW5zTm9ybWFsaXplIiwibWFwIiwiam9pbiIsImlzVmFsaWROYW1lIiwiZXJyb3IiLCJuYW1laGFzaCIsInRocm93QXJndW1lbnRFcnJvciIsInJlc3VsdCIsInBvcCIsImRuc0VuY29kZSIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/hash/lib.esm/typed-data.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypedDataEncoder: function() { return /* binding */ TypedDataEncoder; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/_version.js\");\n/* harmony import */ var _id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./id */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\");\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(-1);\nconst Zero = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(0);\nconst One = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(1);\nconst MaxUint256 = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n            bytes,\n            padding.slice(padOffset)\n        ]);\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n}\nconst hexTrue = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(One.toHexString(), 32);\nconst hexFalse = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\",\n    \"version\",\n    \"chainId\",\n    \"verifyingContract\",\n    \"salt\"\n];\nfunction checkString(key) {\n    return function(value) {\n        if (typeof value !== \"string\") {\n            logger.throwArgumentError(\"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value) {\n        try {\n            return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value).toString();\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value for \"chainId\"', \"domain.chainId\", value);\n    },\n    verifyingContract: function(value) {\n        try {\n            return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_4__.getAddress)(value).toLowerCase();\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value \"verifyingContract\"', \"domain.verifyingContract\", value);\n    },\n    salt: function(value) {\n        try {\n            const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        } catch (error) {}\n        return logger.throwArgumentError('invalid domain value \"salt\"', \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = match[1] === \"\";\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function(value) {\n                const v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(\"value out-of-bounds for \".concat(type), \"value\", value);\n                }\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function(value) {\n                const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(\"invalid length for \".concat(type), \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch(type){\n        case \"address\":\n            return function(value) {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_4__.getAddress)(value), 32);\n            };\n        case \"bool\":\n            return function(value) {\n                return !value ? hexFalse : hexTrue;\n            };\n        case \"bytes\":\n            return function(value) {\n                return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(value);\n            };\n        case \"string\":\n            return function(value) {\n                return (0,_id__WEBPACK_IMPORTED_MODULE_6__.id)(value);\n            };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return \"\".concat(name, \"(\").concat(fields.map((param)=>{\n        let { name, type } = param;\n        return type + \" \" + name;\n    }).join(\",\"), \")\");\n}\nclass TypedDataEncoder {\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value)=>{\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256);\n                }\n                return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = (0,_id__WEBPACK_IMPORTED_MODULE_6__.id)(this._types[type]);\n            return (value)=>{\n                const values = fields.map((param)=>{\n                    let { name, type } = param;\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(values);\n            };\n        }\n        return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(\"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v)=>this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, param)=>{\n                let { name, type } = param;\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for(const name in domain){\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(\"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n            }\n            domainFields.push({\n                name,\n                type\n            });\n        }\n        domainFields.sort((a, b)=>{\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n            EIP712Domain: domainFields\n        }, domain);\n    }\n    static encode(domain, types, value) {\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Make a copy to isolate it from the object passed in\n            domain = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.shallowCopy)(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value)=>{\n                if (type === \"address\" && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for(const name in ensCache){\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value)=>{\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return {\n                domain,\n                value\n            };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name)=>{\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({\n                name,\n                type: domainFieldTypes[name]\n            });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.shallowCopy)(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value)=>{\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(value).toString();\n                }\n                switch(type){\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof value !== \"string\") {\n                            logger.throwArgumentError(\"invalid string\", \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n    constructor(types){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"types\", Object.freeze((0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.deepCopy)(types)));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"_encoderCache\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type)=>{\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for(const name in types){\n            const uniqueNames = {};\n            types[name].forEach((field)=>{\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(\"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(\"unknown type \".concat(JSON.stringify(baseType)), \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n)=>parents[n].length === 0);\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(\"ambiguous primary types or unused types: \".concat(primaryTypes.map((t)=>JSON.stringify(t)).join(\", \")), \"types\", types);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(type)), \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child)=>{\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype)=>{\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for(const name in subtypes){\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t)=>encodeType(t, types[t])).join(\"\");\n        }\n    }\n} //# sourceMappingURL=typed-data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/_version.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/hdnode/lib.esm/_version.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"hdnode/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oZG5vZGUvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxlQUFlLENBQ3RDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGRub2RlL2xpYi5lc20vX3ZlcnNpb24uanM/M2Q5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiaGRub2RlLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/hdnode/lib.esm/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HDNode: function() { return /* binding */ HDNode; },\n/* harmony export */   defaultPath: function() { return /* binding */ defaultPath; },\n/* harmony export */   entropyToMnemonic: function() { return /* binding */ entropyToMnemonic; },\n/* harmony export */   getAccountPath: function() { return /* binding */ getAccountPath; },\n/* harmony export */   isValidMnemonic: function() { return /* binding */ isValidMnemonic; },\n/* harmony export */   mnemonicToEntropy: function() { return /* binding */ mnemonicToEntropy; },\n/* harmony export */   mnemonicToSeed: function() { return /* binding */ mnemonicToSeed; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_basex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/basex */ \"(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(app-pages-browser)/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/signing-key */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/wordlists */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nconst N = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return (1 << bits) - 1 << 8 - bits;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexZeroPad)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(value), 32);\n}\nfunction base58check(data) {\n    return _ethersproject_basex__WEBPACK_IMPORTED_MODULE_5__.Base58.encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        data,\n        (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexDataSlice)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)(data)), 0, 4)\n    ]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_7__.wordlists[\"en\"];\n    }\n    if (typeof wordlist === \"string\") {\n        const words = _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_7__.wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nconst _constructorGuard = {};\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n;\nclass HDNode {\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n        }\n        return base58check((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.concat)([\n            this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\",\n            (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(this.depth),\n            this.parentFingerprint,\n            (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexZeroPad)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(this.index), 4),\n            this.chainCode,\n            this.privateKey != null ? (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.concat)([\n                \"0x00\",\n                this.privateKey\n            ]) : this.publicKey\n        ]));\n    }\n    neuter() {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n    _derive(index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        const data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for(let i = 24; i >= 0; i -= 8){\n            data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n        }\n        const I = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.computeHmac)(_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // The private key\n        let ki = null;\n        // The public key\n        let Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__.SigningKey((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        let mnemonicOrPath = path;\n        const srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: srcMnemonic.locale || \"en\"\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n    derivePath(path) {\n        const components = path.split(\"/\");\n        if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        let result = this;\n        for(let i = 0; i < components.length; i++){\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    }\n    static _fromSeed(seed, mnemonic) {\n        const seedArray = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        const I = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.computeHmac)(_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n    static fromMnemonic(mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n    static fromSeed(seed) {\n        return HDNode._fromSeed(seed, null);\n    }\n    static fromExtendedKey(extendedKey) {\n        const bytes = _ethersproject_basex__WEBPACK_IMPORTED_MODULE_5__.Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        const depth = bytes[4];\n        const parentFingerprint = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes.slice(5, 9));\n        const index = parseInt((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(bytes.slice(0, 4))){\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */ constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath){\n        /* istanbul ignore if */ if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            const signingKey = new _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__.SigningKey(privateKey);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"privateKey\", signingKey.privateKey);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"privateKey\", null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"publicKey\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(publicKey));\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"parentFingerprint\", parentFingerprint);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"fingerprint\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexDataSlice)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.ripemd160)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)(this.publicKey)), 0, 4));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"address\", (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_11__.computeAddress)(this.publicKey));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"chainCode\", chainCode);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"index\", index);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"mnemonic\", null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"path\", null);\n        } else if (typeof mnemonicOrPath === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"mnemonic\", null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"path\", mnemonicOrPath);\n        } else {\n            // From a fully qualified source\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"mnemonic\", mnemonicOrPath);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_10__.defineReadOnly)(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n}\nfunction mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    const salt = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(\"mnemonic\" + password, _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.UnicodeNormalizationForm.NFKD);\n    return (0,_ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_12__.pbkdf2)((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(mnemonic, _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    const words = wordlist.split(mnemonic);\n    if (words.length % 3 !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    let offset = 0;\n    for(let i = 0; i < words.length; i++){\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for(let bit = 0; bit < 11; bit++){\n            if (index & 1 << 10 - bit) {\n                entropy[offset >> 3] |= 1 << 7 - offset % 8;\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)(entropy);\n    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    const indices = [\n        0\n    ];\n    let remainingBits = 11;\n    for(let i = 0; i < entropy.length; i++){\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_4__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n    return wordlist.join(indices.map((index)=>wordlist.getWord(index)));\n}\nfunction isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) {}\n    return false;\n}\nfunction getAccountPath(index) {\n    if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return \"m/44'/60'/\".concat(index, \"'/0/0\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/_version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/_version.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"json-wallets/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxxQkFBcUIsQ0FDNUMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9fdmVyc2lvbi5qcz9kNmJiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJqc29uLXdhbGxldHMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CrowdsaleAccount: function() { return /* binding */ CrowdsaleAccount; },\n/* harmony export */   decrypt: function() { return /* binding */ decrypt; }\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(app-pages-browser)/./node_modules/aes-js/index.js\");\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(app-pages-browser)/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/_version.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/utils.js\");\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\n\nclass CrowdsaleAccount extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.Description {\n    isCrowdsaleAccount(value) {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n// See: https://github.com/ethereum/pyethsaletool\nfunction decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getPassword)(password);\n    // Ethereum Address\n    const ethaddr = (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_5__.getAddress)((0,_utils__WEBPACK_IMPORTED_MODULE_4__.searchPath)(data, \"ethaddr\"));\n    // Encrypted Seed\n    const encseed = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_4__.searchPath)(data, \"encseed\"));\n    if (!encseed || encseed.length % 16 !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_7__.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().ModeOfOperation).cbc(key, iv);\n    const seed = aes_js__WEBPACK_IMPORTED_MODULE_0___default().padding.pkcs7.strip((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for(let i = 0; i < seed.length; i++){\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_8__.toUtf8Bytes)(seedHex);\n    const privateKey = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_9__.keccak256)(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n} //# sourceMappingURL=crowdsale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9jcm93ZHNhbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQ1k7QUFDMkI7QUFDSjtBQUNLO0FBQ047QUFDTTtBQUNHO0FBQ1Q7QUFDVjtBQUNyQyxNQUFNUyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDZ0M7QUFDMUQsTUFBTUsseUJBQXlCUCxrRUFBV0E7SUFDN0NRLG1CQUFtQkMsS0FBSyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxTQUFTQSxNQUFNQyxtQkFBbUI7SUFDaEQ7QUFDSjtBQUNBLGlEQUFpRDtBQUMxQyxTQUFTQyxRQUFRQyxJQUFJLEVBQUVDLFFBQVE7SUFDbEMsTUFBTUMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSjtJQUN4QkMsV0FBV1QsbURBQVdBLENBQUNTO0lBQ3ZCLG1CQUFtQjtJQUNuQixNQUFNSSxVQUFVdEIsa0VBQVVBLENBQUNXLGtEQUFVQSxDQUFDUSxNQUFNO0lBQzVDLGlCQUFpQjtJQUNqQixNQUFNSSxVQUFVYixxREFBYUEsQ0FBQ0Msa0RBQVVBLENBQUNRLE1BQU07SUFDL0MsSUFBSSxDQUFDSSxXQUFXLFFBQVNDLE1BQU0sR0FBRyxPQUFRLEdBQUc7UUFDekNoQixPQUFPaUIsa0JBQWtCLENBQUMsbUJBQW1CLFFBQVFSO0lBQ3pEO0lBQ0EsTUFBTVMsTUFBTXpCLDhEQUFRQSxDQUFDRSw2REFBTUEsQ0FBQ2UsVUFBVUEsVUFBVSxNQUFNLElBQUksV0FBV1MsS0FBSyxDQUFDLEdBQUc7SUFDOUUsTUFBTUMsS0FBS0wsUUFBUUksS0FBSyxDQUFDLEdBQUc7SUFDNUIsTUFBTUUsZ0JBQWdCTixRQUFRSSxLQUFLLENBQUM7SUFDcEMsbUJBQW1CO0lBQ25CLE1BQU1HLFNBQVMsSUFBSS9CLCtEQUFtQixDQUFDaUMsR0FBRyxDQUFDTixLQUFLRTtJQUNoRCxNQUFNSyxPQUFPbEMscURBQVcsQ0FBQ29DLEtBQUssQ0FBQ0MsS0FBSyxDQUFDbkMsOERBQVFBLENBQUM2QixPQUFPZCxPQUFPLENBQUNhO0lBQzdELDZFQUE2RTtJQUM3RSxJQUFJUSxVQUFVO0lBQ2QsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLEtBQUtULE1BQU0sRUFBRWMsSUFBSztRQUNsQ0QsV0FBV0UsT0FBT0MsWUFBWSxDQUFDUCxJQUFJLENBQUNLLEVBQUU7SUFDMUM7SUFDQSxNQUFNRyxlQUFlckMsbUVBQVdBLENBQUNpQztJQUNqQyxNQUFNSyxhQUFheEMsbUVBQVNBLENBQUN1QztJQUM3QixPQUFPLElBQUk3QixpQkFBaUI7UUFDeEJHLHFCQUFxQjtRQUNyQjRCLFNBQVNyQjtRQUNUb0IsWUFBWUE7SUFDaEI7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvanNvbi13YWxsZXRzL2xpYi5lc20vY3Jvd2RzYWxlLmpzPzI5ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgYWVzIGZyb20gXCJhZXMtanNcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wYmtkZjJcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IERlc2NyaXB0aW9uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmltcG9ydCB7IGdldFBhc3N3b3JkLCBsb29zZUFycmF5aWZ5LCBzZWFyY2hQYXRoIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCBjbGFzcyBDcm93ZHNhbGVBY2NvdW50IGV4dGVuZHMgRGVzY3JpcHRpb24ge1xuICAgIGlzQ3Jvd2RzYWxlQWNjb3VudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzQ3Jvd2RzYWxlQWNjb3VudCk7XG4gICAgfVxufVxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vcHlldGhzYWxldG9vbFxuZXhwb3J0IGZ1bmN0aW9uIGRlY3J5cHQoanNvbiwgcGFzc3dvcmQpIHtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICBwYXNzd29yZCA9IGdldFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAvLyBFdGhlcmV1bSBBZGRyZXNzXG4gICAgY29uc3QgZXRoYWRkciA9IGdldEFkZHJlc3Moc2VhcmNoUGF0aChkYXRhLCBcImV0aGFkZHJcIikpO1xuICAgIC8vIEVuY3J5cHRlZCBTZWVkXG4gICAgY29uc3QgZW5jc2VlZCA9IGxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLCBcImVuY3NlZWRcIikpO1xuICAgIGlmICghZW5jc2VlZCB8fCAoZW5jc2VlZC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZW5jc2VlZFwiLCBcImpzb25cIiwganNvbik7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IGFycmF5aWZ5KHBia2RmMihwYXNzd29yZCwgcGFzc3dvcmQsIDIwMDAsIDMyLCBcInNoYTI1NlwiKSkuc2xpY2UoMCwgMTYpO1xuICAgIGNvbnN0IGl2ID0gZW5jc2VlZC5zbGljZSgwLCAxNik7XG4gICAgY29uc3QgZW5jcnlwdGVkU2VlZCA9IGVuY3NlZWQuc2xpY2UoMTYpO1xuICAgIC8vIERlY3J5cHQgdGhlIHNlZWRcbiAgICBjb25zdCBhZXNDYmMgPSBuZXcgYWVzLk1vZGVPZk9wZXJhdGlvbi5jYmMoa2V5LCBpdik7XG4gICAgY29uc3Qgc2VlZCA9IGFlcy5wYWRkaW5nLnBrY3M3LnN0cmlwKGFycmF5aWZ5KGFlc0NiYy5kZWNyeXB0KGVuY3J5cHRlZFNlZWQpKSk7XG4gICAgLy8gVGhpcyB3YWxsZXQgZm9ybWF0IGlzIHdlaXJkLi4uIENvbnZlcnQgdGhlIGJpbmFyeSBlbmNvZGVkIGhleCB0byBhIHN0cmluZy5cbiAgICBsZXQgc2VlZEhleCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlZWRIZXggKz0gU3RyaW5nLmZyb21DaGFyQ29kZShzZWVkW2ldKTtcbiAgICB9XG4gICAgY29uc3Qgc2VlZEhleEJ5dGVzID0gdG9VdGY4Qnl0ZXMoc2VlZEhleCk7XG4gICAgY29uc3QgcHJpdmF0ZUtleSA9IGtlY2NhazI1NihzZWVkSGV4Qnl0ZXMpO1xuICAgIHJldHVybiBuZXcgQ3Jvd2RzYWxlQWNjb3VudCh7XG4gICAgICAgIF9pc0Nyb3dkc2FsZUFjY291bnQ6IHRydWUsXG4gICAgICAgIGFkZHJlc3M6IGV0aGFkZHIsXG4gICAgICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXlcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyb3dkc2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiYWVzIiwiZ2V0QWRkcmVzcyIsImFycmF5aWZ5Iiwia2VjY2FrMjU2IiwicGJrZGYyIiwidG9VdGY4Qnl0ZXMiLCJEZXNjcmlwdGlvbiIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJnZXRQYXNzd29yZCIsImxvb3NlQXJyYXlpZnkiLCJzZWFyY2hQYXRoIiwiQ3Jvd2RzYWxlQWNjb3VudCIsImlzQ3Jvd2RzYWxlQWNjb3VudCIsInZhbHVlIiwiX2lzQ3Jvd2RzYWxlQWNjb3VudCIsImRlY3J5cHQiLCJqc29uIiwicGFzc3dvcmQiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiZXRoYWRkciIsImVuY3NlZWQiLCJsZW5ndGgiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJrZXkiLCJzbGljZSIsIml2IiwiZW5jcnlwdGVkU2VlZCIsImFlc0NiYyIsIk1vZGVPZk9wZXJhdGlvbiIsImNiYyIsInNlZWQiLCJwYWRkaW5nIiwicGtjczciLCJzdHJpcCIsInNlZWRIZXgiLCJpIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwic2VlZEhleEJ5dGVzIiwicHJpdmF0ZUtleSIsImFkZHJlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptCrowdsale: function() { return /* reexport safe */ _crowdsale__WEBPACK_IMPORTED_MODULE_1__.decrypt; },\n/* harmony export */   decryptJsonWallet: function() { return /* binding */ decryptJsonWallet; },\n/* harmony export */   decryptJsonWalletSync: function() { return /* binding */ decryptJsonWalletSync; },\n/* harmony export */   decryptKeystore: function() { return /* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_2__.decrypt; },\n/* harmony export */   decryptKeystoreSync: function() { return /* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_2__.decryptSync; },\n/* harmony export */   encryptKeystore: function() { return /* reexport safe */ _keystore__WEBPACK_IMPORTED_MODULE_2__.encrypt; },\n/* harmony export */   getJsonWalletAddress: function() { return /* reexport safe */ _inspect__WEBPACK_IMPORTED_MODULE_0__.getJsonWalletAddress; },\n/* harmony export */   isCrowdsaleWallet: function() { return /* reexport safe */ _inspect__WEBPACK_IMPORTED_MODULE_0__.isCrowdsaleWallet; },\n/* harmony export */   isKeystoreWallet: function() { return /* reexport safe */ _inspect__WEBPACK_IMPORTED_MODULE_0__.isKeystoreWallet; }\n/* harmony export */ });\n/* harmony import */ var _crowdsale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crowdsale */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js\");\n/* harmony import */ var _inspect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\");\n/* harmony import */ var _keystore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keystore */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\");\n\n\n\n\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if ((0,_inspect__WEBPACK_IMPORTED_MODULE_0__.isCrowdsaleWallet)(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = (0,_crowdsale__WEBPACK_IMPORTED_MODULE_1__.decrypt)(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if ((0,_inspect__WEBPACK_IMPORTED_MODULE_0__.isKeystoreWallet)(json)) {\n        return (0,_keystore__WEBPACK_IMPORTED_MODULE_2__.decrypt)(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if ((0,_inspect__WEBPACK_IMPORTED_MODULE_0__.isCrowdsaleWallet)(json)) {\n        return (0,_crowdsale__WEBPACK_IMPORTED_MODULE_1__.decrypt)(json, password);\n    }\n    if ((0,_inspect__WEBPACK_IMPORTED_MODULE_0__.isKeystoreWallet)(json)) {\n        return (0,_keystore__WEBPACK_IMPORTED_MODULE_2__.decryptSync)(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUM2QztBQUM0QjtBQUNrQztBQUN4SCxTQUFTVSxrQkFBa0JDLElBQUksRUFBRUMsUUFBUSxFQUFFQyxnQkFBZ0I7SUFDdkQsSUFBSVYsMkRBQWlCQSxDQUFDUSxPQUFPO1FBQ3pCLElBQUlFLGtCQUFrQjtZQUNsQkEsaUJBQWlCO1FBQ3JCO1FBQ0EsTUFBTUMsVUFBVWIsbURBQWdCQSxDQUFDVSxNQUFNQztRQUN2QyxJQUFJQyxrQkFBa0I7WUFDbEJBLGlCQUFpQjtRQUNyQjtRQUNBLE9BQU9FLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDM0I7SUFDQSxJQUFJViwwREFBZ0JBLENBQUNPLE9BQU87UUFDeEIsT0FBT04sa0RBQWVBLENBQUNNLE1BQU1DLFVBQVVDO0lBQzNDO0lBQ0EsT0FBT0UsUUFBUUUsTUFBTSxDQUFDLElBQUlDLE1BQU07QUFDcEM7QUFDQSxTQUFTQyxzQkFBc0JSLElBQUksRUFBRUMsUUFBUTtJQUN6QyxJQUFJVCwyREFBaUJBLENBQUNRLE9BQU87UUFDekIsT0FBT1YsbURBQWdCQSxDQUFDVSxNQUFNQztJQUNsQztJQUNBLElBQUlSLDBEQUFnQkEsQ0FBQ08sT0FBTztRQUN4QixPQUFPSixzREFBbUJBLENBQUNJLE1BQU1DO0lBQ3JDO0lBQ0EsTUFBTSxJQUFJTSxNQUFNO0FBQ3BCO0FBQ3lMLENBQ3pMLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvanNvbi13YWxsZXRzL2xpYi5lc20vaW5kZXguanM/MDVhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGRlY3J5cHQgYXMgZGVjcnlwdENyb3dkc2FsZSB9IGZyb20gXCIuL2Nyb3dkc2FsZVwiO1xuaW1wb3J0IHsgZ2V0SnNvbldhbGxldEFkZHJlc3MsIGlzQ3Jvd2RzYWxlV2FsbGV0LCBpc0tleXN0b3JlV2FsbGV0IH0gZnJvbSBcIi4vaW5zcGVjdFwiO1xuaW1wb3J0IHsgZGVjcnlwdCBhcyBkZWNyeXB0S2V5c3RvcmUsIGRlY3J5cHRTeW5jIGFzIGRlY3J5cHRLZXlzdG9yZVN5bmMsIGVuY3J5cHQgYXMgZW5jcnlwdEtleXN0b3JlIH0gZnJvbSBcIi4va2V5c3RvcmVcIjtcbmZ1bmN0aW9uIGRlY3J5cHRKc29uV2FsbGV0KGpzb24sIHBhc3N3b3JkLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgaWYgKGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb24pKSB7XG4gICAgICAgIGlmIChwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrKDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjY291bnQgPSBkZWNyeXB0Q3Jvd2RzYWxlKGpzb24sIHBhc3N3b3JkKTtcbiAgICAgICAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhY2NvdW50KTtcbiAgICB9XG4gICAgaWYgKGlzS2V5c3RvcmVXYWxsZXQoanNvbikpIHtcbiAgICAgICAgcmV0dXJuIGRlY3J5cHRLZXlzdG9yZShqc29uLCBwYXNzd29yZCwgcHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIEpTT04gd2FsbGV0XCIpKTtcbn1cbmZ1bmN0aW9uIGRlY3J5cHRKc29uV2FsbGV0U3luYyhqc29uLCBwYXNzd29yZCkge1xuICAgIGlmIChpc0Nyb3dkc2FsZVdhbGxldChqc29uKSkge1xuICAgICAgICByZXR1cm4gZGVjcnlwdENyb3dkc2FsZShqc29uLCBwYXNzd29yZCk7XG4gICAgfVxuICAgIGlmIChpc0tleXN0b3JlV2FsbGV0KGpzb24pKSB7XG4gICAgICAgIHJldHVybiBkZWNyeXB0S2V5c3RvcmVTeW5jKGpzb24sIHBhc3N3b3JkKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKTtcbn1cbmV4cG9ydCB7IGRlY3J5cHRDcm93ZHNhbGUsIGRlY3J5cHRLZXlzdG9yZSwgZGVjcnlwdEtleXN0b3JlU3luYywgZW5jcnlwdEtleXN0b3JlLCBpc0Nyb3dkc2FsZVdhbGxldCwgaXNLZXlzdG9yZVdhbGxldCwgZ2V0SnNvbldhbGxldEFkZHJlc3MsIGRlY3J5cHRKc29uV2FsbGV0LCBkZWNyeXB0SnNvbldhbGxldFN5bmMsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiZGVjcnlwdCIsImRlY3J5cHRDcm93ZHNhbGUiLCJnZXRKc29uV2FsbGV0QWRkcmVzcyIsImlzQ3Jvd2RzYWxlV2FsbGV0IiwiaXNLZXlzdG9yZVdhbGxldCIsImRlY3J5cHRLZXlzdG9yZSIsImRlY3J5cHRTeW5jIiwiZGVjcnlwdEtleXN0b3JlU3luYyIsImVuY3J5cHQiLCJlbmNyeXB0S2V5c3RvcmUiLCJkZWNyeXB0SnNvbldhbGxldCIsImpzb24iLCJwYXNzd29yZCIsInByb2dyZXNzQ2FsbGJhY2siLCJhY2NvdW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJFcnJvciIsImRlY3J5cHRKc29uV2FsbGV0U3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getJsonWalletAddress: function() { return /* binding */ getJsonWalletAddress; },\n/* harmony export */   isCrowdsaleWallet: function() { return /* binding */ isCrowdsaleWallet; },\n/* harmony export */   isKeystoreWallet: function() { return /* binding */ isKeystoreWallet; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n\n\nfunction isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) {\n        return false;\n    }\n    return data.encseed && data.ethaddr;\n}\nfunction isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nfunction getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_0__.getAddress)(JSON.parse(json).ethaddr);\n        } catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_0__.getAddress)(JSON.parse(json).address);\n        } catch (error) {\n            return null;\n        }\n    }\n    return null;\n} //# sourceMappingURL=inspect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9pbnNwZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUN1QztBQUM3QyxTQUFTQyxrQkFBa0JDLElBQUk7SUFDbEMsSUFBSUMsT0FBTztJQUNYLElBQUk7UUFDQUEsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSDtJQUN0QixFQUNBLE9BQU9JLE9BQU87UUFDVixPQUFPO0lBQ1g7SUFDQSxPQUFRSCxLQUFLSSxPQUFPLElBQUlKLEtBQUtLLE9BQU87QUFDeEM7QUFDTyxTQUFTQyxpQkFBaUJQLElBQUk7SUFDakMsSUFBSUMsT0FBTztJQUNYLElBQUk7UUFDQUEsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSDtJQUN0QixFQUNBLE9BQU9JLE9BQU87UUFDVixPQUFPO0lBQ1g7SUFDQSxJQUFJLENBQUNILEtBQUtPLE9BQU8sSUFBSUMsU0FBU1IsS0FBS08sT0FBTyxNQUFNUCxLQUFLTyxPQUFPLElBQUlDLFNBQVNSLEtBQUtPLE9BQU8sTUFBTSxHQUFHO1FBQzFGLE9BQU87SUFDWDtJQUNBLDZFQUE2RTtJQUM3RSxPQUFPO0FBQ1g7QUFDQSx1REFBdUQ7QUFDdkQsc0VBQXNFO0FBQ3RFLEdBQUc7QUFDSSxTQUFTRSxxQkFBcUJWLElBQUk7SUFDckMsSUFBSUQsa0JBQWtCQyxPQUFPO1FBQ3pCLElBQUk7WUFDQSxPQUFPRixrRUFBVUEsQ0FBQ0ksS0FBS0MsS0FBSyxDQUFDSCxNQUFNTSxPQUFPO1FBQzlDLEVBQ0EsT0FBT0YsT0FBTztZQUNWLE9BQU87UUFDWDtJQUNKO0lBQ0EsSUFBSUcsaUJBQWlCUCxPQUFPO1FBQ3hCLElBQUk7WUFDQSxPQUFPRixrRUFBVUEsQ0FBQ0ksS0FBS0MsS0FBSyxDQUFDSCxNQUFNVyxPQUFPO1FBQzlDLEVBQ0EsT0FBT1AsT0FBTztZQUNWLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS9pbnNwZWN0LmpzPzA4OTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc0Nyb3dkc2FsZVdhbGxldChqc29uKSB7XG4gICAgbGV0IGRhdGEgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKGRhdGEuZW5jc2VlZCAmJiBkYXRhLmV0aGFkZHIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5c3RvcmVXYWxsZXQoanNvbikge1xuICAgIGxldCBkYXRhID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFkYXRhLnZlcnNpb24gfHwgcGFyc2VJbnQoZGF0YS52ZXJzaW9uKSAhPT0gZGF0YS52ZXJzaW9uIHx8IHBhcnNlSW50KGRhdGEudmVyc2lvbikgIT09IDMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBAVE9ETzogUHV0IG1vcmUgY2hlY2tzIHRvIG1ha2Ugc3VyZSBpdCBoYXMga2RmLCBpdiBhbmQgYWxsIHRoYXQgZ29vZCBzdHVmZlxuICAgIHJldHVybiB0cnVlO1xufVxuLy9leHBvcnQgZnVuY3Rpb24gaXNKc29uV2FsbGV0KGpzb246IHN0cmluZyk6IGJvb2xlYW4ge1xuLy8gICAgcmV0dXJuIChpc1NlY3JldFN0b3JhZ2VXYWxsZXQoanNvbikgfHwgaXNDcm93ZHNhbGVXYWxsZXQoanNvbikpO1xuLy99XG5leHBvcnQgZnVuY3Rpb24gZ2V0SnNvbldhbGxldEFkZHJlc3MoanNvbikge1xuICAgIGlmIChpc0Nyb3dkc2FsZVdhbGxldChqc29uKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3MoSlNPTi5wYXJzZShqc29uKS5ldGhhZGRyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc0tleXN0b3JlV2FsbGV0KGpzb24pKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyhKU09OLnBhcnNlKGpzb24pLmFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnNwZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRBZGRyZXNzIiwiaXNDcm93ZHNhbGVXYWxsZXQiLCJqc29uIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiZW5jc2VlZCIsImV0aGFkZHIiLCJpc0tleXN0b3JlV2FsbGV0IiwidmVyc2lvbiIsInBhcnNlSW50IiwiZ2V0SnNvbldhbGxldEFkZHJlc3MiLCJhZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeystoreAccount: function() { return /* binding */ KeystoreAccount; },\n/* harmony export */   decrypt: function() { return /* binding */ decrypt; },\n/* harmony export */   decryptSync: function() { return /* binding */ decryptSync; },\n/* harmony export */   encrypt: function() { return /* binding */ encrypt; }\n/* harmony export */ });\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aes-js */ \"(app-pages-browser)/./node_modules/aes-js/index.js\");\n/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var scrypt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! scrypt-js */ \"(app-pages-browser)/./node_modules/scrypt-js/scrypt.js\");\n/* harmony import */ var scrypt_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(scrypt_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/hdnode */ \"(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/pbkdf2 */ \"(app-pages-browser)/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\");\n/* harmony import */ var _ethersproject_random__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/random */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/random.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/utils.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_2__.Logger(_version__WEBPACK_IMPORTED_MODULE_3__.version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return value != null && value.mnemonic && value.mnemonic.phrase;\n}\nclass KeystoreAccount extends _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.Description {\n    isKeystoreAccount(value) {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\nfunction _decrypt(data, key, ciphertext) {\n    const cipher = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/cipherparams/iv\"));\n        const counter = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().Counter)(iv);\n        const aesCtr = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().ModeOfOperation).ctr(key, counter);\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    const ciphertext = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/ciphertext\"));\n    const computedMAC = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.concat)([\n        key.slice(16, 32),\n        ciphertext\n    ]))).substring(2);\n    if (computedMAC !== (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_2__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    const mnemonicKey = key.slice(32, 64);\n    const address = (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_8__.computeAddress)(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if ((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_9__.getAddress)(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    const account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"x-ethers/mnemonicCounter\"));\n        const mnemonicCounter = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().Counter)(mnemonicIv);\n        const mnemonicAesCtr = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().ModeOfOperation).ctr(mnemonicKey, mnemonicCounter);\n        const path = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"x-ethers/path\") || _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.defaultPath;\n        const locale = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"x-ethers/locale\") || \"en\";\n        const entropy = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            const mnemonic = (0,_ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.entropyToMnemonic)(entropy, locale);\n            const node = _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        } catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_2__.Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_ethersproject_pbkdf2__WEBPACK_IMPORTED_MODULE_11__.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getPassword)(password);\n    const kdf = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdf\");\n    if (kdf && typeof kdf === \"string\") {\n        const throwError = function(name, value) {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/n\"));\n            const r = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/r\"));\n            const p = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & N - 1) !== 0) {\n                throwError(\"N\", N);\n            }\n            const dkLen = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.looseArrayify)((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/salt\"));\n            let prfFunc = null;\n            const prf = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            } else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            } else {\n                throwError(\"prf\", prf);\n            }\n            const count = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/c\"));\n            const dkLen = parseInt((0,_utils__WEBPACK_IMPORTED_MODULE_5__.searchPath)(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nfunction decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key = _computeKdfKey(data, password, pbkdf2Sync, (scrypt_js__WEBPACK_IMPORTED_MODULE_1___default().syncScrypt));\n    return _getAccount(data, key);\n}\nfunction decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const data = JSON.parse(json);\n        const key = yield _computeKdfKey(data, password, pbkdf2, (scrypt_js__WEBPACK_IMPORTED_MODULE_1___default().scrypt), progressCallback);\n        return _getAccount(data, key);\n    });\n}\nfunction encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if ((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_9__.getAddress)(account.address) !== (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_8__.computeAddress)(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    } catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    const privateKey = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(account.privateKey);\n    const passwordBytes = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getPassword)(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_10__.defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    let salt = null;\n    if (options.salt) {\n        salt = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(options.salt);\n    } else {\n        salt = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_12__.randomBytes)(32);\n        ;\n    }\n    // Override initialization vector\n    let iv = null;\n    if (options.iv) {\n        iv = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    } else {\n        iv = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_12__.randomBytes)(16);\n    }\n    // Override the uuid\n    let uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    } else {\n        uuidRandom = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_12__.randomBytes)(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    let N = 1 << 17, r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt_js__WEBPACK_IMPORTED_MODULE_1___default().scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key)=>{\n        key = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        const counter = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().Counter)(iv);\n        const aesCtr = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().ModeOfOperation).ctr(derivedKey, counter);\n        const ciphertext = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        const mac = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.concat)([\n            macPrefix,\n            ciphertext\n        ]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: (0,_utils__WEBPACK_IMPORTED_MODULE_5__.uuidV4)(uuidRandom),\n            version: 3,\n            crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(iv).substring(2)\n                },\n                ciphertext: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_12__.randomBytes)(16);\n            const mnemonicCounter = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().Counter)(mnemonicIv);\n            const mnemonicAesCtr = new (aes_js__WEBPACK_IMPORTED_MODULE_0___default().ModeOfOperation).ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = now.getUTCFullYear() + \"-\" + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.zpad)(now.getUTCMonth() + 1, 2) + \"-\" + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.zpad)(now.getUTCDate(), 2) + \"T\" + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.zpad)(now.getUTCHours(), 2) + \"-\" + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.zpad)(now.getUTCMinutes(), 2) + \"-\" + (0,_utils__WEBPACK_IMPORTED_MODULE_5__.zpad)(now.getUTCSeconds(), 2) + \".0Z\";\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n                mnemonicCounter: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(mnemonicIv).substring(2),\n                mnemonicCiphertext: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n} //# sourceMappingURL=keystore.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/json-wallets/lib.esm/utils.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPassword: function() { return /* binding */ getPassword; },\n/* harmony export */   looseArrayify: function() { return /* binding */ looseArrayify; },\n/* harmony export */   searchPath: function() { return /* binding */ searchPath; },\n/* harmony export */   uuidV4: function() { return /* binding */ uuidV4; },\n/* harmony export */   zpad: function() { return /* binding */ zpad; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\n\nfunction looseArrayify(hexString) {\n    if (typeof hexString === \"string\" && hexString.substring(0, 2) !== \"0x\") {\n        hexString = \"0x\" + hexString;\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(hexString);\n}\nfunction zpad(value, length) {\n    value = String(value);\n    while(value.length < length){\n        value = \"0\" + value;\n    }\n    return value;\n}\nfunction getPassword(password) {\n    if (typeof password === \"string\") {\n        return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.toUtf8Bytes)(password, _ethersproject_strings__WEBPACK_IMPORTED_MODULE_1__.UnicodeNormalizationForm.NFKC);\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(password);\n}\nfunction searchPath(object, path) {\n    let currentChild = object;\n    const comps = path.toLowerCase().split(\"/\");\n    for(let i = 0; i < comps.length; i++){\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for(const key in currentChild){\n            if (key.toLowerCase() === comps[i]) {\n                matchingChild = currentChild[key];\n                break;\n            }\n        }\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n    return currentChild;\n}\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nfunction uuidV4(randomBytes) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(randomBytes);\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = bytes[6] & 0x0f | 0x40;\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    const value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.hexlify)(bytes);\n    return [\n        value.substring(2, 10),\n        value.substring(10, 14),\n        value.substring(14, 18),\n        value.substring(18, 22),\n        value.substring(22, 34)\n    ].join(\"-\");\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWE7QUFDNEM7QUFDc0I7QUFDeEUsU0FBU0ksY0FBY0MsU0FBUztJQUNuQyxJQUFJLE9BQVFBLGNBQWUsWUFBWUEsVUFBVUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxNQUFNO1FBQ3ZFRCxZQUFZLE9BQU9BO0lBQ3ZCO0lBQ0EsT0FBT0wsOERBQVFBLENBQUNLO0FBQ3BCO0FBQ08sU0FBU0UsS0FBS0MsS0FBSyxFQUFFQyxNQUFNO0lBQzlCRCxRQUFRRSxPQUFPRjtJQUNmLE1BQU9BLE1BQU1DLE1BQU0sR0FBR0EsT0FBUTtRQUMxQkQsUUFBUSxNQUFNQTtJQUNsQjtJQUNBLE9BQU9BO0FBQ1g7QUFDTyxTQUFTRyxZQUFZQyxRQUFRO0lBQ2hDLElBQUksT0FBUUEsYUFBYyxVQUFVO1FBQ2hDLE9BQU9WLG1FQUFXQSxDQUFDVSxVQUFVVCw0RUFBd0JBLENBQUNVLElBQUk7SUFDOUQ7SUFDQSxPQUFPYiw4REFBUUEsQ0FBQ1k7QUFDcEI7QUFDTyxTQUFTRSxXQUFXQyxNQUFNLEVBQUVDLElBQUk7SUFDbkMsSUFBSUMsZUFBZUY7SUFDbkIsTUFBTUcsUUFBUUYsS0FBS0csV0FBVyxHQUFHQyxLQUFLLENBQUM7SUFDdkMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE1BQU1ULE1BQU0sRUFBRVksSUFBSztRQUNuQyxpRUFBaUU7UUFDakUsSUFBSUMsZ0JBQWdCO1FBQ3BCLElBQUssTUFBTUMsT0FBT04sYUFBYztZQUM1QixJQUFJTSxJQUFJSixXQUFXLE9BQU9ELEtBQUssQ0FBQ0csRUFBRSxFQUFFO2dCQUNoQ0MsZ0JBQWdCTCxZQUFZLENBQUNNLElBQUk7Z0JBQ2pDO1lBQ0o7UUFDSjtRQUNBLHVCQUF1QjtRQUN2QixJQUFJRCxrQkFBa0IsTUFBTTtZQUN4QixPQUFPO1FBQ1g7UUFDQSwwQkFBMEI7UUFDMUJMLGVBQWVLO0lBQ25CO0lBQ0EsT0FBT0w7QUFDWDtBQUNBLDBEQUEwRDtBQUNuRCxTQUFTTyxPQUFPQyxXQUFXO0lBQzlCLE1BQU1DLFFBQVExQiw4REFBUUEsQ0FBQ3lCO0lBQ3ZCLGtCQUFrQjtJQUNsQix3Q0FBd0M7SUFDeENDLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBTSxDQUFDLEVBQUUsR0FBRyxPQUFRO0lBQy9CLGNBQWM7SUFDZCx1Q0FBdUM7SUFDdkMsdUNBQXVDO0lBQ3ZDQSxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQU0sQ0FBQyxFQUFFLEdBQUcsT0FBUTtJQUMvQixNQUFNbEIsUUFBUVAsNkRBQU9BLENBQUN5QjtJQUN0QixPQUFPO1FBQ0hsQixNQUFNRixTQUFTLENBQUMsR0FBRztRQUNuQkUsTUFBTUYsU0FBUyxDQUFDLElBQUk7UUFDcEJFLE1BQU1GLFNBQVMsQ0FBQyxJQUFJO1FBQ3BCRSxNQUFNRixTQUFTLENBQUMsSUFBSTtRQUNwQkUsTUFBTUYsU0FBUyxDQUFDLElBQUk7S0FDdkIsQ0FBQ3FCLElBQUksQ0FBQztBQUNYLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvbGliLmVzbS91dGlscy5qcz8wMTZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0gfSBmcm9tICdAZXRoZXJzcHJvamVjdC9zdHJpbmdzJztcbmV4cG9ydCBmdW5jdGlvbiBsb29zZUFycmF5aWZ5KGhleFN0cmluZykge1xuICAgIGlmICh0eXBlb2YgKGhleFN0cmluZykgPT09ICdzdHJpbmcnICYmIGhleFN0cmluZy5zdWJzdHJpbmcoMCwgMikgIT09ICcweCcpIHtcbiAgICAgICAgaGV4U3RyaW5nID0gJzB4JyArIGhleFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5aWZ5KGhleFN0cmluZyk7XG59XG5leHBvcnQgZnVuY3Rpb24genBhZCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIHdoaWxlICh2YWx1ZS5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gICAgaWYgKHR5cGVvZiAocGFzc3dvcmQpID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9VdGY4Qnl0ZXMocGFzc3dvcmQsIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktDKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5aWZ5KHBhc3N3b3JkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hQYXRoKG9iamVjdCwgcGF0aCkge1xuICAgIGxldCBjdXJyZW50Q2hpbGQgPSBvYmplY3Q7XG4gICAgY29uc3QgY29tcHMgPSBwYXRoLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIFNlYXJjaCBmb3IgYSBjaGlsZCBvYmplY3Qgd2l0aCBhIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hpbmcga2V5XG4gICAgICAgIGxldCBtYXRjaGluZ0NoaWxkID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3VycmVudENoaWxkKSB7XG4gICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IGNvbXBzW2ldKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdDaGlsZCA9IGN1cnJlbnRDaGlsZFtrZXldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIERpZG4ndCBmaW5kIG9uZS4gOicoXG4gICAgICAgIGlmIChtYXRjaGluZ0NoaWxkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgY2hlY2sgdGhpcyBjaGlsZC4uLlxuICAgICAgICBjdXJyZW50Q2hpbGQgPSBtYXRjaGluZ0NoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudENoaWxkO1xufVxuLy8gU2VlOiBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjNDEyMi50eHQgKFNlY3Rpb24gNC40KVxuZXhwb3J0IGZ1bmN0aW9uIHV1aWRWNChyYW5kb21CeXRlcykge1xuICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkocmFuZG9tQnl0ZXMpO1xuICAgIC8vIFNlY3Rpb246IDQuMS4zOlxuICAgIC8vIC0gdGltZV9oaV9hbmRfdmVyc2lvblsxMjoxNl0gPSAwYjAxMDBcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICAvLyBTZWN0aW9uIDQuNFxuICAgIC8vIC0gY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZFs2XSA9IDBiMFxuICAgIC8vIC0gY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZFs3XSA9IDBiMVxuICAgIGJ5dGVzWzhdID0gKGJ5dGVzWzhdICYgMHgzZikgfCAweDgwO1xuICAgIGNvbnN0IHZhbHVlID0gaGV4bGlmeShieXRlcyk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDIsIDEwKSxcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDEwLCAxNCksXG4gICAgICAgIHZhbHVlLnN1YnN0cmluZygxNCwgMTgpLFxuICAgICAgICB2YWx1ZS5zdWJzdHJpbmcoMTgsIDIyKSxcbiAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDIyLCAzNCksXG4gICAgXS5qb2luKFwiLVwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJhcnJheWlmeSIsImhleGxpZnkiLCJ0b1V0ZjhCeXRlcyIsIlVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSIsImxvb3NlQXJyYXlpZnkiLCJoZXhTdHJpbmciLCJzdWJzdHJpbmciLCJ6cGFkIiwidmFsdWUiLCJsZW5ndGgiLCJTdHJpbmciLCJnZXRQYXNzd29yZCIsInBhc3N3b3JkIiwiTkZLQyIsInNlYXJjaFBhdGgiLCJvYmplY3QiLCJwYXRoIiwiY3VycmVudENoaWxkIiwiY29tcHMiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwiaSIsIm1hdGNoaW5nQ2hpbGQiLCJrZXkiLCJ1dWlkVjQiLCJyYW5kb21CeXRlcyIsImJ5dGVzIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/keccak256/lib.esm/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: function() { return /* binding */ keccak256; }\n/* harmony export */ });\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha3 */ \"(app-pages-browser)/./node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\n\n\nfunction keccak256(data) {\n    return \"0x\" + js_sha3__WEBPACK_IMPORTED_MODULE_0___default().keccak_256((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.arrayify)(data));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9rZWNjYWsyNTYvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFDYztBQUNxQjtBQUN6QyxTQUFTRSxVQUFVQyxJQUFJO0lBQzFCLE9BQU8sT0FBT0gseURBQWUsQ0FBQ0MsOERBQVFBLENBQUNFO0FBQzNDLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9rZWNjYWsyNTYvbGliLmVzbS9pbmRleC5qcz8zNzI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHNoYTMgZnJvbSBcImpzLXNoYTNcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrMjU2KGRhdGEpIHtcbiAgICByZXR1cm4gJzB4JyArIHNoYTMua2VjY2FrXzI1NihhcnJheWlmeShkYXRhKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsic2hhMyIsImFycmF5aWZ5Iiwia2VjY2FrMjU2IiwiZGF0YSIsImtlY2Nha18yNTYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/_version.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/logger/lib.esm/_version.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"logger/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9sb2dnZXIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxlQUFlLENBQ3RDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbG9nZ2VyL2xpYi5lc20vX3ZlcnNpb24uanM/YTAwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwibG9nZ2VyLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/logger/lib.esm/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: function() { return /* binding */ ErrorCode; },\n/* harmony export */   LogLevel: function() { return /* binding */ LogLevel; },\n/* harmony export */   Logger: function() { return /* binding */ Logger; }\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/_version.js\");\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n    debug: 1,\n    \"default\": 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\n\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((form)=>{\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            } catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    } catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function(ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        this._log(Logger.levels.INFO, args);\n    }\n    warn() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key)=>{\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for(let i = 0; i < value.length; i++){\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(\"code=\".concat(code));\n        messageDetails.push(\"version=\".concat(this.version));\n        const reason = message;\n        let url = \"\";\n        switch(code){\n            case ErrorCode.NUMERIC_FAULT:\n                {\n                    url = \"NUMERIC_FAULT\";\n                    const fault = message;\n                    switch(fault){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            url += \"-\" + fault;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            url += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            url += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https://links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\",\n                form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof value !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n                name: target.name,\n                operation: \"new\"\n            });\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n                name: kind.name\n            });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(_version__WEBPACK_IMPORTED_MODULE_0__.version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n    constructor(version){\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9sb2dnZXIvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFDYixJQUFJQSx5QkFBeUI7QUFDN0IsSUFBSUMsZ0JBQWdCO0FBQ3BCLE1BQU1DLFlBQVk7SUFBRUMsT0FBTztJQUFHLFdBQVc7SUFBR0MsTUFBTTtJQUFHQyxTQUFTO0lBQUdDLE9BQU87SUFBR0MsS0FBSztBQUFFO0FBQ2xGLElBQUlDLFlBQVlOLFNBQVMsQ0FBQyxVQUFVO0FBQ0M7QUFDckMsSUFBSVEsZ0JBQWdCO0FBQ3BCLFNBQVNDO0lBQ0wsSUFBSTtRQUNBLE1BQU1DLFVBQVUsRUFBRTtRQUNsQixxREFBcUQ7UUFDckQ7WUFBQztZQUFPO1lBQU87WUFBUTtTQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDQztZQUNwQyxJQUFJO2dCQUNBLElBQUksT0FBT0MsU0FBUyxDQUFDRCxVQUFVLFFBQVE7b0JBQ25DLE1BQU0sSUFBSUUsTUFBTTtnQkFDcEI7O1lBRUosRUFDQSxPQUFPVixPQUFPO2dCQUNWTSxRQUFRSyxJQUFJLENBQUNIO1lBQ2pCO1FBQ0o7UUFDQSxJQUFJRixRQUFRTSxNQUFNLEVBQUU7WUFDaEIsTUFBTSxJQUFJRixNQUFNLGFBQWFKLFFBQVFPLElBQUksQ0FBQztRQUM5QztRQUNBLElBQUlDLE9BQU9DLFlBQVksQ0FBQyxNQUFNTixTQUFTLENBQUMsV0FBV0ssT0FBT0MsWUFBWSxDQUFDLE1BQU0sU0FBUztZQUNsRixNQUFNLElBQUlMLE1BQU07UUFDcEI7SUFDSixFQUNBLE9BQU9WLE9BQU87UUFDVixPQUFPQSxNQUFNZ0IsT0FBTztJQUN4QjtJQUNBLE9BQU87QUFDWDtBQUNBLE1BQU1DLGtCQUFrQlo7QUFDakIsSUFBSWEsU0FBUztBQUNuQixVQUFVQSxRQUFRO0lBQ2ZBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxPQUFPLEdBQUc7SUFD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LFFBQVE3QixTQUFTLENBQUMyQixTQUFTRyxXQUFXLEdBQUc7UUFDL0MsSUFBSUQsU0FBUyxNQUFNO1lBQ2ZKLE9BQU84RCxZQUFZLEdBQUdqRCxJQUFJLENBQUMseUJBQXlCWDtZQUNwRDtRQUNKO1FBQ0FyQixZQUFZdUI7SUFDaEI7SUFDQSxPQUFPK0QsS0FBS3JGLE9BQU8sRUFBRTtRQUNqQixPQUFPLElBQUlrQixPQUFPbEI7SUFDdEI7SUFqT0FzRixZQUFZdEYsT0FBTyxDQUFFO1FBQ2pCdUMsT0FBT2dELGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaOUMsT0FBTzFDO1lBQ1B5RixVQUFVO1FBQ2Q7SUFDSjtBQTROSjtBQUNBdkUsT0FBT2tCLE1BQU0sR0FBR3BCO0FBQ2hCRSxPQUFPVSxNQUFNLEdBQUdiLFVBQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbG9nZ2VyL2xpYi5lc20vaW5kZXguanM/ZGQ2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmxldCBfcGVybWFuZW50Q2Vuc29yRXJyb3JzID0gZmFsc2U7XG5sZXQgX2NlbnNvckVycm9ycyA9IGZhbHNlO1xuY29uc3QgTG9nTGV2ZWxzID0geyBkZWJ1ZzogMSwgXCJkZWZhdWx0XCI6IDIsIGluZm86IDIsIHdhcm5pbmc6IDMsIGVycm9yOiA0LCBvZmY6IDUgfTtcbmxldCBfbG9nTGV2ZWwgPSBMb2dMZXZlbHNbXCJkZWZhdWx0XCJdO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5sZXQgX2dsb2JhbExvZ2dlciA9IG51bGw7XG5mdW5jdGlvbiBfY2hlY2tOb3JtYWxpemUoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWlzc2luZyA9IFtdO1xuICAgICAgICAvLyBNYWtlIHN1cmUgYWxsIGZvcm1zIG9mIG5vcm1hbGl6YXRpb24gYXJlIHN1cHBvcnRlZFxuICAgICAgICBbXCJORkRcIiwgXCJORkNcIiwgXCJORktEXCIsIFwiTkZLQ1wiXS5mb3JFYWNoKChmb3JtKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChcInRlc3RcIi5ub3JtYWxpemUoZm9ybSkgIT09IFwidGVzdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJhZCBub3JtYWxpemVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG1pc3NpbmcucHVzaChmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBcIiArIG1pc3Npbmcuam9pbihcIiwgXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoU3RyaW5nLmZyb21DaGFyQ29kZSgweGU5KS5ub3JtYWxpemUoXCJORkRcIikgIT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg2NSwgMHgwMzAxKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYnJva2VuIGltcGxlbWVudGF0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5jb25zdCBfbm9ybWFsaXplRXJyb3IgPSBfY2hlY2tOb3JtYWxpemUoKTtcbmV4cG9ydCB2YXIgTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XG4gICAgTG9nTGV2ZWxbXCJERUJVR1wiXSA9IFwiREVCVUdcIjtcbiAgICBMb2dMZXZlbFtcIklORk9cIl0gPSBcIklORk9cIjtcbiAgICBMb2dMZXZlbFtcIldBUk5JTkdcIl0gPSBcIldBUk5JTkdcIjtcbiAgICBMb2dMZXZlbFtcIkVSUk9SXCJdID0gXCJFUlJPUlwiO1xuICAgIExvZ0xldmVsW1wiT0ZGXCJdID0gXCJPRkZcIjtcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XG5leHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEdlbmVyaWMgRXJyb3JzXG4gICAgLy8gVW5rbm93biBFcnJvclxuICAgIEVycm9yQ29kZVtcIlVOS05PV05fRVJST1JcIl0gPSBcIlVOS05PV05fRVJST1JcIjtcbiAgICAvLyBOb3QgSW1wbGVtZW50ZWRcbiAgICBFcnJvckNvZGVbXCJOT1RfSU1QTEVNRU5URURcIl0gPSBcIk5PVF9JTVBMRU1FTlRFRFwiO1xuICAgIC8vIFVuc3VwcG9ydGVkIE9wZXJhdGlvblxuICAgIC8vICAgLSBvcGVyYXRpb25cbiAgICBFcnJvckNvZGVbXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIl0gPSBcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiO1xuICAgIC8vIE5ldHdvcmsgRXJyb3IgKGkuZS4gRXRoZXJldW0gTmV0d29yaywgc3VjaCBhcyBhbiBpbnZhbGlkIGNoYWluIElEKVxuICAgIC8vICAgLSBldmVudCAoXCJub05ldHdvcmtcIiBpcyBub3QgcmUtdGhyb3duIGluIHByb3ZpZGVyLnJlYWR5OyBvdGhlcndpc2UgdGhyb3duKVxuICAgIEVycm9yQ29kZVtcIk5FVFdPUktfRVJST1JcIl0gPSBcIk5FVFdPUktfRVJST1JcIjtcbiAgICAvLyBTb21lIHNvcnQgb2YgYmFkIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlclxuICAgIEVycm9yQ29kZVtcIlNFUlZFUl9FUlJPUlwiXSA9IFwiU0VSVkVSX0VSUk9SXCI7XG4gICAgLy8gVGltZW91dFxuICAgIEVycm9yQ29kZVtcIlRJTUVPVVRcIl0gPSBcIlRJTUVPVVRcIjtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gT3BlcmF0aW9uYWwgIEVycm9yc1xuICAgIC8vIEJ1ZmZlciBPdmVycnVuXG4gICAgRXJyb3JDb2RlW1wiQlVGRkVSX09WRVJSVU5cIl0gPSBcIkJVRkZFUl9PVkVSUlVOXCI7XG4gICAgLy8gTnVtZXJpYyBGYXVsdFxuICAgIC8vICAgLSBvcGVyYXRpb246IHRoZSBvcGVyYXRpb24gYmVpbmcgZXhlY3V0ZWRcbiAgICAvLyAgIC0gZmF1bHQ6IHRoZSByZWFzb24gdGhpcyBmYXVsdGVkXG4gICAgRXJyb3JDb2RlW1wiTlVNRVJJQ19GQVVMVFwiXSA9IFwiTlVNRVJJQ19GQVVMVFwiO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBBcmd1bWVudCBFcnJvcnNcbiAgICAvLyBNaXNzaW5nIG5ldyBvcGVyYXRvciB0byBhbiBvYmplY3RcbiAgICAvLyAgLSBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgY2xhc3NcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX05FV1wiXSA9IFwiTUlTU0lOR19ORVdcIjtcbiAgICAvLyBJbnZhbGlkIGFyZ3VtZW50IChlLmcuIHZhbHVlIGlzIGluY29tcGF0aWJsZSB3aXRoIHR5cGUpIHRvIGEgZnVuY3Rpb246XG4gICAgLy8gICAtIGFyZ3VtZW50OiBUaGUgYXJndW1lbnQgbmFtZSB0aGF0IHdhcyBpbnZhbGlkXG4gICAgLy8gICAtIHZhbHVlOiBUaGUgdmFsdWUgb2YgdGhlIGFyZ3VtZW50XG4gICAgRXJyb3JDb2RlW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiO1xuICAgIC8vIE1pc3NpbmcgYXJndW1lbnQgdG8gYSBmdW5jdGlvbjpcbiAgICAvLyAgIC0gY291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHJlY2VpdmVkXG4gICAgLy8gICAtIGV4cGVjdGVkQ291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGV4cGVjdGVkXG4gICAgRXJyb3JDb2RlW1wiTUlTU0lOR19BUkdVTUVOVFwiXSA9IFwiTUlTU0lOR19BUkdVTUVOVFwiO1xuICAgIC8vIFRvbyBtYW55IGFyZ3VtZW50c1xuICAgIC8vICAgLSBjb3VudDogVGhlIG51bWJlciBvZiBhcmd1bWVudHMgcmVjZWl2ZWRcbiAgICAvLyAgIC0gZXhwZWN0ZWRDb3VudDogVGhlIG51bWJlciBvZiBhcmd1bWVudHMgZXhwZWN0ZWRcbiAgICBFcnJvckNvZGVbXCJVTkVYUEVDVEVEX0FSR1VNRU5UXCJdID0gXCJVTkVYUEVDVEVEX0FSR1VNRU5UXCI7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEJsb2NrY2hhaW4gRXJyb3JzXG4gICAgLy8gQ2FsbCBleGNlcHRpb25cbiAgICAvLyAgLSB0cmFuc2FjdGlvbjogdGhlIHRyYW5zYWN0aW9uXG4gICAgLy8gIC0gYWRkcmVzcz86IHRoZSBjb250cmFjdCBhZGRyZXNzXG4gICAgLy8gIC0gYXJncz86IFRoZSBhcmd1bWVudHMgcGFzc2VkIGludG8gdGhlIGZ1bmN0aW9uXG4gICAgLy8gIC0gbWV0aG9kPzogVGhlIFNvbGlkaXR5IG1ldGhvZCBzaWduYXR1cmVcbiAgICAvLyAgLSBlcnJvclNpZ25hdHVyZT86IFRoZSBFSVA4NDggZXJyb3Igc2lnbmF0dXJlXG4gICAgLy8gIC0gZXJyb3JBcmdzPzogVGhlIEVJUDg0OCBlcnJvciBwYXJhbWV0ZXJzXG4gICAgLy8gIC0gcmVhc29uOiBUaGUgcmVhc29uIChvbmx5IGZvciBFSVA4NDggXCJFcnJvcihzdHJpbmcpXCIpXG4gICAgRXJyb3JDb2RlW1wiQ0FMTF9FWENFUFRJT05cIl0gPSBcIkNBTExfRVhDRVBUSU9OXCI7XG4gICAgLy8gSW5zdWZmaWNpZW50IGZ1bmRzICg8IHZhbHVlICsgZ2FzTGltaXQgKiBnYXNQcmljZSlcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBhdHRlbXB0ZWRcbiAgICBFcnJvckNvZGVbXCJJTlNVRkZJQ0lFTlRfRlVORFNcIl0gPSBcIklOU1VGRklDSUVOVF9GVU5EU1wiO1xuICAgIC8vIE5vbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZFxuICAgIC8vICAgLSB0cmFuc2FjdGlvbjogdGhlIHRyYW5zYWN0aW9uIGF0dGVtcHRlZFxuICAgIEVycm9yQ29kZVtcIk5PTkNFX0VYUElSRURcIl0gPSBcIk5PTkNFX0VYUElSRURcIjtcbiAgICAvLyBUaGUgcmVwbGFjZW1lbnQgZmVlIGZvciB0aGUgdHJhbnNhY3Rpb24gaXMgdG9vIGxvd1xuICAgIC8vICAgLSB0cmFuc2FjdGlvbjogdGhlIHRyYW5zYWN0aW9uIGF0dGVtcHRlZFxuICAgIEVycm9yQ29kZVtcIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXCJdID0gXCJSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRFwiO1xuICAgIC8vIFRoZSBnYXMgbGltaXQgY291bGQgbm90IGJlIGVzdGltYXRlZFxuICAgIC8vICAgLSB0cmFuc2FjdGlvbjogdGhlIHRyYW5zYWN0aW9uIHBhc3NlZCB0byBlc3RpbWF0ZUdhc1xuICAgIEVycm9yQ29kZVtcIlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUXCJdID0gXCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVFwiO1xuICAgIC8vIFRoZSB0cmFuc2FjdGlvbiB3YXMgcmVwbGFjZWQgYnkgb25lIHdpdGggYSBoaWdoZXIgZ2FzIHByaWNlXG4gICAgLy8gICAtIHJlYXNvbjogXCJjYW5jZWxsZWRcIiwgXCJyZXBsYWNlZFwiIG9yIFwicmVwcmljZWRcIlxuICAgIC8vICAgLSBjYW5jZWxsZWQ6IHRydWUgaWYgcmVhc29uID09IFwiY2FuY2VsbGVkXCIgb3IgcmVhc29uID09IFwicmVwbGFjZWRcIilcbiAgICAvLyAgIC0gaGFzaDogb3JpZ2luYWwgdHJhbnNhY3Rpb24gaGFzaFxuICAgIC8vICAgLSByZXBsYWNlbWVudDogdGhlIGZ1bGwgVHJhbnNhY3Rpb25zUmVzcG9uc2UgZm9yIHRoZSByZXBsYWNlbWVudFxuICAgIC8vICAgLSByZWNlaXB0OiB0aGUgcmVjZWlwdCBvZiB0aGUgcmVwbGFjZW1lbnRcbiAgICBFcnJvckNvZGVbXCJUUkFOU0FDVElPTl9SRVBMQUNFRFwiXSA9IFwiVFJBTlNBQ1RJT05fUkVQTEFDRURcIjtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gSW50ZXJhY3Rpb24gRXJyb3JzXG4gICAgLy8gVGhlIHVzZXIgcmVqZWN0ZWQgdGhlIGFjdGlvbiwgc3VjaCBhcyBzaWduaW5nIGEgbWVzc2FnZSBvciBzZW5kaW5nXG4gICAgLy8gYSB0cmFuc2FjdGlvblxuICAgIEVycm9yQ29kZVtcIkFDVElPTl9SRUpFQ1RFRFwiXSA9IFwiQUNUSU9OX1JFSkVDVEVEXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG47XG5jb25zdCBIRVggPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidmVyc2lvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZlcnNpb24sXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9sb2cobG9nTGV2ZWwsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBsb2dMZXZlbC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoTG9nTGV2ZWxzW2xldmVsXSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbG9nIGxldmVsIG5hbWVcIiwgXCJsb2dMZXZlbFwiLCBsb2dMZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9sb2dMZXZlbCA+IExvZ0xldmVsc1tsZXZlbF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9XG4gICAgZGVidWcoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5ERUJVRywgYXJncyk7XG4gICAgfVxuICAgIGluZm8oLi4uYXJncykge1xuICAgICAgICB0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5JTkZPLCBhcmdzKTtcbiAgICB9XG4gICAgd2FybiguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2xvZyhMb2dnZXIubGV2ZWxzLldBUk5JTkcsIGFyZ3MpO1xuICAgIH1cbiAgICBtYWtlRXJyb3IobWVzc2FnZSwgY29kZSwgcGFyYW1zKSB7XG4gICAgICAgIC8vIEVycm9ycyBhcmUgYmVpbmcgY2Vuc29yZWRcbiAgICAgICAgaWYgKF9jZW5zb3JFcnJvcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VFcnJvcihcImNlbnNvcmVkIGVycm9yXCIsIGNvZGUsIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvZGUpIHtcbiAgICAgICAgICAgIGNvZGUgPSBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VEZXRhaWxzID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBoZXggPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXggKz0gSEVYW3ZhbHVlW2ldID4+IDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGV4ICs9IEhFWFt2YWx1ZVtpXSAmIDB4MGZdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VEZXRhaWxzLnB1c2goa2V5ICsgXCI9VWludDhBcnJheSgweFwiICsgaGV4ICsgXCIpXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZURldGFpbHMucHVzaChrZXkgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZURldGFpbHMucHVzaChrZXkgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KHBhcmFtc1trZXldLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1lc3NhZ2VEZXRhaWxzLnB1c2goYGNvZGU9JHtjb2RlfWApO1xuICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGB2ZXJzaW9uPSR7dGhpcy52ZXJzaW9ufWApO1xuICAgICAgICBjb25zdCByZWFzb24gPSBtZXNzYWdlO1xuICAgICAgICBsZXQgdXJsID0gXCJcIjtcbiAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5OVU1FUklDX0ZBVUxUOiB7XG4gICAgICAgICAgICAgICAgdXJsID0gXCJOVU1FUklDX0ZBVUxUXCI7XG4gICAgICAgICAgICAgICAgY29uc3QgZmF1bHQgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm92ZXJmbG93XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlcmZsb3dcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRpdmlzaW9uLWJ5LXplcm9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSBcIi1cIiArIGZhdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuZWdhdGl2ZS1wb3dlclwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmVnYXRpdmUtd2lkdGhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSBcIi11bnN1cHBvcnRlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmJvdW5kLWJpdHdpc2UtcmVzdWx0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gXCItdW5ib3VuZC1yZXN1bHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLkNBTExfRVhDRVBUSU9OOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuSU5TVUZGSUNJRU5UX0ZVTkRTOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuTUlTU0lOR19ORVc6XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5OT05DRV9FWFBJUkVEOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQ6XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5UUkFOU0FDVElPTl9SRVBMQUNFRDpcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUOlxuICAgICAgICAgICAgICAgIHVybCA9IGNvZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIiBbIFNlZTogaHR0cHM6L1xcL2xpbmtzLmV0aGVycy5vcmcvdjUtZXJyb3JzLVwiICsgdXJsICsgXCIgXVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlRGV0YWlscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgKFwiICsgbWVzc2FnZURldGFpbHMuam9pbihcIiwgXCIpICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQFRPRE86IEFueT8/XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5yZWFzb24gPSByZWFzb247XG4gICAgICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZXJyb3Jba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgICB0aHJvd0Vycm9yKG1lc3NhZ2UsIGNvZGUsIHBhcmFtcykge1xuICAgICAgICB0aHJvdyB0aGlzLm1ha2VFcnJvcihtZXNzYWdlLCBjb2RlLCBwYXJhbXMpO1xuICAgIH1cbiAgICB0aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgIGFyZ3VtZW50OiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlLCBjb2RlLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKCEhY29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIGNvZGUsIHBhcmFtcyk7XG4gICAgfVxuICAgIGFzc2VydEFyZ3VtZW50KGNvbmRpdGlvbiwgbWVzc2FnZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEhY29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgbmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBjaGVja05vcm1hbGl6ZShtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcInBsYXRmb3JtIG1pc3NpbmcgU3RyaW5nLnByb3RvdHlwZS5ub3JtYWxpemVcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX25vcm1hbGl6ZUVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IoXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIlN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsIGZvcm06IF9ub3JtYWxpemVFcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tTYWZlVWludDUzKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcInZhbHVlIG5vdCBzYWZlXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+PSAweDFmZmZmZmZmZmZmZmZmKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNoZWNrU2FmZUludGVnZXJcIixcbiAgICAgICAgICAgICAgICBmYXVsdDogXCJvdXQtb2Ytc2FmZS1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICUgMSkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJjaGVja1NhZmVJbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgZmF1bHQ6IFwibm9uLWludGVnZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQXJndW1lbnRDb3VudChjb3VudCwgZXhwZWN0ZWRDb3VudCwgbWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IFwiOiBcIiArIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQgPCBleHBlY3RlZENvdW50KSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIGFyZ3VtZW50XCIgKyBtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID4gZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwidG9vIG1hbnkgYXJndW1lbnRzXCIgKyBtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tOZXcodGFyZ2V0LCBraW5kKSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tBYnN0cmFjdCh0YXJnZXQsIGtpbmQpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0ga2luZCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwiY2Fubm90IGluc3RhbnRpYXRlIGFic3RyYWN0IGNsYXNzIFwiICsgSlNPTi5zdHJpbmdpZnkoa2luZC5uYW1lKSArIFwiIGRpcmVjdGx5OyB1c2UgYSBzdWItY2xhc3NcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgbmFtZTogdGFyZ2V0Lm5hbWUsIG9wZXJhdGlvbjogXCJuZXdcIiB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGdsb2JhbExvZ2dlcigpIHtcbiAgICAgICAgaWYgKCFfZ2xvYmFsTG9nZ2VyKSB7XG4gICAgICAgICAgICBfZ2xvYmFsTG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2dsb2JhbExvZ2dlcjtcbiAgICB9XG4gICAgc3RhdGljIHNldENlbnNvcnNoaXAoY2Vuc29yc2hpcCwgcGVybWFuZW50KSB7XG4gICAgICAgIGlmICghY2Vuc29yc2hpcCAmJiBwZXJtYW5lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTG9nZ2VyKCkudGhyb3dFcnJvcihcImNhbm5vdCBwZXJtYW5lbnRseSBkaXNhYmxlIGNlbnNvcnNoaXBcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2V0Q2Vuc29yc2hpcFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3Blcm1hbmVudENlbnNvckVycm9ycykge1xuICAgICAgICAgICAgaWYgKCFjZW5zb3JzaGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbG9iYWxMb2dnZXIoKS50aHJvd0Vycm9yKFwiZXJyb3IgY2Vuc29yc2hpcCBwZXJtYW5lbnRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2V0Q2Vuc29yc2hpcFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfY2Vuc29yRXJyb3JzID0gISFjZW5zb3JzaGlwO1xuICAgICAgICBfcGVybWFuZW50Q2Vuc29yRXJyb3JzID0gISFwZXJtYW5lbnQ7XG4gICAgfVxuICAgIHN0YXRpYyBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xuICAgICAgICBjb25zdCBsZXZlbCA9IExvZ0xldmVsc1tsb2dMZXZlbC50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgaWYgKGxldmVsID09IG51bGwpIHtcbiAgICAgICAgICAgIExvZ2dlci5nbG9iYWxMb2dnZXIoKS53YXJuKFwiaW52YWxpZCBsb2cgbGV2ZWwgLSBcIiArIGxvZ0xldmVsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfbG9nTGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgc3RhdGljIGZyb20odmVyc2lvbikge1xuICAgICAgICByZXR1cm4gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbiAgICB9XG59XG5Mb2dnZXIuZXJyb3JzID0gRXJyb3JDb2RlO1xuTG9nZ2VyLmxldmVscyA9IExvZ0xldmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9wZXJtYW5lbnRDZW5zb3JFcnJvcnMiLCJfY2Vuc29yRXJyb3JzIiwiTG9nTGV2ZWxzIiwiZGVidWciLCJpbmZvIiwid2FybmluZyIsImVycm9yIiwib2ZmIiwiX2xvZ0xldmVsIiwidmVyc2lvbiIsIl9nbG9iYWxMb2dnZXIiLCJfY2hlY2tOb3JtYWxpemUiLCJtaXNzaW5nIiwiZm9yRWFjaCIsImZvcm0iLCJub3JtYWxpemUiLCJFcnJvciIsInB1c2giLCJsZW5ndGgiLCJqb2luIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibWVzc2FnZSIsIl9ub3JtYWxpemVFcnJvciIsIkxvZ0xldmVsIiwiRXJyb3JDb2RlIiwiSEVYIiwiTG9nZ2VyIiwiX2xvZyIsImxvZ0xldmVsIiwiYXJncyIsImxldmVsIiwidG9Mb3dlckNhc2UiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJjb25zb2xlIiwibG9nIiwiYXBwbHkiLCJsZXZlbHMiLCJERUJVRyIsIklORk8iLCJ3YXJuIiwiV0FSTklORyIsIm1ha2VFcnJvciIsImNvZGUiLCJwYXJhbXMiLCJlcnJvcnMiLCJVTktOT1dOX0VSUk9SIiwibWVzc2FnZURldGFpbHMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwidmFsdWUiLCJVaW50OEFycmF5IiwiaGV4IiwiaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b1N0cmluZyIsInJlYXNvbiIsInVybCIsIk5VTUVSSUNfRkFVTFQiLCJmYXVsdCIsIkNBTExfRVhDRVBUSU9OIiwiSU5TVUZGSUNJRU5UX0ZVTkRTIiwiTUlTU0lOR19ORVciLCJOT05DRV9FWFBJUkVEIiwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQiLCJUUkFOU0FDVElPTl9SRVBMQUNFRCIsIlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUIiwidGhyb3dFcnJvciIsIm5hbWUiLCJJTlZBTElEX0FSR1VNRU5UIiwiYXJndW1lbnQiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJhc3NlcnRBcmd1bWVudCIsImNoZWNrTm9ybWFsaXplIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwib3BlcmF0aW9uIiwiY2hlY2tTYWZlVWludDUzIiwiY2hlY2tBcmd1bWVudENvdW50IiwiY291bnQiLCJleHBlY3RlZENvdW50IiwiTUlTU0lOR19BUkdVTUVOVCIsIlVORVhQRUNURURfQVJHVU1FTlQiLCJjaGVja05ldyIsInRhcmdldCIsImtpbmQiLCJjaGVja0Fic3RyYWN0IiwiZ2xvYmFsTG9nZ2VyIiwic2V0Q2Vuc29yc2hpcCIsImNlbnNvcnNoaXAiLCJwZXJtYW5lbnQiLCJzZXRMb2dMZXZlbCIsImZyb20iLCJjb25zdHJ1Y3RvciIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/networks/lib.esm/_version.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"networks/5.7.1\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9uZXR3b3Jrcy9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLGlCQUFpQixDQUN4QyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L25ldHdvcmtzL2xpYi5lc20vX3ZlcnNpb24uanM/Yjc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwibmV0d29ya3MvNS43LjFcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/networks/lib.esm/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNetwork: function() { return /* binding */ getNetwork; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/_version.js\");\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n;\nfunction isRenetworkable(value) {\n    return value && typeof value.renetwork === \"function\";\n}\nfunction ethDefaultProvider(network) {\n    const func = function(providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch (error) {}\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch (error) {}\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch (error) {}\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\n                \"goerli\",\n                \"ropsten\",\n                \"rinkeby\",\n                \"sepolia\"\n            ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch (error) {}\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch (error) {}\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\n                    \"ropsten\"\n                ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch (error) {}\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function(network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function(providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function(network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: {\n        chainId: 0,\n        name: \"unspecified\"\n    },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: {\n        chainId: 2,\n        name: \"morden\"\n    },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: {\n        chainId: 1337702,\n        name: \"kintsugi\"\n    },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: {\n        chainId: 62,\n        name: \"classicMorden\"\n    },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: {\n        chainId: 100,\n        name: \"xdai\"\n    },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: {\n        chainId: 80001,\n        name: \"maticmum\"\n    },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": {\n        chainId: 69,\n        name: \"optimism-kovan\"\n    },\n    \"optimism-goerli\": {\n        chainId: 420,\n        name: \"optimism-goerli\"\n    },\n    arbitrum: {\n        chainId: 42161,\n        name: \"arbitrum\"\n    },\n    \"arbitrum-rinkeby\": {\n        chainId: 421611,\n        name: \"arbitrum-rinkeby\"\n    },\n    \"arbitrum-goerli\": {\n        chainId: 421613,\n        name: \"arbitrum-goerli\"\n    },\n    bnb: {\n        chainId: 56,\n        name: \"bnb\"\n    },\n    bnbt: {\n        chainId: 97,\n        name: \"bnbt\"\n    }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */ function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof network === \"number\") {\n        for(const name in networks){\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: standard.ensAddress || null,\n                    _defaultProvider: standard._defaultProvider || null\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof network === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: standard._defaultProvider || null\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof network.chainId !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: network.ensAddress || standard.ensAddress || null,\n        _defaultProvider: defaultProvider\n    };\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: function() { return /* binding */ pbkdf2; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n\n\n\nfunction pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    password = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(password);\n    salt = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen);\n    const block1 = new Uint8Array(salt.length + 4);\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n    let r;\n    let T;\n    for(let i = 1; i <= l; i++){\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = i >> 24 & 0xff;\n        block1[salt.length + 1] = i >> 16 & 0xff;\n        block1[salt.length + 2] = i >> 8 & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n        //let U = createHmac(password).update(block1).digest();\n        let U = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_1__.computeHmac)(hashAlgorithm, password, block1));\n        if (!hLen) {\n            hLen = U.length;\n            T = new Uint8Array(hLen);\n            l = Math.ceil(keylen / hLen);\n            r = keylen - (l - 1) * hLen;\n        }\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n        for(let j = 1; j < iterations; j++){\n            //U = createHmac(password).update(U).digest();\n            U = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_1__.computeHmac)(hashAlgorithm, password, U));\n            for(let k = 0; k < hLen; k++)T[k] ^= U[k];\n        }\n        const destPos = (i - 1) * hLen;\n        const len = i === l ? r : hLen;\n        //T.copy(DK, destPos, 0, len)\n        DK.set((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(T).slice(0, len), destPos);\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.hexlify)(DK);\n} //# sourceMappingURL=pbkdf2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wYmtkZjIvbGliLmVzbS9wYmtkZjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7QUFDNEM7QUFDUDtBQUMzQyxTQUFTRyxPQUFPQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLGFBQWE7SUFDcEVKLFdBQVdKLDhEQUFRQSxDQUFDSTtJQUNwQkMsT0FBT0wsOERBQVFBLENBQUNLO0lBQ2hCLElBQUlJO0lBQ0osSUFBSUMsSUFBSTtJQUNSLE1BQU1DLEtBQUssSUFBSUMsV0FBV0w7SUFDMUIsTUFBTU0sU0FBUyxJQUFJRCxXQUFXUCxLQUFLUyxNQUFNLEdBQUc7SUFDNUNELE9BQU9FLEdBQUcsQ0FBQ1Y7SUFDWCxzQ0FBc0M7SUFDdEMsSUFBSVc7SUFDSixJQUFJQztJQUNKLElBQUssSUFBSUMsSUFBSSxHQUFHQSxLQUFLUixHQUFHUSxJQUFLO1FBQ3pCLHNDQUFzQztRQUN0Q0wsTUFBTSxDQUFDUixLQUFLUyxNQUFNLENBQUMsR0FBRyxLQUFNLEtBQU07UUFDbENELE1BQU0sQ0FBQ1IsS0FBS1MsTUFBTSxHQUFHLEVBQUUsR0FBRyxLQUFNLEtBQU07UUFDdENELE1BQU0sQ0FBQ1IsS0FBS1MsTUFBTSxHQUFHLEVBQUUsR0FBRyxLQUFNLElBQUs7UUFDckNELE1BQU0sQ0FBQ1IsS0FBS1MsTUFBTSxHQUFHLEVBQUUsR0FBR0ksSUFBSTtRQUM5Qix1REFBdUQ7UUFDdkQsSUFBSUMsSUFBSW5CLDhEQUFRQSxDQUFDRSxnRUFBV0EsQ0FBQ00sZUFBZUosVUFBVVM7UUFDdEQsSUFBSSxDQUFDSixNQUFNO1lBQ1BBLE9BQU9VLEVBQUVMLE1BQU07WUFDZkcsSUFBSSxJQUFJTCxXQUFXSDtZQUNuQkMsSUFBSVUsS0FBS0MsSUFBSSxDQUFDZCxTQUFTRTtZQUN2Qk8sSUFBSVQsU0FBUyxDQUFDRyxJQUFJLEtBQUtEO1FBQzNCO1FBQ0EsdUJBQXVCO1FBQ3ZCUSxFQUFFRixHQUFHLENBQUNJO1FBQ04sSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUloQixZQUFZZ0IsSUFBSztZQUNqQyw4Q0FBOEM7WUFDOUNILElBQUluQiw4REFBUUEsQ0FBQ0UsZ0VBQVdBLENBQUNNLGVBQWVKLFVBQVVlO1lBQ2xELElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJZCxNQUFNYyxJQUN0Qk4sQ0FBQyxDQUFDTSxFQUFFLElBQUlKLENBQUMsQ0FBQ0ksRUFBRTtRQUNwQjtRQUNBLE1BQU1DLFVBQVUsQ0FBQ04sSUFBSSxLQUFLVDtRQUMxQixNQUFNZ0IsTUFBT1AsTUFBTVIsSUFBSU0sSUFBSVA7UUFDM0IsNkJBQTZCO1FBQzdCRSxHQUFHSSxHQUFHLENBQUNmLDhEQUFRQSxDQUFDaUIsR0FBR1MsS0FBSyxDQUFDLEdBQUdELE1BQU1EO0lBQ3RDO0lBQ0EsT0FBT3ZCLDZEQUFPQSxDQUFDVTtBQUNuQixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcGJrZGYyL2xpYi5lc20vcGJrZGYyLmpzPzMwNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgY29tcHV0ZUhtYWMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2hhMlwiO1xuZXhwb3J0IGZ1bmN0aW9uIHBia2RmMihwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBoYXNoQWxnb3JpdGhtKSB7XG4gICAgcGFzc3dvcmQgPSBhcnJheWlmeShwYXNzd29yZCk7XG4gICAgc2FsdCA9IGFycmF5aWZ5KHNhbHQpO1xuICAgIGxldCBoTGVuO1xuICAgIGxldCBsID0gMTtcbiAgICBjb25zdCBESyA9IG5ldyBVaW50OEFycmF5KGtleWxlbik7XG4gICAgY29uc3QgYmxvY2sxID0gbmV3IFVpbnQ4QXJyYXkoc2FsdC5sZW5ndGggKyA0KTtcbiAgICBibG9jazEuc2V0KHNhbHQpO1xuICAgIC8vc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG4gICAgbGV0IHI7XG4gICAgbGV0IFQ7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbDsgaSsrKSB7XG4gICAgICAgIC8vYmxvY2sxLndyaXRlVUludDMyQkUoaSwgc2FsdC5sZW5ndGgpXG4gICAgICAgIGJsb2NrMVtzYWx0Lmxlbmd0aF0gPSAoaSA+PiAyNCkgJiAweGZmO1xuICAgICAgICBibG9jazFbc2FsdC5sZW5ndGggKyAxXSA9IChpID4+IDE2KSAmIDB4ZmY7XG4gICAgICAgIGJsb2NrMVtzYWx0Lmxlbmd0aCArIDJdID0gKGkgPj4gOCkgJiAweGZmO1xuICAgICAgICBibG9jazFbc2FsdC5sZW5ndGggKyAzXSA9IGkgJiAweGZmO1xuICAgICAgICAvL2xldCBVID0gY3JlYXRlSG1hYyhwYXNzd29yZCkudXBkYXRlKGJsb2NrMSkuZGlnZXN0KCk7XG4gICAgICAgIGxldCBVID0gYXJyYXlpZnkoY29tcHV0ZUhtYWMoaGFzaEFsZ29yaXRobSwgcGFzc3dvcmQsIGJsb2NrMSkpO1xuICAgICAgICBpZiAoIWhMZW4pIHtcbiAgICAgICAgICAgIGhMZW4gPSBVLmxlbmd0aDtcbiAgICAgICAgICAgIFQgPSBuZXcgVWludDhBcnJheShoTGVuKTtcbiAgICAgICAgICAgIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbik7XG4gICAgICAgICAgICByID0ga2V5bGVuIC0gKGwgLSAxKSAqIGhMZW47XG4gICAgICAgIH1cbiAgICAgICAgLy9VLmNvcHkoVCwgMCwgMCwgaExlbilcbiAgICAgICAgVC5zZXQoVSk7XG4gICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgaXRlcmF0aW9uczsgaisrKSB7XG4gICAgICAgICAgICAvL1UgPSBjcmVhdGVIbWFjKHBhc3N3b3JkKS51cGRhdGUoVSkuZGlnZXN0KCk7XG4gICAgICAgICAgICBVID0gYXJyYXlpZnkoY29tcHV0ZUhtYWMoaGFzaEFsZ29yaXRobSwgcGFzc3dvcmQsIFUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaExlbjsgaysrKVxuICAgICAgICAgICAgICAgIFRba10gXj0gVVtrXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXN0UG9zID0gKGkgLSAxKSAqIGhMZW47XG4gICAgICAgIGNvbnN0IGxlbiA9IChpID09PSBsID8gciA6IGhMZW4pO1xuICAgICAgICAvL1QuY29weShESywgZGVzdFBvcywgMCwgbGVuKVxuICAgICAgICBESy5zZXQoYXJyYXlpZnkoVCkuc2xpY2UoMCwgbGVuKSwgZGVzdFBvcyk7XG4gICAgfVxuICAgIHJldHVybiBoZXhsaWZ5KERLKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBia2RmMi5qcy5tYXAiXSwibmFtZXMiOlsiYXJyYXlpZnkiLCJoZXhsaWZ5IiwiY29tcHV0ZUhtYWMiLCJwYmtkZjIiLCJwYXNzd29yZCIsInNhbHQiLCJpdGVyYXRpb25zIiwia2V5bGVuIiwiaGFzaEFsZ29yaXRobSIsImhMZW4iLCJsIiwiREsiLCJVaW50OEFycmF5IiwiYmxvY2sxIiwibGVuZ3RoIiwic2V0IiwiciIsIlQiLCJpIiwiVSIsIk1hdGgiLCJjZWlsIiwiaiIsImsiLCJkZXN0UG9zIiwibGVuIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/properties/lib.esm/_version.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"properties/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsbUJBQW1CLENBQzFDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvcGVydGllcy9saWIuZXNtL192ZXJzaW9uLmpzPzMyYmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInByb3BlcnRpZXMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/properties/lib.esm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Description: function() { return /* binding */ Description; },\n/* harmony export */   checkProperties: function() { return /* binding */ checkProperties; },\n/* harmony export */   deepCopy: function() { return /* binding */ deepCopy; },\n/* harmony export */   defineReadOnly: function() { return /* binding */ defineReadOnly; },\n/* harmony export */   getStatic: function() { return /* binding */ getStatic; },\n/* harmony export */   resolveProperties: function() { return /* binding */ resolveProperties; },\n/* harmony export */   shallowCopy: function() { return /* binding */ shallowCopy; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false\n    });\n}\n// Crawl up the constructor chain to find a static method\nfunction getStatic(ctor, key) {\n    for(let i = 0; i < 32; i++){\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof ctor.prototype !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nfunction resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const promises = Object.keys(object).map((key)=>{\n            const value = object[key];\n            return Promise.resolve(value).then((v)=>({\n                    key: key,\n                    value: v\n                }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result)=>{\n            accum[result.key] = result.value;\n            return accum;\n        }, {});\n    });\n}\nfunction checkProperties(object, properties) {\n    if (!object || typeof object !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key)=>{\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nfunction shallowCopy(object) {\n    const result = {};\n    for(const key in object){\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = {\n    bigint: true,\n    boolean: true,\n    \"function\": true,\n    number: true,\n    string: true\n};\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof object]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof object === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for(let i = 0; i < keys.length; i++){\n            let value = null;\n            try {\n                value = object[keys[i]];\n            } catch (error) {\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(\"Cannot deepCopy \".concat(typeof object), \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item)=>deepCopy(item)));\n    }\n    if (typeof object === \"object\") {\n        const result = {};\n        for(const key in object){\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"Cannot deepCopy \".concat(typeof object), \"object\", object);\n}\nfunction deepCopy(object) {\n    return _deepCopy(object);\n}\nclass Description {\n    constructor(info){\n        for(const key in info){\n            this[key] = deepCopy(info[key]);\n        }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/_version.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"providers/5.7.2\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxrQkFBa0IsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9fdmVyc2lvbi5qcz8wMWJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJwcm92aWRlcnMvNS43LjJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyProvider: function() { return /* binding */ AlchemyProvider; },\n/* harmony export */   AlchemyWebSocketProvider: function() { return /* binding */ AlchemyWebSocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _websocket_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websocket-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nclass AlchemyWebSocketProvider extends _websocket_provider__WEBPACK_IMPORTED_MODULE_2__.WebSocketProvider {\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n    constructor(network, apiKey){\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"apiKey\", provider.apiKey);\n    }\n}\nclass AlchemyProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_4__.UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof apiKey !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch(network.name){\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: \"https:/\" + \"/\" + host + apiKey,\n            throttleCallback: (attempt, url)=>{\n                if (apiKey === defaultApiKey) {\n                    (0,_formatter__WEBPACK_IMPORTED_MODULE_5__.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n} //# sourceMappingURL=alchemy-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9hbGNoZW15LXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWE7QUFDOEM7QUFDVDtBQUNPO0FBQ1Y7QUFDVjtBQUNyQyxNQUFNSyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDNEI7QUFDN0Qsa0VBQWtFO0FBQ2xFLDREQUE0RDtBQUM1RCxpRUFBaUU7QUFDakUsb0NBQW9DO0FBQ3BDLE1BQU1HLGdCQUFnQjtBQUNmLE1BQU1DLGlDQUFpQ04sa0VBQWlCQTtJQVEzRE8sc0JBQXNCO1FBQ2xCLE9BQVEsSUFBSSxDQUFDQyxNQUFNLEtBQUtIO0lBQzVCO0lBVEFJLFlBQVlDLE9BQU8sRUFBRUYsTUFBTSxDQUFFO1FBQ3pCLE1BQU1HLFdBQVcsSUFBSUMsZ0JBQWdCRixTQUFTRjtRQUM5QyxNQUFNSyxNQUFNRixTQUFTRyxVQUFVLENBQUNELEdBQUcsQ0FBQ0UsT0FBTyxDQUFDLFVBQVUsTUFDakRBLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDN0IsS0FBSyxDQUFDRixLQUFLRixTQUFTRCxPQUFPO1FBQzNCWix5RUFBY0EsQ0FBQyxJQUFJLEVBQUUsVUFBVWEsU0FBU0gsTUFBTTtJQUNsRDtBQUlKO0FBQ08sTUFBTUksd0JBQXdCUixzRUFBa0JBO0lBQ25ELE9BQU9ZLHFCQUFxQk4sT0FBTyxFQUFFRixNQUFNLEVBQUU7UUFDekMsT0FBTyxJQUFJRix5QkFBeUJJLFNBQVNGO0lBQ2pEO0lBQ0EsT0FBT1MsVUFBVVQsTUFBTSxFQUFFO1FBQ3JCLElBQUlBLFVBQVUsTUFBTTtZQUNoQixPQUFPSDtRQUNYO1FBQ0EsSUFBSUcsVUFBVSxPQUFRQSxXQUFZLFVBQVU7WUFDeENMLE9BQU9lLGtCQUFrQixDQUFDLGtCQUFrQixVQUFVVjtRQUMxRDtRQUNBLE9BQU9BO0lBQ1g7SUFDQSxPQUFPVyxPQUFPVCxPQUFPLEVBQUVGLE1BQU0sRUFBRTtRQUMzQixJQUFJWSxPQUFPO1FBQ1gsT0FBUVYsUUFBUVcsSUFBSTtZQUNoQixLQUFLO2dCQUNERCxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKLEtBQUs7Z0JBQ0RBLE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKLEtBQUs7Z0JBQ0RBLE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKO2dCQUNJakIsT0FBT2Usa0JBQWtCLENBQUMsdUJBQXVCLFdBQVdJLFNBQVMsQ0FBQyxFQUFFO1FBQ2hGO1FBQ0EsT0FBTztZQUNIQyxXQUFXO1lBQ1hWLEtBQU0sWUFBWSxNQUFNTyxPQUFPWjtZQUMvQmdCLGtCQUFrQixDQUFDQyxTQUFTWjtnQkFDeEIsSUFBSUwsV0FBV0gsZUFBZTtvQkFDMUJOLCtEQUFtQkE7Z0JBQ3ZCO2dCQUNBLE9BQU8yQixRQUFRQyxPQUFPLENBQUM7WUFDM0I7UUFDSjtJQUNKO0lBQ0FwQixzQkFBc0I7UUFDbEIsT0FBUSxJQUFJLENBQUNDLE1BQU0sS0FBS0g7SUFDNUI7QUFDSixFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi5lc20vYWxjaGVteS1wcm92aWRlci5qcz8wYjZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2Zvcm1hdHRlclwiO1xuaW1wb3J0IHsgV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi93ZWJzb2NrZXQtcHJvdmlkZXJcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuLy8gVGhpcyBrZXkgd2FzIHByb3ZpZGVkIHRvIGV0aGVycy5qcyBieSBBbGNoZW15IHRvIGJlIHVzZWQgYnkgdGhlXG4vLyBkZWZhdWx0IHByb3ZpZGVyLCBidXQgaXQgaXMgcmVjb21tZW5kZWQgdGhhdCBmb3IgeW91ciBvd25cbi8vIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLCB0aGF0IHlvdSBhY3F1aXJlIHlvdXIgb3duIEFQSSBrZXkgYXQ6XG4vLyAgIGh0dHBzOi8vZGFzaGJvYXJkLmFsY2hlbXlhcGkuaW9cbmNvbnN0IGRlZmF1bHRBcGlLZXkgPSBcIl9nZzd3U1NpMEtNQnNkS25HVmZIRHVlcTZ4TUI5RWtDXCI7XG5leHBvcnQgY2xhc3MgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgV2ViU29ja2V0UHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKG5ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBBbGNoZW15UHJvdmlkZXIobmV0d29yaywgYXBpS2V5KTtcbiAgICAgICAgY29uc3QgdXJsID0gcHJvdmlkZXIuY29ubmVjdGlvbi51cmwucmVwbGFjZSgvXmh0dHAvaSwgXCJ3c1wiKVxuICAgICAgICAgICAgLnJlcGxhY2UoXCIuYWxjaGVteWFwaS5cIiwgXCIud3MuYWxjaGVteWFwaS5cIik7XG4gICAgICAgIHN1cGVyKHVybCwgcHJvdmlkZXIubmV0d29yayk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYXBpS2V5XCIsIHByb3ZpZGVyLmFwaUtleSk7XG4gICAgfVxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBbGNoZW15UHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXIge1xuICAgIHN0YXRpYyBnZXRXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIobmV0d29yaywgYXBpS2V5KTtcbiAgICB9XG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEFwaUtleTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXBpS2V5ICYmIHR5cGVvZiAoYXBpS2V5KSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYXBpS2V5XCIsIFwiYXBpS2V5XCIsIGFwaUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwaUtleTtcbiAgICB9XG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgbGV0IGhvc3QgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG5ldHdvcmsubmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcImhvbWVzdGVhZFwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1tYWlubmV0LmFsY2hlbXlhcGkuaW8vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZXRoLWdvZXJsaS5nLmFsY2hlbXkuY29tL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seWdvbi1tYWlubmV0LmcuYWxjaGVteS5jb20vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWF0aWNtdW1cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJwb2x5Z29uLW11bWJhaS5nLmFsY2hlbXkuY29tL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiYXJiLW1haW5uZXQuZy5hbGNoZW15LmNvbS92Mi9cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhcmJpdHJ1bS1nb2VybGlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJhcmItZ29lcmxpLmcuYWxjaGVteS5jb20vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJvcHQtbWFpbm5ldC5nLmFsY2hlbXkuY29tL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm9wdGltaXNtLWdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcIm9wdC1nb2VybGkuZy5hbGNoZW15LmNvbS92Mi9cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFsbG93R3ppcDogdHJ1ZSxcbiAgICAgICAgICAgIHVybDogKFwiaHR0cHM6L1wiICsgXCIvXCIgKyBob3N0ICsgYXBpS2V5KSxcbiAgICAgICAgICAgIHRocm90dGxlQ2FsbGJhY2s6IChhdHRlbXB0LCB1cmwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmFwaUtleSA9PT0gZGVmYXVsdEFwaUtleSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxjaGVteS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiZGVmaW5lUmVhZE9ubHkiLCJzaG93VGhyb3R0bGVNZXNzYWdlIiwiV2ViU29ja2V0UHJvdmlkZXIiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiVXJsSnNvblJwY1Byb3ZpZGVyIiwiZGVmYXVsdEFwaUtleSIsIkFsY2hlbXlXZWJTb2NrZXRQcm92aWRlciIsImlzQ29tbXVuaXR5UmVzb3VyY2UiLCJhcGlLZXkiLCJjb25zdHJ1Y3RvciIsIm5ldHdvcmsiLCJwcm92aWRlciIsIkFsY2hlbXlQcm92aWRlciIsInVybCIsImNvbm5lY3Rpb24iLCJyZXBsYWNlIiwiZ2V0V2ViU29ja2V0UHJvdmlkZXIiLCJnZXRBcGlLZXkiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJnZXRVcmwiLCJob3N0IiwibmFtZSIsImFyZ3VtZW50cyIsImFsbG93R3ppcCIsInRocm90dGxlQ2FsbGJhY2siLCJhdHRlbXB0IiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ankr-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/ankr-provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnkrProvider: function() { return /* binding */ AnkrProvider; }\n/* harmony export */ });\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch(name){\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nclass AnkrProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.UrlJsonRpcProvider {\n    isCommunityResource() {\n        return this.apiKey === defaultApiKey;\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const connection = {\n            allowGzip: true,\n            url: \"https://\" + getHost(network.name) + apiKey,\n            throttleCallback: (attempt, url)=>{\n                if (apiKey.apiKey === defaultApiKey) {\n                    (0,_formatter__WEBPACK_IMPORTED_MODULE_3__.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n} //# sourceMappingURL=ankr-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9hbmtyLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWtEO0FBQ1c7QUFDZDtBQUNWO0FBQ3JDLE1BQU1JLFNBQVMsSUFBSUYseURBQU1BLENBQUNDLDZDQUFPQTtBQUNqQyxNQUFNRSxnQkFBZ0I7QUFDdEIsU0FBU0MsUUFBUUMsSUFBSTtJQUNqQixPQUFRQTtRQUNKLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztJQUNmO0lBQ0EsT0FBT0gsT0FBT0ksa0JBQWtCLENBQUMsdUJBQXVCLFFBQVFEO0FBQ3BFO0FBQ08sTUFBTUUscUJBQXFCUixzRUFBa0JBO0lBQ2hEUyxzQkFBc0I7UUFDbEIsT0FBUSxJQUFJLENBQUNDLE1BQU0sS0FBS047SUFDNUI7SUFDQSxPQUFPTyxVQUFVRCxNQUFNLEVBQUU7UUFDckIsSUFBSUEsVUFBVSxNQUFNO1lBQ2hCLE9BQU9OO1FBQ1g7UUFDQSxPQUFPTTtJQUNYO0lBQ0EsT0FBT0UsT0FBT0MsT0FBTyxFQUFFSCxNQUFNLEVBQUU7UUFDM0IsSUFBSUEsVUFBVSxNQUFNO1lBQ2hCQSxTQUFTTjtRQUNiO1FBQ0EsTUFBTVUsYUFBYTtZQUNmQyxXQUFXO1lBQ1hDLEtBQU0sYUFBY1gsUUFBUVEsUUFBUVAsSUFBSSxJQUFJSTtZQUM1Q08sa0JBQWtCLENBQUNDLFNBQVNGO2dCQUN4QixJQUFJTixPQUFPQSxNQUFNLEtBQUtOLGVBQWU7b0JBQ2pDTCwrREFBbUJBO2dCQUN2QjtnQkFDQSxPQUFPb0IsUUFBUUMsT0FBTyxDQUFDO1lBQzNCO1FBQ0o7UUFDQSxJQUFJVixPQUFPVyxhQUFhLElBQUksTUFBTTtZQUM5QlAsV0FBV1EsSUFBSSxHQUFHO1lBQ2xCUixXQUFXUyxRQUFRLEdBQUdiLE9BQU9XLGFBQWE7UUFDOUM7UUFDQSxPQUFPUDtJQUNYO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL2Fua3ItcHJvdmlkZXIuanM/ZmNjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBVcmxKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi91cmwtanNvbi1ycGMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmNvbnN0IGRlZmF1bHRBcGlLZXkgPSBcIjlmN2Q5MjliMDE4Y2RmZmIzMzg1MTdlZmEwNmY1ODM1OWU4NmZmMWZmZDM1MGJjODg5NzM4NTIzNjU5ZTc5NzJcIjtcbmZ1bmN0aW9uIGdldEhvc3QobmFtZSkge1xuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlIFwiaG9tZXN0ZWFkXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoL1wiO1xuICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aF9yb3BzdGVuL1wiO1xuICAgICAgICBjYXNlIFwicmlua2VieVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aF9yaW5rZWJ5L1wiO1xuICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vZXRoX2dvZXJsaS9cIjtcbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vcG9seWdvbi9cIjtcbiAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vYXJiaXRydW0vXCI7XG4gICAgfVxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5hbWVcIiwgbmFtZSk7XG59XG5leHBvcnQgY2xhc3MgQW5rclByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBpc0NvbW11bml0eVJlc291cmNlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KTtcbiAgICB9XG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEFwaUtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VXJsKG5ldHdvcmssIGFwaUtleSkge1xuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleSA9IGRlZmF1bHRBcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHtcbiAgICAgICAgICAgIGFsbG93R3ppcDogdHJ1ZSxcbiAgICAgICAgICAgIHVybDogKFwiaHR0cHM6L1xcL1wiICsgZ2V0SG9zdChuZXR3b3JrLm5hbWUpICsgYXBpS2V5KSxcbiAgICAgICAgICAgIHRocm90dGxlQ2FsbGJhY2s6IChhdHRlbXB0LCB1cmwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXBpS2V5LmFwaUtleSA9PT0gZGVmYXVsdEFwaUtleSkge1xuICAgICAgICAgICAgICAgICAgICBzaG93VGhyb3R0bGVNZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChhcGlLZXkucHJvamVjdFNlY3JldCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnVzZXIgPSBcIlwiO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5wYXNzd29yZCA9IGFwaUtleS5wcm9qZWN0U2VjcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFua3ItcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbInNob3dUaHJvdHRsZU1lc3NhZ2UiLCJVcmxKc29uUnBjUHJvdmlkZXIiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZGVmYXVsdEFwaUtleSIsImdldEhvc3QiLCJuYW1lIiwidGhyb3dBcmd1bWVudEVycm9yIiwiQW5rclByb3ZpZGVyIiwiaXNDb21tdW5pdHlSZXNvdXJjZSIsImFwaUtleSIsImdldEFwaUtleSIsImdldFVybCIsIm5ldHdvcmsiLCJjb25uZWN0aW9uIiwiYWxsb3dHemlwIiwidXJsIiwidGhyb3R0bGVDYWxsYmFjayIsImF0dGVtcHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInByb2plY3RTZWNyZXQiLCJ1c2VyIiwicGFzc3dvcmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ankr-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/base-provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseProvider: function() { return /* binding */ BaseProvider; },\n/* harmony export */   Event: function() { return /* binding */ Event; },\n/* harmony export */   Resolver: function() { return /* binding */ Resolver; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/basex */ \"(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js\");\n/* harmony import */ var _ethersproject_networks__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ethersproject/networks */ \"(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var bech32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bech32 */ \"(app-pages-browser)/./node_modules/bech32/index.js\");\n/* harmony import */ var bech32__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bech32__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\n\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while(topics.length > 0 && topics[topics.length - 1] == null){\n        topics.pop();\n    }\n    return topics.map((topic)=>{\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic)=>{\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic)=>{\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic)=>{\n            return topic === \"null\" ? null : topic;\n        });\n        return comps.length === 1 ? comps[0] : comps;\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof eventName === \"string\") {\n        eventName = eventName.toLowerCase();\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    } else if (_ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__.ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    } else if (eventName && typeof eventName === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return new Date().getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */ const PollableEvents = [\n    \"block\",\n    \"network\",\n    \"pending\",\n    \"poll\"\n];\nclass Event {\n    get event() {\n        switch(this.type){\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n    constructor(tag, listener, once){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"tag\", tag);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"listener\", listener);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": {\n        symbol: \"btc\",\n        p2pkh: 0x00,\n        p2sh: 0x05,\n        prefix: \"bc\"\n    },\n    \"2\": {\n        symbol: \"ltc\",\n        p2pkh: 0x30,\n        p2sh: 0x32,\n        prefix: \"ltc\"\n    },\n    \"3\": {\n        symbol: \"doge\",\n        p2pkh: 0x1e,\n        p2sh: 0x16\n    },\n    \"60\": {\n        symbol: \"eth\",\n        ilk: \"eth\"\n    },\n    \"61\": {\n        symbol: \"etc\",\n        ilk: \"eth\"\n    },\n    \"700\": {\n        symbol: \"xdai\",\n        ilk: \"eth\"\n    }\n};\nfunction bytes32ify(value) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n        data,\n        (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.sha256)((0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_8__.sha256)(data)), 0, 4)\n    ]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs)://(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https)://(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")\n];\nfunction _parseString(result, start) {\n    try {\n        return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8String)(_parseBytes(result, start));\n    } catch (error) {}\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, start, start + 32)).toNumber();\n    const length = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, offset, offset + 32)).toNumber();\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\nfunction numPad(value) {\n    const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if (value.length % 32 === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for(let i = 0; i < datas.length; i++){\n        result.push(null);\n        byteCount += 32;\n    }\n    for(let i = 0; i < datas.length; i++){\n        const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)(result);\n}\nclass Resolver {\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result)=>{\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result).eq(1);\n            }).catch((error)=>{\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                    selector,\n                    (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(this.name),\n                    parameters || \"0x\"\n                ])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                    \"0x9061b923\",\n                    encodeBytes([\n                        (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.dnsEncode)(this.name),\n                        tx.data\n                    ])\n                ]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(result).length % 32 === 4) {\n                    logger.throwError(\"resolver threw error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx,\n                        data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            } catch (error) {\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(\"unsupported coin type: \".concat(coinType), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getAddress(\".concat(coinType, \")\")\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                        [\n                            coinInfo.p2pkh\n                        ],\n                        \"0x\" + p2pkh[2]\n                    ]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                        [\n                            coinInfo.p2sh\n                        ],\n                        \"0x\" + p2sh[2]\n                    ]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32__WEBPACK_IMPORTED_MODULE_0___default().toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32__WEBPACK_IMPORTED_MODULE_0___default().encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === _ethersproject_constants__WEBPACK_IMPORTED_MODULE_11__.HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                } catch (error) {\n                    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(\"invalid or unsupported coin data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const linkage = [\n                {\n                    type: \"name\",\n                    content: this.name\n                }\n            ];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for(let i = 0; i < matchers.length; i++){\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch(scheme){\n                        case \"https\":\n                            linkage.push({\n                                type: \"url\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: avatar\n                            };\n                        case \"data\":\n                            linkage.push({\n                                type: \"data\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: avatar\n                            };\n                        case \"ipfs\":\n                            linkage.push({\n                                type: \"ipfs\",\n                                content: avatar\n                            });\n                            return {\n                                linkage,\n                                url: getIpfsLink(avatar)\n                            };\n                        case \"erc721\":\n                        case \"erc1155\":\n                            {\n                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                                linkage.push({\n                                    type: scheme,\n                                    content: avatar\n                                });\n                                // The owner of this name\n                                const owner = this._resolvedAddress || (yield this.getAddress());\n                                const comps = (match[2] || \"\").split(\"/\");\n                                if (comps.length !== 2) {\n                                    return null;\n                                }\n                                const addr = yield this.provider.formatter.address(comps[0]);\n                                const tokenId = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(comps[1]).toHexString(), 32);\n                                // Check that this account owns the token\n                                if (scheme === \"erc721\") {\n                                    // ownerOf(uint256 tokenId)\n                                    const tokenOwner = this.provider.formatter.callAddress((yield this.provider.call({\n                                        to: addr,\n                                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                            \"0x6352211e\",\n                                            tokenId\n                                        ])\n                                    })));\n                                    if (owner !== tokenOwner) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"owner\",\n                                        content: tokenOwner\n                                    });\n                                } else if (scheme === \"erc1155\") {\n                                    // balanceOf(address owner, uint256 tokenId)\n                                    const balance = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((yield this.provider.call({\n                                        to: addr,\n                                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                            \"0x00fdd58e\",\n                                            (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(owner, 32),\n                                            tokenId\n                                        ])\n                                    })));\n                                    if (balance.isZero()) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"balance\",\n                                        content: balance.toString()\n                                    });\n                                }\n                                // Call the token contract for the metadata URL\n                                const tx = {\n                                    to: this.provider.formatter.address(comps[0]),\n                                    data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                                        selector,\n                                        tokenId\n                                    ])\n                                };\n                                let metadataUrl = _parseString((yield this.provider.call(tx)), 0);\n                                if (metadataUrl == null) {\n                                    return null;\n                                }\n                                linkage.push({\n                                    type: \"metadata-url-base\",\n                                    content: metadataUrl\n                                });\n                                // ERC-1155 allows a generic {id} in the URL\n                                if (scheme === \"erc1155\") {\n                                    metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                    linkage.push({\n                                        type: \"metadata-url-expanded\",\n                                        content: metadataUrl\n                                    });\n                                }\n                                // Transform IPFS metadata links\n                                if (metadataUrl.match(/^ipfs:/i)) {\n                                    metadataUrl = getIpfsLink(metadataUrl);\n                                }\n                                linkage.push({\n                                    type: \"metadata-url\",\n                                    content: metadataUrl\n                                });\n                                // Get the token metadata\n                                const metadata = yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.fetchJson)(metadataUrl);\n                                if (!metadata) {\n                                    return null;\n                                }\n                                linkage.push({\n                                    type: \"metadata\",\n                                    content: JSON.stringify(metadata)\n                                });\n                                // Pull the image URL out\n                                let imageUrl = metadata.image;\n                                if (typeof imageUrl !== \"string\") {\n                                    return null;\n                                }\n                                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                                } else {\n                                    // Transform IPFS link to gateway\n                                    const ipfs = imageUrl.match(matcherIpfs);\n                                    if (ipfs == null) {\n                                        return null;\n                                    }\n                                    linkage.push({\n                                        type: \"url-ipfs\",\n                                        content: imageUrl\n                                    });\n                                    imageUrl = getIpfsLink(imageUrl);\n                                }\n                                linkage.push({\n                                    type: \"url\",\n                                    content: imageUrl\n                                });\n                                return {\n                                    linkage,\n                                    url: imageUrl\n                                };\n                            }\n                    }\n                }\n            } catch (error) {}\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs://\" + _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns://\" + _ethersproject_basex__WEBPACK_IMPORTED_MODULE_7__.Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === 32 * 2) {\n                    return \"bzz://\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === 34 * 2) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = {\n                        \"=\": \"\",\n                        \"+\": \"-\",\n                        \"/\": \"_\"\n                    };\n                    const hash = (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_13__.encode)(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a)=>urlSafe[a]);\n                    return \"sia://\" + hash;\n                }\n            }\n            return logger.throwError(\"invalid or unsupported content hash data\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8Bytes)(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                bytes32ify(64),\n                bytes32ify(keyBytes.length),\n                keyBytes\n            ]);\n            // Pad to word-size (32 bytes)\n            if (keyBytes.length % 32 !== 0) {\n                keyBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.concat)([\n                    keyBytes,\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\", 32 - key.length % 32)\n                ]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_9__.toUtf8String)(hexBytes);\n        });\n    }\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"provider\", provider);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"name\", name);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"address\", provider.formatter.address(address));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_resolvedAddress\", resolvedAddress);\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nclass BaseProvider extends _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_4__.Provider {\n    _ready() {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    } catch (error) {}\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    } else {\n                        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>{\n            return this._ready().then((network)=>{\n                return network;\n            }, (error)=>{\n                // If the network isn't running yet, we will wait\n                if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new _formatter__WEBPACK_IMPORTED_MODULE_14__.Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return (0,_ethersproject_networks__WEBPACK_IMPORTED_MODULE_15__.getNetwork)(network == null ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for(let i = 0; i < urls.length; i++){\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                    data,\n                    sender\n                });\n                const result = yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.fetchJson)({\n                    url: href,\n                    errorPassThrough: true\n                }, json, (value, response)=>{\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = result.message || \"unknown error\";\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                        url,\n                        errorMessage\n                    });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map((m)=>JSON.stringify(m)).join(\", \")), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                urls,\n                errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while(this._internalBlockNumber){\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if (getTime() - result.respTime <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        break;\n                    } catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network)=>null, (error)=>error)\n            }).then((param)=>{\n                let { blockNumber, networkError } = param;\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return {\n                    blockNumber,\n                    reqTime,\n                    respTime\n                };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error)=>{\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            } catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            } else {\n                // Notify all listener for each block that has passed\n                for(let i = this._emitted.block + 1; i <= blockNumber; i++){\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key)=>{\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event)=>{\n                switch(event.type){\n                    case \"tx\":\n                        {\n                            const hash = event.hash;\n                            let runner = this.getTransactionReceipt(hash).then((receipt)=>{\n                                if (!receipt || receipt.blockNumber == null) {\n                                    return null;\n                                }\n                                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                                this.emit(hash, receipt);\n                                return null;\n                            }).catch((error)=>{\n                                this.emit(\"error\", error);\n                            });\n                            runners.push(runner);\n                            break;\n                        }\n                    case \"filter\":\n                        {\n                            // We only allow a single getLogs to be in-flight at a time\n                            if (!event._inflight) {\n                                event._inflight = true;\n                                // This is the first filter for this event, so we want to\n                                // restrict events to events that happened no earlier than now\n                                if (event._lastBlockNumber === -2) {\n                                    event._lastBlockNumber = blockNumber - 1;\n                                }\n                                // Filter from the last *known* event; due to load-balancing\n                                // and some nodes returning updated block numbers before\n                                // indexing events, a logs result with 0 entries cannot be\n                                // trusted and we must retry a range which includes it again\n                                const filter = event.filter;\n                                filter.fromBlock = event._lastBlockNumber + 1;\n                                filter.toBlock = blockNumber;\n                                // Prevent fitler ranges from growing too wild, since it is quite\n                                // likely there just haven't been any events to move the lastBlockNumber.\n                                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                                if (minFromBlock > filter.fromBlock) {\n                                    filter.fromBlock = minFromBlock;\n                                }\n                                if (filter.fromBlock < 0) {\n                                    filter.fromBlock = 0;\n                                }\n                                const runner = this.getLogs(filter).then((logs)=>{\n                                    // Allow the next getLogs\n                                    event._inflight = false;\n                                    if (logs.length === 0) {\n                                        return;\n                                    }\n                                    logs.forEach((log)=>{\n                                        // Only when we get an event for a given block number\n                                        // can we trust the events are indexed\n                                        if (log.blockNumber > event._lastBlockNumber) {\n                                            event._lastBlockNumber = log.blockNumber;\n                                        }\n                                        // Make sure we stall requests to fetch blocks and txs\n                                        this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                        this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                        this.emit(filter, log);\n                                    });\n                                }).catch((error)=>{\n                                    this.emit(\"error\", error);\n                                    // Allow another getLogs (the range was not updated)\n                                    event._inflight = false;\n                                });\n                                runners.push(runner);\n                            }\n                            break;\n                        }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(()=>{\n                this.emit(\"didPoll\", pollId);\n            }).catch((error)=>{\n                this.emit(\"error\", error);\n            });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return logger.throwError(\"provider does not support network detection\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber)=>{\n            this._setFastBlockNumber(blockNumber);\n        }, (error)=>{});\n        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return this._poller != null;\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(()=>{\n                this.poll();\n            }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(()=>{\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(()=>{\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(()=>{\n                this.poll();\n            }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber)=>{\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject)=>{\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function() {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func)=>{\n                        func();\n                    });\n                    return false;\n                };\n                const minedHandler = (receipt)=>{\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(()=>{\n                    this.removeListener(transactionHash, minedHandler);\n                });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber)=>__awaiter(this, void 0, void 0, function*() {\n                            if (done) {\n                                return;\n                            }\n                            // Wait 1 second; this is only used in the case of a fault, so\n                            // we will trade off a little bit of latency for more consistent\n                            // results and fewer JSON-RPC calls\n                            yield stall(1000);\n                            this.getTransactionCount(replaceable.from).then((nonce)=>__awaiter(this, void 0, void 0, function*() {\n                                    if (done) {\n                                        return;\n                                    }\n                                    if (nonce <= replaceable.nonce) {\n                                        lastBlockNumber = blockNumber;\n                                    } else {\n                                        // First check if the transaction was mined\n                                        {\n                                            const mined = yield this.getTransaction(transactionHash);\n                                            if (mined && mined.blockNumber != null) {\n                                                return;\n                                            }\n                                        }\n                                        // First time scanning. We start a little earlier for some\n                                        // wiggle room here to handle the eventually consistent nature\n                                        // of blockchain (e.g. the getTransactionCount was for a\n                                        // different block)\n                                        if (scannedBlock == null) {\n                                            scannedBlock = lastBlockNumber - 3;\n                                            if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                            }\n                                        }\n                                        while(scannedBlock <= blockNumber){\n                                            if (done) {\n                                                return;\n                                            }\n                                            const block = yield this.getBlockWithTransactions(scannedBlock);\n                                            for(let ti = 0; ti < block.transactions.length; ti++){\n                                                const tx = block.transactions[ti];\n                                                // Successfully mined!\n                                                if (tx.hash === transactionHash) {\n                                                    return;\n                                                }\n                                                // Matches our transaction from and nonce; its a replacement\n                                                if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                                    if (done) {\n                                                        return;\n                                                    }\n                                                    // Get the receipt of the replacement\n                                                    const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                                    // Already resolved or rejected (prolly a timeout)\n                                                    if (alreadyDone()) {\n                                                        return;\n                                                    }\n                                                    // The reason we were replaced\n                                                    let reason = \"replaced\";\n                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                        reason = \"repriced\";\n                                                    } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                        reason = \"cancelled\";\n                                                    }\n                                                    // Explain why we were replaced\n                                                    reject(logger.makeError(\"transaction was replaced\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.TRANSACTION_REPLACED, {\n                                                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                                        reason,\n                                                        replacement: this._wrapTransaction(tx),\n                                                        hash: transactionHash,\n                                                        receipt\n                                                    }));\n                                                    return;\n                                                }\n                                            }\n                                            scannedBlock++;\n                                        }\n                                    }\n                                    if (done) {\n                                        return;\n                                    }\n                                    this.once(\"block\", replaceHandler);\n                                }), (error)=>{\n                                if (done) {\n                                    return;\n                                }\n                                this.once(\"block\", replaceHandler);\n                            });\n                        });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(()=>{\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof timeout === \"number\" && timeout > 0) {\n                    const timer = setTimeout(()=>{\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.TIMEOUT, {\n                            timeout: timeout\n                        }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(()=>{\n                        clearTimeout(timer);\n                    });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result).toNumber();\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p)=>(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexValue)(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNKNOWN_ERROR, {\n                expectedHash: tx.hash,\n                returnedHash: hash\n            });\n        }\n        result.wait = (confirms, timeout)=>__awaiter(this, void 0, void 0, function*() {\n                if (confirms == null) {\n                    confirms = 1;\n                }\n                if (timeout == null) {\n                    timeout = 0;\n                }\n                // Get the details to detect replacement\n                let replacement = undefined;\n                if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                        data: tx.data,\n                        from: tx.from,\n                        nonce: tx.nonce,\n                        to: tx.to,\n                        value: tx.value,\n                        startBlock\n                    };\n                }\n                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n                if (receipt == null && confirms === 0) {\n                    return null;\n                }\n                // No longer pending, allow the polling loop to garbage collect this\n                this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                        transactionHash: tx.hash,\n                        transaction: tx,\n                        receipt: receipt\n                    });\n                }\n                return receipt;\n            });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then((t)=>(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", {\n                    signedTransaction: hexTx\n                });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            } catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const values = yield transaction;\n            const tx = {};\n            [\n                \"from\",\n                \"to\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? this._getAddress(v) : null);\n            });\n            [\n                \"gasLimit\",\n                \"gasPrice\",\n                \"maxFeePerGas\",\n                \"maxPriorityFeePerGas\",\n                \"value\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(v) : null);\n            });\n            [\n                \"type\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v != null ? v : null);\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\n                \"data\"\n            ].forEach((key)=>{\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(v) : null);\n            });\n            return this.formatter.transactionRequest((yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)(tx)));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function*() {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\n                \"blockHash\",\n                \"topics\"\n            ].forEach((key)=>{\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\n                \"fromBlock\",\n                \"toBlock\"\n            ].forEach((key)=>{\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter((yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)(result)));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    redirects: attempt,\n                    transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", {\n                transaction,\n                blockTag\n            });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(result) % 32 === 4) {\n                try {\n                    const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 0, 32);\n                    if (!_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 32, 64)).toNumber();\n                    const urlsLength = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, urlsOffset + 32);\n                    for(let u = 0; u < urlsLength; u++){\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction,\n                                data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    const callbackSelector = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataSlice)(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction,\n                            data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexConcat)([\n                            callbackSelector,\n                            encodeBytes([\n                                ccipResult,\n                                extraData\n                            ])\n                        ])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                } catch (error) {\n                    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: {\n                        transaction,\n                        blockTag\n                    },\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const resolved = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(result);\n            } catch (error) {\n                return logger.throwError(\"bad result from backend\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params,\n                    result,\n                    error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            addressOrName = yield addressOrName;\n            if (typeof addressOrName !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            } else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                } catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const block = yield this.perform(\"getBlock\", params);\n                    // Block was not found\n                    if (block == null) {\n                        // For blockhashes, if we didn't say it existed, that blockhash may\n                        // not exist. If we did see it though, perhaps from a log, we know\n                        // it exists, and this node is just not caught up yet.\n                        if (params.blockHash != null) {\n                            if (this._emitted[\"b:\" + params.blockHash] == null) {\n                                return null;\n                            }\n                        }\n                        // For block tags, if we are asking for a future block, we return null\n                        if (params.blockTag != null) {\n                            if (blockNumber > this._emitted.block) {\n                                return null;\n                            }\n                        }\n                        // Retry on the next block\n                        return undefined;\n                    }\n                    // Add transactions\n                    if (includeTransactions) {\n                        let blockNumber = null;\n                        for(let i = 0; i < block.transactions.length; i++){\n                            const tx = block.transactions[i];\n                            if (tx.blockNumber == null) {\n                                tx.confirmations = 0;\n                            } else if (tx.confirmations == null) {\n                                if (blockNumber == null) {\n                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                                }\n                                // Add the confirmations using the fast block number (pessimistic)\n                                let confirmations = blockNumber - tx.blockNumber + 1;\n                                if (confirmations <= 0) {\n                                    confirmations = 1;\n                                }\n                                tx.confirmations = confirmations;\n                            }\n                        }\n                        const blockWithTxs = this.formatter.blockWithTransactions(block);\n                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx)=>this._wrapTransaction(tx));\n                        return blockWithTxs;\n                    }\n                    return this.formatter.block(block);\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n            };\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const result = yield this.perform(\"getTransaction\", params);\n                    if (result == null) {\n                        if (this._emitted[\"t:\" + transactionHash] == null) {\n                            return null;\n                        }\n                        return undefined;\n                    }\n                    const tx = this.formatter.transactionResponse(result);\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n                    } else if (tx.confirmations == null) {\n                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                            confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                    }\n                    return this._wrapTransaction(tx);\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n            };\n            return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_12__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                    const result = yield this.perform(\"getTransactionReceipt\", params);\n                    if (result == null) {\n                        if (this._emitted[\"t:\" + transactionHash] == null) {\n                            return null;\n                        }\n                        return undefined;\n                    }\n                    // \"geth-etc\" returns receipts before they are ready\n                    if (result.blockHash == null) {\n                        return undefined;\n                    }\n                    const receipt = this.formatter.receipt(result);\n                    if (receipt.blockNumber == null) {\n                        receipt.confirmations = 0;\n                    } else if (receipt.confirmations == null) {\n                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = blockNumber - receipt.blockNumber + 1;\n                        if (confirmations <= 0) {\n                            confirmations = 1;\n                        }\n                        receipt.confirmations = confirmations;\n                    }\n                    return receipt;\n                }), {\n                oncePoll: this\n            });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            const params = yield (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.resolveProperties)({\n                filter: this._getFilter(filter)\n            });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log)=>{\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return _formatter__WEBPACK_IMPORTED_MODULE_14__.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function*() {\n            blockTag = yield blockTag;\n            if (typeof blockTag === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let currentName = name;\n            while(true){\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function*() {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation,\n                    network: network.name\n                });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: \"0x0178b8bf\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(name).substring(2)\n                });\n                return this.formatter.callAddress(addrData);\n            } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            } catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(name)) {\n                    throw error;\n                }\n            }\n            if (typeof name !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function*() {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString((yield this.call({\n                to: resolverAddr,\n                data: \"0x691f3431\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(node).substring(2)\n            })), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let resolver = null;\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.isHexString)(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                } catch (error) {\n                    if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString((yield this.call({\n                        to: resolverAddress,\n                        data: \"0x691f3431\" + (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_10__.namehash)(node).substring(2)\n                    })), 0);\n                    resolver = yield this.getResolver(name);\n                } catch (error) {\n                    if (error.code !== _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            } else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.NOT_IMPLEMENTED, {\n            operation: method\n        });\n    }\n    _startEvent(event) {\n        this.polling = this._events.filter((e)=>e.pollable()).length > 0;\n    }\n    _stopEvent(event) {\n        this.polling = this._events.filter((e)=>e.pollable()).length > 0;\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event)=>{\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(()=>{\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event)=>{\n            return event.tag === eventTag;\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event)=>event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event)=>{\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event)=>{\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event)=>{\n            this._stopEvent(event);\n        });\n        return this;\n    }\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */ constructor(network){\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = {\n            block: -2\n        };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"anyNetwork\", network === \"any\");\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error)=>{});\n            // Trigger initial network setting (async)\n            this._ready().catch((error)=>{});\n        } else {\n            const knownNetwork = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.getStatic)(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n} //# sourceMappingURL=base-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9iYXNlLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWE7QUFDYixJQUFJQSxZQUFZLFNBQUssSUFBSSxTQUFJLENBQUNBLFNBQVMsSUFBSyxTQUFVQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsQ0FBQyxFQUFFQyxTQUFTO0lBQ25GLFNBQVNDLE1BQU1DLEtBQUs7UUFBSSxPQUFPQSxpQkFBaUJILElBQUlHLFFBQVEsSUFBSUgsRUFBRSxTQUFVSSxPQUFPO1lBQUlBLFFBQVFEO1FBQVE7SUFBSTtJQUMzRyxPQUFPLElBQUtILENBQUFBLEtBQU1BLENBQUFBLElBQUlLLE9BQU0sQ0FBQyxFQUFHLFNBQVVELE9BQU8sRUFBRUUsTUFBTTtRQUNyRCxTQUFTQyxVQUFVSixLQUFLO1lBQUksSUFBSTtnQkFBRUssS0FBS1AsVUFBVVEsSUFBSSxDQUFDTjtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzFGLFNBQVNDLFNBQVNSLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxTQUFTLENBQUMsUUFBUSxDQUFDRTtZQUFTLEVBQUUsT0FBT08sR0FBRztnQkFBRUosT0FBT0k7WUFBSTtRQUFFO1FBQzdGLFNBQVNGLEtBQUtJLE1BQU07WUFBSUEsT0FBT0MsSUFBSSxHQUFHVCxRQUFRUSxPQUFPVCxLQUFLLElBQUlELE1BQU1VLE9BQU9ULEtBQUssRUFBRVcsSUFBSSxDQUFDUCxXQUFXSTtRQUFXO1FBQzdHSCxLQUFLLENBQUNQLFlBQVlBLFVBQVVjLEtBQUssQ0FBQ2pCLFNBQVNDLGNBQWMsRUFBRSxHQUFHVSxJQUFJO0lBQ3RFO0FBQ0o7QUFDdUU7QUFDUjtBQUNqQjtBQUNPO0FBQ3VGO0FBQ3hGO0FBQ007QUFDTDtBQUNvQztBQUM1QztBQUNzQjtBQUNkO0FBQ3pCO0FBQ21CO0FBQ1Y7QUFDckMsTUFBTXFDLFNBQVMsSUFBSUYseURBQU1BLENBQUNDLDZDQUFPQTtBQUNPO0FBQ3hDLE1BQU1HLHFCQUFxQjtBQUMzQiw4QkFBOEI7QUFDOUIscUJBQXFCO0FBQ3JCLFNBQVNDLFdBQVdDLEtBQUs7SUFDckIsSUFBSUEsU0FBUyxNQUFNO1FBQ2YsT0FBTztJQUNYO0lBQ0EsSUFBSXpCLG1FQUFhQSxDQUFDeUIsV0FBVyxJQUFJO1FBQzdCSixPQUFPSyxrQkFBa0IsQ0FBQyxpQkFBaUIsU0FBU0Q7SUFDeEQ7SUFDQSxPQUFPQSxNQUFNRSxXQUFXO0FBQzVCO0FBQ0EsU0FBU0MsZ0JBQWdCQyxNQUFNO0lBQzNCLHNEQUFzRDtJQUN0REEsU0FBU0EsT0FBT0MsS0FBSztJQUNyQixNQUFPRCxPQUFPRSxNQUFNLEdBQUcsS0FBS0YsTUFBTSxDQUFDQSxPQUFPRSxNQUFNLEdBQUcsRUFBRSxJQUFJLEtBQU07UUFDM0RGLE9BQU9HLEdBQUc7SUFDZDtJQUNBLE9BQU9ILE9BQU9JLEdBQUcsQ0FBQyxDQUFDUjtRQUNmLElBQUlTLE1BQU1DLE9BQU8sQ0FBQ1YsUUFBUTtZQUN0Qiw4QkFBOEI7WUFDOUIsTUFBTVcsU0FBUyxDQUFDO1lBQ2hCWCxNQUFNWSxPQUFPLENBQUMsQ0FBQ1o7Z0JBQ1hXLE1BQU0sQ0FBQ1osV0FBV0MsT0FBTyxHQUFHO1lBQ2hDO1lBQ0EseUNBQXlDO1lBQ3pDLE1BQU1hLFNBQVNDLE9BQU9DLElBQUksQ0FBQ0o7WUFDM0JFLE9BQU9HLElBQUk7WUFDWCxPQUFPSCxPQUFPSSxJQUFJLENBQUM7UUFDdkIsT0FDSztZQUNELE9BQU9sQixXQUFXQztRQUN0QjtJQUNKLEdBQUdpQixJQUFJLENBQUM7QUFDWjtBQUNBLFNBQVNDLGtCQUFrQkMsSUFBSTtJQUMzQixJQUFJQSxTQUFTLElBQUk7UUFDYixPQUFPLEVBQUU7SUFDYjtJQUNBLE9BQU9BLEtBQUtDLEtBQUssQ0FBQyxNQUFNWixHQUFHLENBQUMsQ0FBQ1I7UUFDekIsSUFBSUEsVUFBVSxJQUFJO1lBQ2QsT0FBTyxFQUFFO1FBQ2I7UUFDQSxNQUFNcUIsUUFBUXJCLE1BQU1vQixLQUFLLENBQUMsS0FBS1osR0FBRyxDQUFDLENBQUNSO1lBQ2hDLE9BQVEsVUFBVyxTQUFVLE9BQU9BO1FBQ3hDO1FBQ0EsT0FBUSxNQUFPTSxNQUFNLEtBQUssSUFBS2UsS0FBSyxDQUFDLEVBQUUsR0FBR0E7SUFDOUM7QUFDSjtBQUNBLFNBQVNDLFlBQVlDLFNBQVM7SUFDMUIsSUFBSSxPQUFRQSxjQUFlLFVBQVU7UUFDakNBLFlBQVlBLFVBQVVyQixXQUFXO1FBQ2pDLElBQUkzQixtRUFBYUEsQ0FBQ2dELGVBQWUsSUFBSTtZQUNqQyxPQUFPLFFBQVFBO1FBQ25CO1FBQ0EsSUFBSUEsVUFBVUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHO1lBQy9CLE9BQU9EO1FBQ1g7SUFDSixPQUNLLElBQUlkLE1BQU1DLE9BQU8sQ0FBQ2EsWUFBWTtRQUMvQixPQUFPLGNBQWNwQixnQkFBZ0JvQjtJQUN6QyxPQUNLLElBQUl6RCx1RUFBU0EsQ0FBQzJELFdBQVcsQ0FBQ0YsWUFBWTtRQUN2QzNCLE9BQU84QixJQUFJLENBQUM7UUFDWixNQUFNLElBQUlDLE1BQU07SUFDcEIsT0FDSyxJQUFJSixhQUFhLE9BQVFBLGNBQWUsVUFBVTtRQUNuRCxPQUFPLFlBQWFBLENBQUFBLFVBQVVLLE9BQU8sSUFBSSxHQUFFLElBQUssTUFBTXpCLGdCQUFnQm9CLFVBQVVuQixNQUFNLElBQUksRUFBRTtJQUNoRztJQUNBLE1BQU0sSUFBSXVCLE1BQU0scUJBQXFCSjtBQUN6QztBQUNBLDhCQUE4QjtBQUM5QixnQkFBZ0I7QUFDaEIsU0FBU007SUFDTCxPQUFPLElBQUtDLE9BQVFELE9BQU87QUFDL0I7QUFDQSxTQUFTRSxNQUFNQyxRQUFRO0lBQ25CLE9BQU8sSUFBSTdFLFFBQVEsQ0FBQ0Q7UUFDaEIrRSxXQUFXL0UsU0FBUzhFO0lBQ3hCO0FBQ0o7QUFDQSw4QkFBOEI7QUFDOUIsa0JBQWtCO0FBQ2xCOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsTUFBTUUsaUJBQWlCO0lBQUM7SUFBUztJQUFXO0lBQVc7Q0FBTztBQUN2RCxNQUFNQztJQVFULElBQUlDLFFBQVE7UUFDUixPQUFRLElBQUksQ0FBQ0MsSUFBSTtZQUNiLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUNDLElBQUk7WUFDcEIsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQ0MsTUFBTTtRQUMxQjtRQUNBLE9BQU8sSUFBSSxDQUFDQyxHQUFHO0lBQ25CO0lBQ0EsSUFBSUgsT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDRyxHQUFHLENBQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDakM7SUFDQSxJQUFJa0IsT0FBTztRQUNQLE1BQU1qQixRQUFRLElBQUksQ0FBQ21CLEdBQUcsQ0FBQ3BCLEtBQUssQ0FBQztRQUM3QixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLE1BQU07WUFDbkIsT0FBTztRQUNYO1FBQ0EsT0FBT0EsS0FBSyxDQUFDLEVBQUU7SUFDbkI7SUFDQSxJQUFJa0IsU0FBUztRQUNULE1BQU1sQixRQUFRLElBQUksQ0FBQ21CLEdBQUcsQ0FBQ3BCLEtBQUssQ0FBQztRQUM3QixJQUFJQyxLQUFLLENBQUMsRUFBRSxLQUFLLFVBQVU7WUFDdkIsT0FBTztRQUNYO1FBQ0EsTUFBTU8sVUFBVVAsS0FBSyxDQUFDLEVBQUU7UUFDeEIsTUFBTWpCLFNBQVNjLGtCQUFrQkcsS0FBSyxDQUFDLEVBQUU7UUFDekMsTUFBTWtCLFNBQVMsQ0FBQztRQUNoQixJQUFJbkMsT0FBT0UsTUFBTSxHQUFHLEdBQUc7WUFDbkJpQyxPQUFPbkMsTUFBTSxHQUFHQTtRQUNwQjtRQUNBLElBQUl3QixXQUFXQSxZQUFZLEtBQUs7WUFDNUJXLE9BQU9YLE9BQU8sR0FBR0E7UUFDckI7UUFDQSxPQUFPVztJQUNYO0lBQ0FFLFdBQVc7UUFDUCxPQUFRLElBQUksQ0FBQ0QsR0FBRyxDQUFDaEIsT0FBTyxDQUFDLFFBQVEsS0FBS1UsZUFBZVYsT0FBTyxDQUFDLElBQUksQ0FBQ2dCLEdBQUcsS0FBSztJQUM5RTtJQTVDQUUsWUFBWUYsR0FBRyxFQUFFRyxRQUFRLEVBQUVDLElBQUksQ0FBRTtRQUM3QjNELHlFQUFjQSxDQUFDLElBQUksRUFBRSxPQUFPdUQ7UUFDNUJ2RCx5RUFBY0EsQ0FBQyxJQUFJLEVBQUUsWUFBWTBEO1FBQ2pDMUQseUVBQWNBLENBQUMsSUFBSSxFQUFFLFFBQVEyRDtRQUM3QixJQUFJLENBQUNDLGdCQUFnQixHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7SUFDckI7QUF1Q0o7O0FBRUEsZ0VBQWdFO0FBQ2hFLE1BQU1DLFlBQVk7SUFDZCxLQUFLO1FBQUVDLFFBQVE7UUFBT0MsT0FBTztRQUFNQyxNQUFNO1FBQU1DLFFBQVE7SUFBSztJQUM1RCxLQUFLO1FBQUVILFFBQVE7UUFBT0MsT0FBTztRQUFNQyxNQUFNO1FBQU1DLFFBQVE7SUFBTTtJQUM3RCxLQUFLO1FBQUVILFFBQVE7UUFBUUMsT0FBTztRQUFNQyxNQUFNO0lBQUs7SUFDL0MsTUFBTTtRQUFFRixRQUFRO1FBQU9JLEtBQUs7SUFBTTtJQUNsQyxNQUFNO1FBQUVKLFFBQVE7UUFBT0ksS0FBSztJQUFNO0lBQ2xDLE9BQU87UUFBRUosUUFBUTtRQUFRSSxLQUFLO0lBQU07QUFDeEM7QUFDQSxTQUFTQyxXQUFXcEcsS0FBSztJQUNyQixPQUFPMEIsZ0VBQVVBLENBQUNSLCtEQUFTQSxDQUFDbUYsSUFBSSxDQUFDckcsT0FBT3NHLFdBQVcsSUFBSTtBQUMzRDtBQUNBLDhFQUE4RTtBQUM5RSxTQUFTQyxhQUFhckMsSUFBSTtJQUN0QixPQUFPakQsd0RBQU1BLENBQUNGLE1BQU0sQ0FBQ0ssNERBQU1BLENBQUM7UUFBQzhDO1FBQU0zQyxrRUFBWUEsQ0FBQ1ksMkRBQU1BLENBQUNBLDJEQUFNQSxDQUFDK0IsUUFBUSxHQUFHO0tBQUc7QUFDaEY7QUFDQSxNQUFNc0MsY0FBYyxJQUFJQyxPQUFPLG1CQUFvQjtBQUNuRCxNQUFNQyxXQUFXO0lBQ2IsSUFBSUQsT0FBTyxvQkFBcUI7SUFDaEMsSUFBSUEsT0FBTyxpQkFBaUI7SUFDNUJEO0lBQ0EsSUFBSUMsT0FBTyxvQ0FBb0M7Q0FDbEQ7QUFDRCxTQUFTRSxhQUFhbEcsTUFBTSxFQUFFbUcsS0FBSztJQUMvQixJQUFJO1FBQ0EsT0FBT3ZFLG9FQUFZQSxDQUFDd0UsWUFBWXBHLFFBQVFtRztJQUM1QyxFQUNBLE9BQU9FLE9BQU8sQ0FBRTtJQUNoQixPQUFPO0FBQ1g7QUFDQSxTQUFTRCxZQUFZcEcsTUFBTSxFQUFFbUcsS0FBSztJQUM5QixJQUFJbkcsV0FBVyxNQUFNO1FBQ2pCLE9BQU87SUFDWDtJQUNBLE1BQU1zRyxTQUFTN0YsK0RBQVNBLENBQUNtRixJQUFJLENBQUM5RSxrRUFBWUEsQ0FBQ2QsUUFBUW1HLE9BQU9BLFFBQVEsS0FBS0ksUUFBUTtJQUMvRSxNQUFNM0QsU0FBU25DLCtEQUFTQSxDQUFDbUYsSUFBSSxDQUFDOUUsa0VBQVlBLENBQUNkLFFBQVFzRyxRQUFRQSxTQUFTLEtBQUtDLFFBQVE7SUFDakYsT0FBT3pGLGtFQUFZQSxDQUFDZCxRQUFRc0csU0FBUyxJQUFJQSxTQUFTLEtBQUsxRDtBQUMzRDtBQUNBLGlFQUFpRTtBQUNqRSxTQUFTNEQsWUFBWUMsSUFBSTtJQUNyQixJQUFJQSxLQUFLQyxLQUFLLENBQUMsc0JBQXNCO1FBQ2pDRCxPQUFPQSxLQUFLRSxTQUFTLENBQUM7SUFDMUIsT0FDSyxJQUFJRixLQUFLQyxLQUFLLENBQUMsZ0JBQWdCO1FBQ2hDRCxPQUFPQSxLQUFLRSxTQUFTLENBQUM7SUFDMUIsT0FDSztRQUNEekUsT0FBT0ssa0JBQWtCLENBQUMsMkJBQTJCLFFBQVFrRTtJQUNqRTtJQUNBLE9BQU8sZ0NBQXNDLE9BQUxBO0FBQzVDO0FBQ0EsU0FBU0csT0FBT3JILEtBQUs7SUFDakIsTUFBTVMsU0FBU1UsOERBQVFBLENBQUNuQjtJQUN4QixJQUFJUyxPQUFPNEMsTUFBTSxHQUFHLElBQUk7UUFDcEIsTUFBTSxJQUFJcUIsTUFBTTtJQUNwQjtJQUNBLE1BQU00QyxTQUFTLElBQUlDLFdBQVc7SUFDOUJELE9BQU9FLEdBQUcsQ0FBQy9HLFFBQVEsS0FBS0EsT0FBTzRDLE1BQU07SUFDckMsT0FBT2lFO0FBQ1g7QUFDQSxTQUFTRyxTQUFTekgsS0FBSztJQUNuQixJQUFJLE1BQU9xRCxNQUFNLEdBQUcsT0FBUSxHQUFHO1FBQzNCLE9BQU9yRDtJQUNYO0lBQ0EsTUFBTVMsU0FBUyxJQUFJOEcsV0FBV0csS0FBS0MsSUFBSSxDQUFDM0gsTUFBTXFELE1BQU0sR0FBRyxNQUFNO0lBQzdENUMsT0FBTytHLEdBQUcsQ0FBQ3hIO0lBQ1gsT0FBT1M7QUFDWDtBQUNBLDhDQUE4QztBQUM5QyxTQUFTbUgsWUFBWUMsS0FBSztJQUN0QixNQUFNcEgsU0FBUyxFQUFFO0lBQ2pCLElBQUlxSCxZQUFZO0lBQ2hCLGlEQUFpRDtJQUNqRCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsTUFBTXhFLE1BQU0sRUFBRTBFLElBQUs7UUFDbkN0SCxPQUFPdUgsSUFBSSxDQUFDO1FBQ1pGLGFBQWE7SUFDakI7SUFDQSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsTUFBTXhFLE1BQU0sRUFBRTBFLElBQUs7UUFDbkMsTUFBTTdELE9BQU8vQyw4REFBUUEsQ0FBQzBHLEtBQUssQ0FBQ0UsRUFBRTtRQUM5QiwwQkFBMEI7UUFDMUJ0SCxNQUFNLENBQUNzSCxFQUFFLEdBQUdWLE9BQU9TO1FBQ25CLHNDQUFzQztRQUN0Q3JILE9BQU91SCxJQUFJLENBQUNYLE9BQU9uRCxLQUFLYixNQUFNO1FBQzlCNUMsT0FBT3VILElBQUksQ0FBQ1AsU0FBU3ZEO1FBQ3JCNEQsYUFBYSxLQUFLSixLQUFLQyxJQUFJLENBQUN6RCxLQUFLYixNQUFNLEdBQUcsTUFBTTtJQUNwRDtJQUNBLE9BQU9oQywrREFBU0EsQ0FBQ1o7QUFDckI7QUFDTyxNQUFNd0g7SUFRVEMsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsZ0JBQWdCLEVBQUU7WUFDeEIsK0RBQStEO1lBQy9ELElBQUksQ0FBQ0EsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQztnQkFDdkNDLElBQUksSUFBSSxDQUFDM0QsT0FBTztnQkFDaEJULE1BQU07WUFDVixHQUFHdkQsSUFBSSxDQUFDLENBQUNGO2dCQUNMLE9BQU9TLCtEQUFTQSxDQUFDbUYsSUFBSSxDQUFDNUYsUUFBUThILEVBQUUsQ0FBQztZQUNyQyxHQUFHQyxLQUFLLENBQUMsQ0FBQzFCO2dCQUNOLElBQUlBLE1BQU0yQixJQUFJLEtBQUtoRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFO29CQUM3QyxPQUFPO2dCQUNYO2dCQUNBLG1FQUFtRTtnQkFDbkUsSUFBSSxDQUFDUixnQkFBZ0IsR0FBRztnQkFDeEIsTUFBTXJCO1lBQ1Y7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDcUIsZ0JBQWdCO0lBQ2hDO0lBQ0FTLE9BQU9DLFFBQVEsRUFBRUMsVUFBVSxFQUFFO1FBQ3pCLE9BQU9wSixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLDBDQUEwQztZQUMxQyxNQUFNcUosS0FBSztnQkFDUFQsSUFBSSxJQUFJLENBQUMzRCxPQUFPO2dCQUNoQnFFLGlCQUFpQjtnQkFDakI5RSxNQUFNN0MsK0RBQVNBLENBQUM7b0JBQUN3SDtvQkFBVS9HLDhEQUFRQSxDQUFDLElBQUksQ0FBQ21ILElBQUk7b0JBQUlILGNBQWM7aUJBQU07WUFDekU7WUFDQSx3REFBd0Q7WUFDeEQsSUFBSUksYUFBYTtZQUNqQixJQUFJLE1BQU0sSUFBSSxDQUFDaEIsZ0JBQWdCLElBQUk7Z0JBQy9CZ0IsYUFBYTtnQkFDYixtQ0FBbUM7Z0JBQ25DSCxHQUFHN0UsSUFBSSxHQUFHN0MsK0RBQVNBLENBQUM7b0JBQUM7b0JBQWN1RyxZQUFZO3dCQUFDL0YsK0RBQVNBLENBQUMsSUFBSSxDQUFDb0gsSUFBSTt3QkFBR0YsR0FBRzdFLElBQUk7cUJBQUM7aUJBQUU7WUFDcEY7WUFDQSxJQUFJO2dCQUNBLElBQUl6RCxTQUFTLE1BQU0sSUFBSSxDQUFDMkgsUUFBUSxDQUFDQyxJQUFJLENBQUNVO2dCQUN0QyxJQUFJLCtEQUFVdEksUUFBUTRDLE1BQU0sR0FBRyxPQUFRLEdBQUc7b0JBQ3RDVixPQUFPd0csVUFBVSxDQUFDLHdCQUF3QjFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDQyxjQUFjLEVBQUU7d0JBQ3BFUyxhQUFhTDt3QkFBSTdFLE1BQU16RDtvQkFDM0I7Z0JBQ0o7Z0JBQ0EsSUFBSXlJLFlBQVk7b0JBQ1p6SSxTQUFTb0csWUFBWXBHLFFBQVE7Z0JBQ2pDO2dCQUNBLE9BQU9BO1lBQ1gsRUFDQSxPQUFPcUcsT0FBTztnQkFDVixJQUFJQSxNQUFNMkIsSUFBSSxLQUFLaEcseURBQU1BLENBQUNpRyxNQUFNLENBQUNDLGNBQWMsRUFBRTtvQkFDN0MsT0FBTztnQkFDWDtnQkFDQSxNQUFNN0I7WUFDVjtRQUNKO0lBQ0o7SUFDQXVDLFlBQVlSLFFBQVEsRUFBRUMsVUFBVSxFQUFFO1FBQzlCLE9BQU9wSixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU1lLFNBQVMsTUFBTSxJQUFJLENBQUNtSSxNQUFNLENBQUNDLFVBQVVDO1lBQzNDLElBQUlySSxVQUFVLE1BQU07Z0JBQ2hCLE9BQU9vRyxZQUFZcEcsUUFBUTtZQUMvQjtZQUNBLE9BQU87UUFDWDtJQUNKO0lBQ0E2SSxZQUFZQyxRQUFRLEVBQUVDLFFBQVEsRUFBRTtRQUM1QixNQUFNQyxXQUFXM0QsU0FBUyxDQUFDNEQsT0FBT0gsVUFBVTtRQUM1QyxJQUFJRSxZQUFZLE1BQU07WUFDbEI5RyxPQUFPd0csVUFBVSxDQUFDLDBCQUFtQyxPQUFUSSxXQUFZOUcseURBQU1BLENBQUNpRyxNQUFNLENBQUNpQixxQkFBcUIsRUFBRTtnQkFDekZDLFdBQVcsY0FBdUIsT0FBVEwsVUFBUztZQUN0QztRQUNKO1FBQ0EsSUFBSUUsU0FBU3RELEdBQUcsS0FBSyxPQUFPO1lBQ3hCLE9BQU8sSUFBSSxDQUFDaUMsUUFBUSxDQUFDeUIsU0FBUyxDQUFDbEYsT0FBTyxDQUFDNkU7UUFDM0M7UUFDQSxNQUFNTSxRQUFRM0ksOERBQVFBLENBQUNxSTtRQUN2QixtRUFBbUU7UUFDbkUsSUFBSUMsU0FBU3pELEtBQUssSUFBSSxNQUFNO1lBQ3hCLE1BQU1BLFFBQVF3RCxTQUFTckMsS0FBSyxDQUFDO1lBQzdCLElBQUluQixPQUFPO2dCQUNQLE1BQU0zQyxTQUFTMEcsU0FBUy9ELEtBQUssQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xDLElBQUlBLEtBQUssQ0FBQyxFQUFFLENBQUMzQyxNQUFNLEtBQUtBLFNBQVMsS0FBS0EsVUFBVSxLQUFLQSxVQUFVLElBQUk7b0JBQy9ELE9BQU9rRCxhQUFhbkYsNERBQU1BLENBQUM7d0JBQUM7NEJBQUNxSSxTQUFTekQsS0FBSzt5QkFBQzt3QkFBRyxPQUFPQSxLQUFLLENBQUMsRUFBRTtxQkFBRTtnQkFDcEU7WUFDSjtRQUNKO1FBQ0EseUNBQXlDO1FBQ3pDLElBQUl5RCxTQUFTeEQsSUFBSSxJQUFJLE1BQU07WUFDdkIsTUFBTUEsT0FBT3VELFNBQVNyQyxLQUFLLENBQUM7WUFDNUIsSUFBSWxCLE1BQU07Z0JBQ04sTUFBTTVDLFNBQVMwRyxTQUFTOUQsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDakMsSUFBSUEsSUFBSSxDQUFDLEVBQUUsQ0FBQzVDLE1BQU0sS0FBS0EsU0FBUyxLQUFLQSxVQUFVLEtBQUtBLFVBQVUsSUFBSTtvQkFDOUQsT0FBT2tELGFBQWFuRiw0REFBTUEsQ0FBQzt3QkFBQzs0QkFBQ3FJLFNBQVN4RCxJQUFJO3lCQUFDO3dCQUFHLE9BQU9BLElBQUksQ0FBQyxFQUFFO3FCQUFFO2dCQUNsRTtZQUNKO1FBQ0o7UUFDQSxTQUFTO1FBQ1QsSUFBSXdELFNBQVN2RCxNQUFNLElBQUksTUFBTTtZQUN6QixNQUFNN0MsU0FBU3lHLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLGlGQUFpRjtZQUNqRixJQUFJcEgsVUFBVW9ILEtBQUssQ0FBQyxFQUFFO1lBQ3RCLElBQUlwSCxZQUFZLE1BQU07Z0JBQ2xCLElBQUlXLFdBQVcsTUFBTUEsV0FBVyxJQUFJO29CQUNoQ1gsVUFBVSxDQUFDO2dCQUNmO1lBQ0osT0FDSztnQkFDREEsVUFBVSxDQUFDO1lBQ2Y7WUFDQSxJQUFJQSxXQUFXLEtBQUtvSCxNQUFNekcsTUFBTSxLQUFLLElBQUlBLFVBQVVBLFVBQVUsS0FBS0EsVUFBVSxJQUFJO2dCQUM1RSxNQUFNMkcsUUFBUXhILHFEQUFjLENBQUNzSCxNQUFNMUcsS0FBSyxDQUFDO2dCQUN6QzRHLE1BQU1FLE9BQU8sQ0FBQ3hIO2dCQUNkLE9BQU9GLG9EQUFhLENBQUNpSCxTQUFTdkQsTUFBTSxFQUFFOEQ7WUFDMUM7UUFDSjtRQUNBLE9BQU87SUFDWDtJQUNBRyxXQUFXWixRQUFRLEVBQUU7UUFDakIsT0FBTzdKLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSTZKLFlBQVksTUFBTTtnQkFDbEJBLFdBQVc7WUFDZjtZQUNBLGdEQUFnRDtZQUNoRCxJQUFJQSxhQUFhLElBQUk7Z0JBQ2pCLElBQUk7b0JBQ0EsNkJBQTZCO29CQUM3QixNQUFNOUksU0FBUyxNQUFNLElBQUksQ0FBQ21JLE1BQU0sQ0FBQztvQkFDakMsYUFBYTtvQkFDYixJQUFJbkksV0FBVyxRQUFRQSxXQUFXbUIsK0RBQVFBLEVBQUU7d0JBQ3hDLE9BQU87b0JBQ1g7b0JBQ0EsT0FBTyxJQUFJLENBQUN3RyxRQUFRLENBQUN5QixTQUFTLENBQUNPLFdBQVcsQ0FBQzNKO2dCQUMvQyxFQUNBLE9BQU9xRyxPQUFPO29CQUNWLElBQUlBLE1BQU0yQixJQUFJLEtBQUtoRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFO3dCQUM3QyxPQUFPO29CQUNYO29CQUNBLE1BQU03QjtnQkFDVjtZQUNKO1lBQ0Esb0NBQW9DO1lBQ3BDLE1BQU0wQyxXQUFXLE1BQU0sSUFBSSxDQUFDSCxXQUFXLENBQUMsY0FBY2pELFdBQVdtRDtZQUNqRSxhQUFhO1lBQ2IsSUFBSUMsWUFBWSxRQUFRQSxhQUFhLE1BQU07Z0JBQ3ZDLE9BQU87WUFDWDtZQUNBLHNCQUFzQjtZQUN0QixNQUFNN0UsVUFBVSxJQUFJLENBQUMyRSxXQUFXLENBQUNDLFVBQVVDO1lBQzNDLElBQUk3RSxXQUFXLE1BQU07Z0JBQ2pCaEMsT0FBT3dHLFVBQVUsQ0FBRSxvQ0FBbUMxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ2lCLHFCQUFxQixFQUFFO29CQUN2RkMsV0FBVyxjQUF1QixPQUFUTCxVQUFTO29CQUNsQ0EsVUFBVUE7b0JBQ1ZyRixNQUFNc0Y7Z0JBQ1Y7WUFDSjtZQUNBLE9BQU83RTtRQUNYO0lBQ0o7SUFDQTBGLFlBQVk7UUFDUixPQUFPM0ssVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNNEssVUFBVTtnQkFBQztvQkFBRWxGLE1BQU07b0JBQVFtRixTQUFTLElBQUksQ0FBQ3RCLElBQUk7Z0JBQUM7YUFBRTtZQUN0RCxJQUFJO2dCQUNBLDJCQUEyQjtnQkFDM0Isb0ZBQW9GO2dCQUNwRixNQUFNdUIsU0FBUyxNQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDO2dCQUNsQyxJQUFJRCxVQUFVLE1BQU07b0JBQ2hCLE9BQU87Z0JBQ1g7Z0JBQ0EsSUFBSyxJQUFJekMsSUFBSSxHQUFHQSxJQUFJckIsU0FBU3JELE1BQU0sRUFBRTBFLElBQUs7b0JBQ3RDLE1BQU1aLFFBQVFxRCxPQUFPckQsS0FBSyxDQUFDVCxRQUFRLENBQUNxQixFQUFFO29CQUN0QyxJQUFJWixTQUFTLE1BQU07d0JBQ2Y7b0JBQ0o7b0JBQ0EsTUFBTXVELFNBQVN2RCxLQUFLLENBQUMsRUFBRSxDQUFDbEUsV0FBVztvQkFDbkMsT0FBUXlIO3dCQUNKLEtBQUs7NEJBQ0RKLFFBQVF0QyxJQUFJLENBQUM7Z0NBQUU1QyxNQUFNO2dDQUFPbUYsU0FBU0M7NEJBQU87NEJBQzVDLE9BQU87Z0NBQUVGO2dDQUFTSyxLQUFLSDs0QkFBTzt3QkFDbEMsS0FBSzs0QkFDREYsUUFBUXRDLElBQUksQ0FBQztnQ0FBRTVDLE1BQU07Z0NBQVFtRixTQUFTQzs0QkFBTzs0QkFDN0MsT0FBTztnQ0FBRUY7Z0NBQVNLLEtBQUtIOzRCQUFPO3dCQUNsQyxLQUFLOzRCQUNERixRQUFRdEMsSUFBSSxDQUFDO2dDQUFFNUMsTUFBTTtnQ0FBUW1GLFNBQVNDOzRCQUFPOzRCQUM3QyxPQUFPO2dDQUFFRjtnQ0FBU0ssS0FBSzFELFlBQVl1RDs0QkFBUTt3QkFDL0MsS0FBSzt3QkFDTCxLQUFLOzRCQUFXO2dDQUNaLG1FQUFtRTtnQ0FDbkUsTUFBTTNCLFdBQVcsV0FBWSxXQUFZLGVBQWU7Z0NBQ3hEeUIsUUFBUXRDLElBQUksQ0FBQztvQ0FBRTVDLE1BQU1zRjtvQ0FBUUgsU0FBU0M7Z0NBQU87Z0NBQzdDLHlCQUF5QjtnQ0FDekIsTUFBTUksUUFBUyxJQUFJLENBQUNDLGdCQUFnQixJQUFLLE9BQU0sSUFBSSxDQUFDVixVQUFVLEVBQUM7Z0NBQy9ELE1BQU0vRixRQUFRLENBQUMrQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUMsRUFBR2hELEtBQUssQ0FBQztnQ0FDckMsSUFBSUMsTUFBTWYsTUFBTSxLQUFLLEdBQUc7b0NBQ3BCLE9BQU87Z0NBQ1g7Z0NBQ0EsTUFBTXlILE9BQU8sTUFBTSxJQUFJLENBQUMxQyxRQUFRLENBQUN5QixTQUFTLENBQUNsRixPQUFPLENBQUNQLEtBQUssQ0FBQyxFQUFFO2dDQUMzRCxNQUFNMkcsVUFBVXJKLGdFQUFVQSxDQUFDUiwrREFBU0EsQ0FBQ21GLElBQUksQ0FBQ2pDLEtBQUssQ0FBQyxFQUFFLEVBQUVrQyxXQUFXLElBQUk7Z0NBQ25FLHlDQUF5QztnQ0FDekMsSUFBSW9FLFdBQVcsVUFBVTtvQ0FDckIsMkJBQTJCO29DQUMzQixNQUFNTSxhQUFhLElBQUksQ0FBQzVDLFFBQVEsQ0FBQ3lCLFNBQVMsQ0FBQ08sV0FBVyxDQUFDLE9BQU0sSUFBSSxDQUFDaEMsUUFBUSxDQUFDQyxJQUFJLENBQUM7d0NBQzVFQyxJQUFJd0M7d0NBQU01RyxNQUFNN0MsK0RBQVNBLENBQUM7NENBQUM7NENBQWMwSjt5Q0FBUTtvQ0FDckQsRUFBQztvQ0FDRCxJQUFJSCxVQUFVSSxZQUFZO3dDQUN0QixPQUFPO29DQUNYO29DQUNBVixRQUFRdEMsSUFBSSxDQUFDO3dDQUFFNUMsTUFBTTt3Q0FBU21GLFNBQVNTO29DQUFXO2dDQUN0RCxPQUNLLElBQUlOLFdBQVcsV0FBVztvQ0FDM0IsNENBQTRDO29DQUM1QyxNQUFNTyxVQUFVL0osK0RBQVNBLENBQUNtRixJQUFJLENBQUMsT0FBTSxJQUFJLENBQUMrQixRQUFRLENBQUNDLElBQUksQ0FBQzt3Q0FDcERDLElBQUl3Qzt3Q0FBTTVHLE1BQU03QywrREFBU0EsQ0FBQzs0Q0FBQzs0Q0FBY0ssZ0VBQVVBLENBQUNrSixPQUFPOzRDQUFLRzt5Q0FBUTtvQ0FDNUUsRUFBQztvQ0FDRCxJQUFJRSxRQUFRQyxNQUFNLElBQUk7d0NBQ2xCLE9BQU87b0NBQ1g7b0NBQ0FaLFFBQVF0QyxJQUFJLENBQUM7d0NBQUU1QyxNQUFNO3dDQUFXbUYsU0FBU1UsUUFBUUUsUUFBUTtvQ0FBRztnQ0FDaEU7Z0NBQ0EsK0NBQStDO2dDQUMvQyxNQUFNcEMsS0FBSztvQ0FDUFQsSUFBSSxJQUFJLENBQUNGLFFBQVEsQ0FBQ3lCLFNBQVMsQ0FBQ2xGLE9BQU8sQ0FBQ1AsS0FBSyxDQUFDLEVBQUU7b0NBQzVDRixNQUFNN0MsK0RBQVNBLENBQUM7d0NBQUN3SDt3Q0FBVWtDO3FDQUFRO2dDQUN2QztnQ0FDQSxJQUFJSyxjQUFjekUsYUFBYSxPQUFNLElBQUksQ0FBQ3lCLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDVSxHQUFFLEdBQUc7Z0NBQzdELElBQUlxQyxlQUFlLE1BQU07b0NBQ3JCLE9BQU87Z0NBQ1g7Z0NBQ0FkLFFBQVF0QyxJQUFJLENBQUM7b0NBQUU1QyxNQUFNO29DQUFxQm1GLFNBQVNhO2dDQUFZO2dDQUMvRCw0Q0FBNEM7Z0NBQzVDLElBQUlWLFdBQVcsV0FBVztvQ0FDdEJVLGNBQWNBLFlBQVlDLE9BQU8sQ0FBQyxRQUFRTixRQUFRM0QsU0FBUyxDQUFDO29DQUM1RGtELFFBQVF0QyxJQUFJLENBQUM7d0NBQUU1QyxNQUFNO3dDQUF5Qm1GLFNBQVNhO29DQUFZO2dDQUN2RTtnQ0FDQSxnQ0FBZ0M7Z0NBQ2hDLElBQUlBLFlBQVlqRSxLQUFLLENBQUMsWUFBWTtvQ0FDOUJpRSxjQUFjbkUsWUFBWW1FO2dDQUM5QjtnQ0FDQWQsUUFBUXRDLElBQUksQ0FBQztvQ0FBRTVDLE1BQU07b0NBQWdCbUYsU0FBU2E7Z0NBQVk7Z0NBQzFELHlCQUF5QjtnQ0FDekIsTUFBTUUsV0FBVyxNQUFNaEosOERBQVNBLENBQUM4STtnQ0FDakMsSUFBSSxDQUFDRSxVQUFVO29DQUNYLE9BQU87Z0NBQ1g7Z0NBQ0FoQixRQUFRdEMsSUFBSSxDQUFDO29DQUFFNUMsTUFBTTtvQ0FBWW1GLFNBQVNnQixLQUFLQyxTQUFTLENBQUNGO2dDQUFVO2dDQUNuRSx5QkFBeUI7Z0NBQ3pCLElBQUlHLFdBQVdILFNBQVNJLEtBQUs7Z0NBQzdCLElBQUksT0FBUUQsYUFBYyxVQUFVO29DQUNoQyxPQUFPO2dDQUNYO2dDQUNBLElBQUlBLFNBQVN0RSxLQUFLLENBQUMseUJBQXlCO2dDQUN4QyxRQUFRO2dDQUNaLE9BQ0s7b0NBQ0QsaUNBQWlDO29DQUNqQyxNQUFNd0UsT0FBT0YsU0FBU3RFLEtBQUssQ0FBQ1g7b0NBQzVCLElBQUltRixRQUFRLE1BQU07d0NBQ2QsT0FBTztvQ0FDWDtvQ0FDQXJCLFFBQVF0QyxJQUFJLENBQUM7d0NBQUU1QyxNQUFNO3dDQUFZbUYsU0FBU2tCO29DQUFTO29DQUNuREEsV0FBV3hFLFlBQVl3RTtnQ0FDM0I7Z0NBQ0FuQixRQUFRdEMsSUFBSSxDQUFDO29DQUFFNUMsTUFBTTtvQ0FBT21GLFNBQVNrQjtnQ0FBUztnQ0FDOUMsT0FBTztvQ0FBRW5CO29DQUFTSyxLQUFLYztnQ0FBUzs0QkFDcEM7b0JBQ0o7Z0JBQ0o7WUFDSixFQUNBLE9BQU8zRSxPQUFPLENBQUU7WUFDaEIsT0FBTztRQUNYO0lBQ0o7SUFDQThFLGlCQUFpQjtRQUNiLE9BQU9sTSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLDZCQUE2QjtZQUM3QixNQUFNOEosV0FBVyxNQUFNLElBQUksQ0FBQ0gsV0FBVyxDQUFDO1lBQ3hDLGlCQUFpQjtZQUNqQixJQUFJRyxZQUFZLFFBQVFBLGFBQWEsTUFBTTtnQkFDdkMsT0FBTztZQUNYO1lBQ0EsOEJBQThCO1lBQzlCLE1BQU1tQyxPQUFPbkMsU0FBU3JDLEtBQUssQ0FBQztZQUM1QixJQUFJd0UsTUFBTTtnQkFDTixNQUFNdEksU0FBUzBHLFNBQVM0QixJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUNqQyxJQUFJQSxJQUFJLENBQUMsRUFBRSxDQUFDdEksTUFBTSxLQUFLQSxTQUFTLEdBQUc7b0JBQy9CLE9BQU8sWUFBYXBDLHdEQUFNQSxDQUFDRixNQUFNLENBQUMsT0FBTzRLLElBQUksQ0FBQyxFQUFFO2dCQUNwRDtZQUNKO1lBQ0Esa0NBQWtDO1lBQ2xDLE1BQU1FLE9BQU9yQyxTQUFTckMsS0FBSyxDQUFDO1lBQzVCLElBQUkwRSxNQUFNO2dCQUNOLE1BQU14SSxTQUFTMEcsU0FBUzhCLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pDLElBQUlBLElBQUksQ0FBQyxFQUFFLENBQUN4SSxNQUFNLEtBQUtBLFNBQVMsR0FBRztvQkFDL0IsT0FBTyxZQUFhcEMsd0RBQU1BLENBQUNGLE1BQU0sQ0FBQyxPQUFPOEssSUFBSSxDQUFDLEVBQUU7Z0JBQ3BEO1lBQ0o7WUFDQSwrRUFBK0U7WUFDL0UsTUFBTUMsUUFBUXRDLFNBQVNyQyxLQUFLLENBQUM7WUFDN0IsSUFBSTJFLE9BQU87Z0JBQ1AsSUFBSUEsS0FBSyxDQUFDLEVBQUUsQ0FBQ3pJLE1BQU0sS0FBTSxLQUFLLEdBQUk7b0JBQzlCLE9BQU8sV0FBWXlJLEtBQUssQ0FBQyxFQUFFO2dCQUMvQjtZQUNKO1lBQ0EsTUFBTUMsU0FBU3ZDLFNBQVNyQyxLQUFLLENBQUM7WUFDOUIsSUFBSTRFLFFBQVE7Z0JBQ1IsSUFBSUEsTUFBTSxDQUFDLEVBQUUsQ0FBQzFJLE1BQU0sS0FBTSxLQUFLLEdBQUk7b0JBQy9CLDJFQUEyRTtvQkFDM0UsTUFBTTJJLFVBQVU7d0JBQUUsS0FBSzt3QkFBSSxLQUFLO3dCQUFLLEtBQUs7b0JBQUk7b0JBQzlDLE1BQU0zRyxPQUFPckUsOERBQVlBLENBQUMsT0FBTytLLE1BQU0sQ0FBQyxFQUFFLEVBQUVWLE9BQU8sQ0FBQyxXQUFXLENBQUNZLElBQU9ELE9BQU8sQ0FBQ0MsRUFBRTtvQkFDakYsT0FBTyxXQUFZNUc7Z0JBQ3ZCO1lBQ0o7WUFDQSxPQUFPMUMsT0FBT3dHLFVBQVUsQ0FBRSw0Q0FBMkMxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ2lCLHFCQUFxQixFQUFFO2dCQUN0R0MsV0FBVztnQkFDWDFGLE1BQU1zRjtZQUNWO1FBQ0o7SUFDSjtJQUNBaUIsUUFBUXlCLEdBQUcsRUFBRTtRQUNULE9BQU94TSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLDZDQUE2QztZQUM3QyxJQUFJeU0sV0FBVy9KLG1FQUFXQSxDQUFDOEo7WUFDM0Isc0VBQXNFO1lBQ3RFLHlFQUF5RTtZQUN6RUMsV0FBVy9LLDREQUFNQSxDQUFDO2dCQUFDZ0YsV0FBVztnQkFBS0EsV0FBVytGLFNBQVM5SSxNQUFNO2dCQUFHOEk7YUFBUztZQUN6RSw4QkFBOEI7WUFDOUIsSUFBSSxTQUFVOUksTUFBTSxHQUFHLE9BQVEsR0FBRztnQkFDOUI4SSxXQUFXL0ssNERBQU1BLENBQUM7b0JBQUMrSztvQkFBVXpLLGdFQUFVQSxDQUFDLE1BQU0sS0FBTXdLLElBQUk3SSxNQUFNLEdBQUc7aUJBQUs7WUFDMUU7WUFDQSxNQUFNbUcsV0FBVyxNQUFNLElBQUksQ0FBQ0gsV0FBVyxDQUFDLGNBQWM3SCw2REFBT0EsQ0FBQzJLO1lBQzlELElBQUkzQyxZQUFZLFFBQVFBLGFBQWEsTUFBTTtnQkFDdkMsT0FBTztZQUNYO1lBQ0EsT0FBT25ILG9FQUFZQSxDQUFDbUg7UUFDeEI7SUFDSjtJQW5WQSxvRUFBb0U7SUFDcEUvRCxZQUFZMkMsUUFBUSxFQUFFekQsT0FBTyxFQUFFc0UsSUFBSSxFQUFFbUQsZUFBZSxDQUFFO1FBQ2xEcEsseUVBQWNBLENBQUMsSUFBSSxFQUFFLFlBQVlvRztRQUNqQ3BHLHlFQUFjQSxDQUFDLElBQUksRUFBRSxRQUFRaUg7UUFDN0JqSCx5RUFBY0EsQ0FBQyxJQUFJLEVBQUUsV0FBV29HLFNBQVN5QixTQUFTLENBQUNsRixPQUFPLENBQUNBO1FBQzNEM0MseUVBQWNBLENBQUMsSUFBSSxFQUFFLG9CQUFvQm9LO0lBQzdDO0FBOFVKO0FBQ0EsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLGFBQWE7QUFDVixNQUFNQyxxQkFBcUJ6TCxzRUFBUUE7SUErQ3RDMEwsU0FBUztRQUNMLE9BQU85TSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLElBQUksSUFBSSxDQUFDK00sUUFBUSxJQUFJLE1BQU07Z0JBQ3ZCLElBQUlDLFVBQVU7Z0JBQ2QsSUFBSSxJQUFJLENBQUNDLGVBQWUsRUFBRTtvQkFDdEIsSUFBSTt3QkFDQUQsVUFBVSxNQUFNLElBQUksQ0FBQ0MsZUFBZTtvQkFDeEMsRUFDQSxPQUFPN0YsT0FBTyxDQUFFO2dCQUNwQjtnQkFDQSxzRUFBc0U7Z0JBQ3RFLElBQUk0RixXQUFXLE1BQU07b0JBQ2pCQSxVQUFVLE1BQU0sSUFBSSxDQUFDRSxhQUFhO2dCQUN0QztnQkFDQSxpRUFBaUU7Z0JBQ2pFLGdEQUFnRDtnQkFDaEQsSUFBSSxDQUFDRixTQUFTO29CQUNWL0osT0FBT3dHLFVBQVUsQ0FBQyx1QkFBdUIxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ21FLGFBQWEsRUFBRSxDQUFDO2dCQUMzRTtnQkFDQSxpRUFBaUU7Z0JBQ2pFLElBQUksSUFBSSxDQUFDSixRQUFRLElBQUksTUFBTTtvQkFDdkIsSUFBSSxJQUFJLENBQUNLLFVBQVUsRUFBRTt3QkFDakIsSUFBSSxDQUFDTCxRQUFRLEdBQUdDO29CQUNwQixPQUNLO3dCQUNEMUsseUVBQWNBLENBQUMsSUFBSSxFQUFFLFlBQVkwSztvQkFDckM7b0JBQ0EsSUFBSSxDQUFDSyxJQUFJLENBQUMsV0FBV0wsU0FBUztnQkFDbEM7WUFDSjtZQUNBLE9BQU8sSUFBSSxDQUFDRCxRQUFRO1FBQ3hCO0lBQ0o7SUFDQSxpRUFBaUU7SUFDakUsa0VBQWtFO0lBQ2xFLHlEQUF5RDtJQUN6RCxJQUFJTyxRQUFRO1FBQ1IsT0FBT3pLLHlEQUFJQSxDQUFDO1lBQ1IsT0FBTyxJQUFJLENBQUNpSyxNQUFNLEdBQUc3TCxJQUFJLENBQUMsQ0FBQytMO2dCQUN2QixPQUFPQTtZQUNYLEdBQUcsQ0FBQzVGO2dCQUNBLGlEQUFpRDtnQkFDakQsSUFBSUEsTUFBTTJCLElBQUksS0FBS2hHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDdUUsYUFBYSxJQUFJbkcsTUFBTTNCLEtBQUssS0FBSyxhQUFhO29CQUMzRSxPQUFPK0g7Z0JBQ1g7Z0JBQ0EsTUFBTXBHO1lBQ1Y7UUFDSjtJQUNKO0lBQ0EsMkRBQTJEO0lBQzNELE9BQU9xRyxlQUFlO1FBQ2xCLElBQUlkLG9CQUFvQixNQUFNO1lBQzFCQSxtQkFBbUIsSUFBSXpKLGtEQUFTQTtRQUNwQztRQUNBLE9BQU95SjtJQUNYO0lBQ0EsNkNBQTZDO0lBQzdDLE9BQU90SyxXQUFXMkssT0FBTyxFQUFFO1FBQ3ZCLE9BQU8zSyxvRUFBVUEsQ0FBQyxXQUFZLE9BQVEsY0FBYzJLO0lBQ3hEO0lBQ0FVLGNBQWNyRSxFQUFFLEVBQUVzRSxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixPQUFPNU4sVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJLElBQUksQ0FBQzZOLGVBQWUsSUFBSUQsS0FBS2pLLE1BQU0sS0FBSyxHQUFHO2dCQUMzQyxPQUFPO1lBQ1g7WUFDQSxNQUFNbUssU0FBU3pFLEdBQUdULEVBQUUsQ0FBQ3JGLFdBQVc7WUFDaEMsTUFBTWlCLE9BQU9tSixTQUFTcEssV0FBVztZQUNqQyxNQUFNd0ssZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSyxJQUFJMUYsSUFBSSxHQUFHQSxJQUFJdUYsS0FBS2pLLE1BQU0sRUFBRTBFLElBQUs7Z0JBQ2xDLE1BQU00QyxNQUFNMkMsSUFBSSxDQUFDdkYsRUFBRTtnQkFDbkIsZ0JBQWdCO2dCQUNoQixNQUFNMkYsT0FBTy9DLElBQUlVLE9BQU8sQ0FBQyxZQUFZbUMsUUFBUW5DLE9BQU8sQ0FBQyxVQUFVbkg7Z0JBQy9ELG1EQUFtRDtnQkFDbkQsTUFBTXlKLE9BQU8sSUFBS3BKLE9BQU8sQ0FBQyxhQUFhLElBQUssT0FBT2dILEtBQUtDLFNBQVMsQ0FBQztvQkFBRXRIO29CQUFNc0o7Z0JBQU87Z0JBQ2pGLE1BQU0vTSxTQUFTLE1BQU02Qiw4REFBU0EsQ0FBQztvQkFBRXFJLEtBQUsrQztvQkFBTUUsa0JBQWtCO2dCQUFLLEdBQUdELE1BQU0sQ0FBQzNOLE9BQU82TjtvQkFDaEY3TixNQUFNOE4sTUFBTSxHQUFHRCxTQUFTRSxVQUFVO29CQUNsQyxPQUFPL047Z0JBQ1g7Z0JBQ0EsSUFBSVMsT0FBT3lELElBQUksRUFBRTtvQkFDYixPQUFPekQsT0FBT3lELElBQUk7Z0JBQ3RCO2dCQUNBLE1BQU04SixlQUFnQnZOLE9BQU93TixPQUFPLElBQUk7Z0JBQ3hDLGdEQUFnRDtnQkFDaEQsSUFBSXhOLE9BQU9xTixNQUFNLElBQUksT0FBT3JOLE9BQU9xTixNQUFNLEdBQUcsS0FBSztvQkFDN0MsT0FBT25MLE9BQU93RyxVQUFVLENBQUMseUNBQXNELE9BQWI2RSxlQUFnQnZMLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO3dCQUFFdkQ7d0JBQUtxRDtvQkFBYTtnQkFDdEk7Z0JBQ0EsK0NBQStDO2dCQUMvQ1AsY0FBY3pGLElBQUksQ0FBQ2dHO1lBQ3ZCO1lBQ0EsT0FBT3JMLE9BQU93RyxVQUFVLENBQUMsd0NBQStGLE9BQXZEc0UsY0FBY2xLLEdBQUcsQ0FBQyxDQUFDNEssSUFBTTVDLEtBQUtDLFNBQVMsQ0FBQzJDLElBQUluSyxJQUFJLENBQUMsUUFBU3ZCLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO2dCQUNuSlo7Z0JBQU1HO1lBQ1Y7UUFDSjtJQUNKO0lBQ0Esa0VBQWtFO0lBQ2xFLCtEQUErRDtJQUMvRFcsd0JBQXdCQyxNQUFNLEVBQUU7UUFDNUIsT0FBTzNPLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxJQUFJLENBQUM4TSxNQUFNO1lBQ2pCLHVDQUF1QztZQUN2QyxJQUFJNkIsU0FBUyxHQUFHO2dCQUNaLHFEQUFxRDtnQkFDckQsTUFBTyxJQUFJLENBQUNDLG9CQUFvQixDQUFFO29CQUM5Qiw0Q0FBNEM7b0JBQzVDLE1BQU1DLHNCQUFzQixJQUFJLENBQUNELG9CQUFvQjtvQkFDckQsSUFBSTt3QkFDQSxvQ0FBb0M7d0JBQ3BDLE1BQU03TixTQUFTLE1BQU04Tjt3QkFDckIsSUFBSSxZQUFhOU4sT0FBTytOLFFBQVEsSUFBS0gsUUFBUTs0QkFDekMsT0FBTzVOLE9BQU9nTyxXQUFXO3dCQUM3Qjt3QkFFQTtvQkFDSixFQUNBLE9BQU8zSCxPQUFPO3dCQUNWLHFEQUFxRDt3QkFDckQsc0RBQXNEO3dCQUN0RCxxREFBcUQ7d0JBQ3JELHVEQUF1RDt3QkFDdkQsSUFBSSxJQUFJLENBQUN3SCxvQkFBb0IsS0FBS0MscUJBQXFCOzRCQUNuRDt3QkFDSjtvQkFDSjtnQkFDSjtZQUNKO1lBQ0EsTUFBTUcsVUFBVTlKO1lBQ2hCLE1BQU0rSiwyQkFBMkJ6TSw0RUFBaUJBLENBQUM7Z0JBQy9DdU0sYUFBYSxJQUFJLENBQUNHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztnQkFDN0NDLGNBQWMsSUFBSSxDQUFDOU0sVUFBVSxHQUFHcEIsSUFBSSxDQUFDLENBQUMrTCxVQUFhLE1BQU8sQ0FBQzVGLFFBQVdBO1lBQzFFLEdBQUduRyxJQUFJLENBQUM7b0JBQUMsRUFBRThOLFdBQVcsRUFBRUksWUFBWSxFQUFFO2dCQUNsQyxJQUFJQSxjQUFjO29CQUNkLDRDQUE0QztvQkFDNUMsSUFBSSxJQUFJLENBQUNQLG9CQUFvQixLQUFLSywwQkFBMEI7d0JBQ3hELElBQUksQ0FBQ0wsb0JBQW9CLEdBQUc7b0JBQ2hDO29CQUNBLE1BQU1PO2dCQUNWO2dCQUNBLE1BQU1MLFdBQVc1SjtnQkFDakI2SixjQUFjdk4sK0RBQVNBLENBQUNtRixJQUFJLENBQUNvSSxhQUFhekgsUUFBUTtnQkFDbEQsSUFBSXlILGNBQWMsSUFBSSxDQUFDSyx1QkFBdUIsRUFBRTtvQkFDNUNMLGNBQWMsSUFBSSxDQUFDSyx1QkFBdUI7Z0JBQzlDO2dCQUNBLElBQUksQ0FBQ0EsdUJBQXVCLEdBQUdMO2dCQUMvQixJQUFJLENBQUNNLG1CQUFtQixDQUFDTixjQUFjLDBCQUEwQjtnQkFDakUsT0FBTztvQkFBRUE7b0JBQWFDO29CQUFTRjtnQkFBUztZQUM1QztZQUNBLElBQUksQ0FBQ0Ysb0JBQW9CLEdBQUdLO1lBQzVCLHNFQUFzRTtZQUN0RUEseUJBQXlCbkcsS0FBSyxDQUFDLENBQUMxQjtnQkFDNUIsdUVBQXVFO2dCQUN2RSxJQUFJLElBQUksQ0FBQ3dILG9CQUFvQixLQUFLSywwQkFBMEI7b0JBQ3hELElBQUksQ0FBQ0wsb0JBQW9CLEdBQUc7Z0JBQ2hDO1lBQ0o7WUFDQSxPQUFPLENBQUMsTUFBTUssd0JBQXVCLEVBQUdGLFdBQVc7UUFDdkQ7SUFDSjtJQUNBbE0sT0FBTztRQUNILE9BQU83QyxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU1zUCxTQUFTMUM7WUFDZixtRkFBbUY7WUFDbkYsTUFBTTJDLFVBQVUsRUFBRTtZQUNsQixJQUFJUixjQUFjO1lBQ2xCLElBQUk7Z0JBQ0FBLGNBQWMsTUFBTSxJQUFJLENBQUNMLHVCQUF1QixDQUFDLE1BQU0sSUFBSSxDQUFDYyxlQUFlLEdBQUc7WUFDbEYsRUFDQSxPQUFPcEksT0FBTztnQkFDVixJQUFJLENBQUNpRyxJQUFJLENBQUMsU0FBU2pHO2dCQUNuQjtZQUNKO1lBQ0EsSUFBSSxDQUFDaUksbUJBQW1CLENBQUNOO1lBQ3pCLGlFQUFpRTtZQUNqRSxJQUFJLENBQUMxQixJQUFJLENBQUMsUUFBUWlDLFFBQVFQO1lBQzFCLHFDQUFxQztZQUNyQyxJQUFJQSxnQkFBZ0IsSUFBSSxDQUFDN0ksZ0JBQWdCLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQ21ILElBQUksQ0FBQyxXQUFXaUM7Z0JBQ3JCO1lBQ0o7WUFDQSxnREFBZ0Q7WUFDaEQsSUFBSSxJQUFJLENBQUNHLFFBQVEsQ0FBQ0MsS0FBSyxLQUFLLENBQUMsR0FBRztnQkFDNUIsSUFBSSxDQUFDRCxRQUFRLENBQUNDLEtBQUssR0FBR1gsY0FBYztZQUN4QztZQUNBLElBQUkvRyxLQUFLMkgsR0FBRyxDQUFDLElBQUssQ0FBQ0YsUUFBUSxDQUFDQyxLQUFLLEdBQUlYLGVBQWUsTUFBTTtnQkFDdEQ5TCxPQUFPOEIsSUFBSSxDQUFDLCtEQUFpR2dLLE9BQWxDLElBQUksQ0FBQ1UsUUFBUSxDQUFDQyxLQUFLLEVBQUMsZ0JBQTBCLE9BQVpYLGFBQVk7Z0JBQ3pILElBQUksQ0FBQzFCLElBQUksQ0FBQyxTQUFTcEssT0FBTzJNLFNBQVMsQ0FBQywrQkFBK0I3TSx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ3VFLGFBQWEsRUFBRTtvQkFDNUZ3QixhQUFhQTtvQkFDYnRKLE9BQU87b0JBQ1BvSyxxQkFBcUIsSUFBSSxDQUFDSixRQUFRLENBQUNDLEtBQUs7Z0JBQzVDO2dCQUNBLElBQUksQ0FBQ3JDLElBQUksQ0FBQyxTQUFTMEI7WUFDdkIsT0FDSztnQkFDRCxxREFBcUQ7Z0JBQ3JELElBQUssSUFBSTFHLElBQUksSUFBSSxDQUFDb0gsUUFBUSxDQUFDQyxLQUFLLEdBQUcsR0FBR3JILEtBQUswRyxhQUFhMUcsSUFBSztvQkFDekQsSUFBSSxDQUFDZ0YsSUFBSSxDQUFDLFNBQVNoRjtnQkFDdkI7WUFDSjtZQUNBLDJEQUEyRDtZQUMzRCxJQUFJLElBQUksQ0FBQ29ILFFBQVEsQ0FBQ0MsS0FBSyxLQUFLWCxhQUFhO2dCQUNyQyxJQUFJLENBQUNVLFFBQVEsQ0FBQ0MsS0FBSyxHQUFHWDtnQkFDdEI1SyxPQUFPQyxJQUFJLENBQUMsSUFBSSxDQUFDcUwsUUFBUSxFQUFFeEwsT0FBTyxDQUFDLENBQUN1STtvQkFDaEMsa0NBQWtDO29CQUNsQyxJQUFJQSxRQUFRLFNBQVM7d0JBQ2pCO29CQUNKO29CQUNBLGtEQUFrRDtvQkFDbEQsTUFBTXNELG1CQUFtQixJQUFJLENBQUNMLFFBQVEsQ0FBQ2pELElBQUk7b0JBQzNDLGdFQUFnRTtvQkFDaEUsZ0VBQWdFO29CQUNoRSxtQkFBbUI7b0JBQ25CLElBQUlzRCxxQkFBcUIsV0FBVzt3QkFDaEM7b0JBQ0o7b0JBQ0EsOERBQThEO29CQUM5RCxpREFBaUQ7b0JBQ2pELElBQUlmLGNBQWNlLG1CQUFtQixJQUFJO3dCQUNyQyxPQUFPLElBQUksQ0FBQ0wsUUFBUSxDQUFDakQsSUFBSTtvQkFDN0I7Z0JBQ0o7WUFDSjtZQUNBLHNCQUFzQjtZQUN0QixJQUFJLElBQUksQ0FBQ3RHLGdCQUFnQixLQUFLLENBQUMsR0FBRztnQkFDOUIsSUFBSSxDQUFDQSxnQkFBZ0IsR0FBRzZJLGNBQWM7WUFDMUM7WUFDQSxnREFBZ0Q7WUFDaEQsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDOUwsT0FBTyxDQUFDLENBQUN3QjtnQkFDbEIsT0FBUUEsTUFBTUMsSUFBSTtvQkFDZCxLQUFLO3dCQUFNOzRCQUNQLE1BQU1DLE9BQU9GLE1BQU1FLElBQUk7NEJBQ3ZCLElBQUlxSyxTQUFTLElBQUksQ0FBQ0MscUJBQXFCLENBQUN0SyxNQUFNMUUsSUFBSSxDQUFDLENBQUNpUDtnQ0FDaEQsSUFBSSxDQUFDQSxXQUFXQSxRQUFRbkIsV0FBVyxJQUFJLE1BQU07b0NBQ3pDLE9BQU87Z0NBQ1g7Z0NBQ0EsSUFBSSxDQUFDVSxRQUFRLENBQUMsT0FBTzlKLEtBQUssR0FBR3VLLFFBQVFuQixXQUFXO2dDQUNoRCxJQUFJLENBQUMxQixJQUFJLENBQUMxSCxNQUFNdUs7Z0NBQ2hCLE9BQU87NEJBQ1gsR0FBR3BILEtBQUssQ0FBQyxDQUFDMUI7Z0NBQVksSUFBSSxDQUFDaUcsSUFBSSxDQUFDLFNBQVNqRzs0QkFBUTs0QkFDakRtSSxRQUFRakgsSUFBSSxDQUFDMEg7NEJBQ2I7d0JBQ0o7b0JBQ0EsS0FBSzt3QkFBVTs0QkFDWCwyREFBMkQ7NEJBQzNELElBQUksQ0FBQ3ZLLE1BQU1VLFNBQVMsRUFBRTtnQ0FDbEJWLE1BQU1VLFNBQVMsR0FBRztnQ0FDbEIseURBQXlEO2dDQUN6RCw4REFBOEQ7Z0NBQzlELElBQUlWLE1BQU1TLGdCQUFnQixLQUFLLENBQUMsR0FBRztvQ0FDL0JULE1BQU1TLGdCQUFnQixHQUFHNkksY0FBYztnQ0FDM0M7Z0NBQ0EsNERBQTREO2dDQUM1RCx3REFBd0Q7Z0NBQ3hELDBEQUEwRDtnQ0FDMUQsNERBQTREO2dDQUM1RCxNQUFNbkosU0FBU0gsTUFBTUcsTUFBTTtnQ0FDM0JBLE9BQU91SyxTQUFTLEdBQUcxSyxNQUFNUyxnQkFBZ0IsR0FBRztnQ0FDNUNOLE9BQU93SyxPQUFPLEdBQUdyQjtnQ0FDakIsaUVBQWlFO2dDQUNqRSx5RUFBeUU7Z0NBQ3pFLE1BQU1zQixlQUFlekssT0FBT3dLLE9BQU8sR0FBRyxJQUFJLENBQUNFLG9CQUFvQjtnQ0FDL0QsSUFBSUQsZUFBZXpLLE9BQU91SyxTQUFTLEVBQUU7b0NBQ2pDdkssT0FBT3VLLFNBQVMsR0FBR0U7Z0NBQ3ZCO2dDQUNBLElBQUl6SyxPQUFPdUssU0FBUyxHQUFHLEdBQUc7b0NBQ3RCdkssT0FBT3VLLFNBQVMsR0FBRztnQ0FDdkI7Z0NBQ0EsTUFBTUgsU0FBUyxJQUFJLENBQUNPLE9BQU8sQ0FBQzNLLFFBQVEzRSxJQUFJLENBQUMsQ0FBQ3VQO29DQUN0Qyx5QkFBeUI7b0NBQ3pCL0ssTUFBTVUsU0FBUyxHQUFHO29DQUNsQixJQUFJcUssS0FBSzdNLE1BQU0sS0FBSyxHQUFHO3dDQUNuQjtvQ0FDSjtvQ0FDQTZNLEtBQUt2TSxPQUFPLENBQUMsQ0FBQ3dNO3dDQUNWLHFEQUFxRDt3Q0FDckQsc0NBQXNDO3dDQUN0QyxJQUFJQSxJQUFJMUIsV0FBVyxHQUFHdEosTUFBTVMsZ0JBQWdCLEVBQUU7NENBQzFDVCxNQUFNUyxnQkFBZ0IsR0FBR3VLLElBQUkxQixXQUFXO3dDQUM1Qzt3Q0FDQSxzREFBc0Q7d0NBQ3RELElBQUksQ0FBQ1UsUUFBUSxDQUFDLE9BQU9nQixJQUFJQyxTQUFTLENBQUMsR0FBR0QsSUFBSTFCLFdBQVc7d0NBQ3JELElBQUksQ0FBQ1UsUUFBUSxDQUFDLE9BQU9nQixJQUFJRSxlQUFlLENBQUMsR0FBR0YsSUFBSTFCLFdBQVc7d0NBQzNELElBQUksQ0FBQzFCLElBQUksQ0FBQ3pILFFBQVE2SztvQ0FDdEI7Z0NBQ0osR0FBRzNILEtBQUssQ0FBQyxDQUFDMUI7b0NBQ04sSUFBSSxDQUFDaUcsSUFBSSxDQUFDLFNBQVNqRztvQ0FDbkIsb0RBQW9EO29DQUNwRDNCLE1BQU1VLFNBQVMsR0FBRztnQ0FDdEI7Z0NBQ0FvSixRQUFRakgsSUFBSSxDQUFDMEg7NEJBQ2pCOzRCQUNBO3dCQUNKO2dCQUNKO1lBQ0o7WUFDQSxJQUFJLENBQUM5SixnQkFBZ0IsR0FBRzZJO1lBQ3hCLG9FQUFvRTtZQUNwRXZPLFFBQVFvUSxHQUFHLENBQUNyQixTQUFTdE8sSUFBSSxDQUFDO2dCQUN0QixJQUFJLENBQUNvTSxJQUFJLENBQUMsV0FBV2lDO1lBQ3pCLEdBQUd4RyxLQUFLLENBQUMsQ0FBQzFCO2dCQUFZLElBQUksQ0FBQ2lHLElBQUksQ0FBQyxTQUFTakc7WUFBUTtZQUNqRDtRQUNKO0lBQ0o7SUFDQSw4QkFBOEI7SUFDOUJ5SixpQkFBaUI5QixXQUFXLEVBQUU7UUFDMUIsSUFBSSxDQUFDN0ksZ0JBQWdCLEdBQUc2SSxjQUFjO1FBQ3RDLElBQUksSUFBSSxDQUFDK0IsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDak8sSUFBSTtRQUNiO0lBQ0o7SUFDQSxJQUFJbUssVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDRCxRQUFRO0lBQ3hCO0lBQ0EsaUVBQWlFO0lBQ2pFLDJEQUEyRDtJQUMzREcsZ0JBQWdCO1FBQ1osT0FBT2xOLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsT0FBT2lELE9BQU93RyxVQUFVLENBQUMsK0NBQStDMUcseURBQU1BLENBQUNpRyxNQUFNLENBQUNpQixxQkFBcUIsRUFBRTtnQkFDekdDLFdBQVc7WUFDZjtRQUNKO0lBQ0o7SUFDQTdILGFBQWE7UUFDVCxPQUFPckMsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNZ04sVUFBVSxNQUFNLElBQUksQ0FBQ0YsTUFBTTtZQUNqQyxnRUFBZ0U7WUFDaEUsbUVBQW1FO1lBQ25FLCtCQUErQjtZQUMvQixNQUFNaUUsaUJBQWlCLE1BQU0sSUFBSSxDQUFDN0QsYUFBYTtZQUMvQyxJQUFJRixRQUFRZ0UsT0FBTyxLQUFLRCxlQUFlQyxPQUFPLEVBQUU7Z0JBQzVDLGdFQUFnRTtnQkFDaEUseURBQXlEO2dCQUN6RCxJQUFJLElBQUksQ0FBQzVELFVBQVUsRUFBRTtvQkFDakIsSUFBSSxDQUFDTCxRQUFRLEdBQUdnRTtvQkFDaEIsb0RBQW9EO29CQUNwRCxJQUFJLENBQUM3SyxnQkFBZ0IsR0FBRyxDQUFDO29CQUN6QixJQUFJLENBQUMrSyxnQkFBZ0IsR0FBRztvQkFDeEIsSUFBSSxDQUFDQyx1QkFBdUIsR0FBRztvQkFDL0IsSUFBSSxDQUFDQyxjQUFjLEdBQUc7b0JBQ3RCLElBQUksQ0FBQzFCLFFBQVEsQ0FBQ0MsS0FBSyxHQUFHLENBQUM7b0JBQ3ZCLElBQUksQ0FBQ04sdUJBQXVCLEdBQUcsQ0FBQztvQkFDaEMsSUFBSSxDQUFDUixvQkFBb0IsR0FBRztvQkFDNUIsOERBQThEO29CQUM5RCw0REFBNEQ7b0JBQzVELDBEQUEwRDtvQkFDMUQsSUFBSSxDQUFDdkIsSUFBSSxDQUFDLFdBQVcwRCxnQkFBZ0IvRDtvQkFDckMsTUFBTTVILE1BQU07b0JBQ1osT0FBTyxJQUFJLENBQUMySCxRQUFRO2dCQUN4QjtnQkFDQSxNQUFNM0YsUUFBUW5FLE9BQU8yTSxTQUFTLENBQUMsOEJBQThCN00seURBQU1BLENBQUNpRyxNQUFNLENBQUN1RSxhQUFhLEVBQUU7b0JBQ3RGOUgsT0FBTztvQkFDUHVILFNBQVNBO29CQUNUb0UsaUJBQWlCTDtnQkFDckI7Z0JBQ0EsSUFBSSxDQUFDMUQsSUFBSSxDQUFDLFNBQVNqRztnQkFDbkIsTUFBTUE7WUFDVjtZQUNBLE9BQU80RjtRQUNYO0lBQ0o7SUFDQSxJQUFJK0IsY0FBYztRQUNkLElBQUksQ0FBQ0wsdUJBQXVCLENBQUMsTUFBTSxJQUFJLENBQUNjLGVBQWUsR0FBRyxHQUFHdk8sSUFBSSxDQUFDLENBQUM4TjtZQUMvRCxJQUFJLENBQUNNLG1CQUFtQixDQUFDTjtRQUM3QixHQUFHLENBQUMzSCxTQUFZO1FBQ2hCLE9BQU8sSUFBSyxDQUFDNkosZ0JBQWdCLElBQUksT0FBUSxJQUFJLENBQUNBLGdCQUFnQixHQUFHLENBQUM7SUFDdEU7SUFDQSxJQUFJSCxVQUFVO1FBQ1YsT0FBUSxJQUFJLENBQUNPLE9BQU8sSUFBSTtJQUM1QjtJQUNBLElBQUlQLFFBQVF4USxLQUFLLEVBQUU7UUFDZixJQUFJQSxTQUFTLENBQUMsSUFBSSxDQUFDK1EsT0FBTyxFQUFFO1lBQ3hCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQyxZQUFZO2dCQUFRLElBQUksQ0FBQ3pPLElBQUk7WUFBSSxHQUFHLElBQUksQ0FBQzJNLGVBQWU7WUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQytCLGNBQWMsRUFBRTtnQkFDdEIsSUFBSSxDQUFDQSxjQUFjLEdBQUdqTSxXQUFXO29CQUM3QixJQUFJLENBQUN6QyxJQUFJO29CQUNULHVEQUF1RDtvQkFDdkQscURBQXFEO29CQUNyRCxJQUFJLENBQUMwTyxjQUFjLEdBQUdqTSxXQUFXO3dCQUM3Qix3REFBd0Q7d0JBQ3hELHdEQUF3RDt3QkFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQytMLE9BQU8sRUFBRTs0QkFDZixJQUFJLENBQUN4TyxJQUFJO3dCQUNiO3dCQUNBLCtDQUErQzt3QkFDL0MsSUFBSSxDQUFDME8sY0FBYyxHQUFHO29CQUMxQixHQUFHLElBQUksQ0FBQy9CLGVBQWU7Z0JBQzNCLEdBQUc7WUFDUDtRQUNKLE9BQ0ssSUFBSSxDQUFDbFAsU0FBUyxJQUFJLENBQUMrUSxPQUFPLEVBQUU7WUFDN0JHLGNBQWMsSUFBSSxDQUFDSCxPQUFPO1lBQzFCLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1FBQ25CO0lBQ0o7SUFDQSxJQUFJN0Isa0JBQWtCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDaUMsZ0JBQWdCO0lBQ2hDO0lBQ0EsSUFBSWpDLGdCQUFnQmxQLEtBQUssRUFBRTtRQUN2QixJQUFJLE9BQVFBLFVBQVcsWUFBWUEsU0FBUyxLQUFLK0osU0FBU0wsT0FBTzFKLFdBQVdBLE9BQU87WUFDL0UsTUFBTSxJQUFJMEUsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ3lNLGdCQUFnQixHQUFHblI7UUFDeEIsSUFBSSxJQUFJLENBQUMrUSxPQUFPLEVBQUU7WUFDZEcsY0FBYyxJQUFJLENBQUNILE9BQU87WUFDMUIsSUFBSSxDQUFDQSxPQUFPLEdBQUdDLFlBQVk7Z0JBQVEsSUFBSSxDQUFDek8sSUFBSTtZQUFJLEdBQUcsSUFBSSxDQUFDNE8sZ0JBQWdCO1FBQzVFO0lBQ0o7SUFDQUMsc0JBQXNCO1FBQ2xCLE1BQU1DLE1BQU16TTtRQUNaLDRDQUE0QztRQUM1QyxJQUFJLE1BQU8sSUFBSSxDQUFDaU0sY0FBYyxHQUFJLElBQUksSUFBSSxDQUFDTSxnQkFBZ0IsRUFBRTtZQUN6RCxJQUFJLENBQUNOLGNBQWMsR0FBR1E7WUFDdEIsSUFBSSxDQUFDVCx1QkFBdUIsR0FBRyxJQUFJLENBQUNVLGNBQWMsR0FBRzNRLElBQUksQ0FBQyxDQUFDOE47Z0JBQ3ZELElBQUksSUFBSSxDQUFDa0MsZ0JBQWdCLElBQUksUUFBUWxDLGNBQWMsSUFBSSxDQUFDa0MsZ0JBQWdCLEVBQUU7b0JBQ3RFLElBQUksQ0FBQ0EsZ0JBQWdCLEdBQUdsQztnQkFDNUI7Z0JBQ0EsT0FBTyxJQUFJLENBQUNrQyxnQkFBZ0I7WUFDaEM7UUFDSjtRQUNBLE9BQU8sSUFBSSxDQUFDQyx1QkFBdUI7SUFDdkM7SUFDQTdCLG9CQUFvQk4sV0FBVyxFQUFFO1FBQzdCLHFDQUFxQztRQUNyQyxJQUFJLElBQUksQ0FBQ2tDLGdCQUFnQixJQUFJLFFBQVFsQyxjQUFjLElBQUksQ0FBQ2tDLGdCQUFnQixFQUFFO1lBQ3RFO1FBQ0o7UUFDQSw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDRSxjQUFjLEdBQUdqTTtRQUN0Qiw4QkFBOEI7UUFDOUIsSUFBSSxJQUFJLENBQUMrTCxnQkFBZ0IsSUFBSSxRQUFRbEMsY0FBYyxJQUFJLENBQUNrQyxnQkFBZ0IsRUFBRTtZQUN0RSxJQUFJLENBQUNBLGdCQUFnQixHQUFHbEM7WUFDeEIsSUFBSSxDQUFDbUMsdUJBQXVCLEdBQUcxUSxRQUFRRCxPQUFPLENBQUN3TztRQUNuRDtJQUNKO0lBQ0E4QyxtQkFBbUJsQixlQUFlLEVBQUVtQixhQUFhLEVBQUVDLE9BQU8sRUFBRTtRQUN4RCxPQUFPL1IsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxPQUFPLElBQUksQ0FBQ2dTLG1CQUFtQixDQUFDckIsaUJBQWlCLGlCQUFrQixPQUFRLElBQUltQixlQUFlQyxXQUFXLEdBQUc7UUFDaEg7SUFDSjtJQUNBQyxvQkFBb0JyQixlQUFlLEVBQUVtQixhQUFhLEVBQUVDLE9BQU8sRUFBRUUsV0FBVyxFQUFFO1FBQ3RFLE9BQU9qUyxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU1rUSxVQUFVLE1BQU0sSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ1U7WUFDakQsMEJBQTBCO1lBQzFCLElBQUksQ0FBQ1QsVUFBVUEsUUFBUTRCLGFBQWEsR0FBRyxNQUFNQSxlQUFlO2dCQUN4RCxPQUFPNUI7WUFDWDtZQUNBLG9DQUFvQztZQUNwQyxPQUFPLElBQUkxUCxRQUFRLENBQUNELFNBQVNFO2dCQUN6QixNQUFNeVIsY0FBYyxFQUFFO2dCQUN0QixJQUFJbFIsT0FBTztnQkFDWCxNQUFNbVIsY0FBYztvQkFDaEIsSUFBSW5SLE1BQU07d0JBQ04sT0FBTztvQkFDWDtvQkFDQUEsT0FBTztvQkFDUGtSLFlBQVlqTyxPQUFPLENBQUMsQ0FBQ21PO3dCQUFXQTtvQkFBUTtvQkFDeEMsT0FBTztnQkFDWDtnQkFDQSxNQUFNQyxlQUFlLENBQUNuQztvQkFDbEIsSUFBSUEsUUFBUTRCLGFBQWEsR0FBR0EsZUFBZTt3QkFDdkM7b0JBQ0o7b0JBQ0EsSUFBSUssZUFBZTt3QkFDZjtvQkFDSjtvQkFDQTVSLFFBQVEyUDtnQkFDWjtnQkFDQSxJQUFJLENBQUNvQyxFQUFFLENBQUMzQixpQkFBaUIwQjtnQkFDekJILFlBQVk1SixJQUFJLENBQUM7b0JBQVEsSUFBSSxDQUFDaUssY0FBYyxDQUFDNUIsaUJBQWlCMEI7Z0JBQWU7Z0JBQzdFLElBQUlKLGFBQWE7b0JBQ2IsSUFBSU8sa0JBQWtCUCxZQUFZUSxVQUFVO29CQUM1QyxJQUFJQyxlQUFlO29CQUNuQixNQUFNQyxpQkFBaUIsQ0FBQzVELGNBQWdCL08sVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRzs0QkFDcEUsSUFBSWdCLE1BQU07Z0NBQ047NEJBQ0o7NEJBQ0EsOERBQThEOzRCQUM5RCxnRUFBZ0U7NEJBQ2hFLG1DQUFtQzs0QkFDbkMsTUFBTW9FLE1BQU07NEJBQ1osSUFBSSxDQUFDd04sbUJBQW1CLENBQUNYLFlBQVl0TCxJQUFJLEVBQUUxRixJQUFJLENBQUMsQ0FBQzRSLFFBQVU3UyxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO29DQUN2RixJQUFJZ0IsTUFBTTt3Q0FDTjtvQ0FDSjtvQ0FDQSxJQUFJNlIsU0FBU1osWUFBWVksS0FBSyxFQUFFO3dDQUM1Qkwsa0JBQWtCekQ7b0NBQ3RCLE9BQ0s7d0NBQ0QsMkNBQTJDO3dDQUMzQzs0Q0FDSSxNQUFNK0QsUUFBUSxNQUFNLElBQUksQ0FBQ0MsY0FBYyxDQUFDcEM7NENBQ3hDLElBQUltQyxTQUFTQSxNQUFNL0QsV0FBVyxJQUFJLE1BQU07Z0RBQ3BDOzRDQUNKO3dDQUNKO3dDQUNBLDBEQUEwRDt3Q0FDMUQsOERBQThEO3dDQUM5RCx3REFBd0Q7d0NBQ3hELG1CQUFtQjt3Q0FDbkIsSUFBSTJELGdCQUFnQixNQUFNOzRDQUN0QkEsZUFBZUYsa0JBQWtCOzRDQUNqQyxJQUFJRSxlQUFlVCxZQUFZUSxVQUFVLEVBQUU7Z0RBQ3ZDQyxlQUFlVCxZQUFZUSxVQUFVOzRDQUN6Qzt3Q0FDSjt3Q0FDQSxNQUFPQyxnQkFBZ0IzRCxZQUFhOzRDQUNoQyxJQUFJL04sTUFBTTtnREFDTjs0Q0FDSjs0Q0FDQSxNQUFNME8sUUFBUSxNQUFNLElBQUksQ0FBQ3NELHdCQUF3QixDQUFDTjs0Q0FDbEQsSUFBSyxJQUFJTyxLQUFLLEdBQUdBLEtBQUt2RCxNQUFNd0QsWUFBWSxDQUFDdlAsTUFBTSxFQUFFc1AsS0FBTTtnREFDbkQsTUFBTTVKLEtBQUtxRyxNQUFNd0QsWUFBWSxDQUFDRCxHQUFHO2dEQUNqQyxzQkFBc0I7Z0RBQ3RCLElBQUk1SixHQUFHMUQsSUFBSSxLQUFLZ0wsaUJBQWlCO29EQUM3QjtnREFDSjtnREFDQSw0REFBNEQ7Z0RBQzVELElBQUl0SCxHQUFHMUMsSUFBSSxLQUFLc0wsWUFBWXRMLElBQUksSUFBSTBDLEdBQUd3SixLQUFLLEtBQUtaLFlBQVlZLEtBQUssRUFBRTtvREFDaEUsSUFBSTdSLE1BQU07d0RBQ047b0RBQ0o7b0RBQ0EscUNBQXFDO29EQUNyQyxNQUFNa1AsVUFBVSxNQUFNLElBQUksQ0FBQzJCLGtCQUFrQixDQUFDeEksR0FBRzFELElBQUksRUFBRW1NO29EQUN2RCxrREFBa0Q7b0RBQ2xELElBQUlLLGVBQWU7d0RBQ2Y7b0RBQ0o7b0RBQ0EsOEJBQThCO29EQUM5QixJQUFJZ0IsU0FBUztvREFDYixJQUFJOUosR0FBRzdFLElBQUksS0FBS3lOLFlBQVl6TixJQUFJLElBQUk2RSxHQUFHVCxFQUFFLEtBQUtxSixZQUFZckosRUFBRSxJQUFJUyxHQUFHL0ksS0FBSyxDQUFDdUksRUFBRSxDQUFDb0osWUFBWTNSLEtBQUssR0FBRzt3REFDNUY2UyxTQUFTO29EQUNiLE9BQ0ssSUFBSTlKLEdBQUc3RSxJQUFJLEtBQUssUUFBUTZFLEdBQUcxQyxJQUFJLEtBQUswQyxHQUFHVCxFQUFFLElBQUlTLEdBQUcvSSxLQUFLLENBQUNrTCxNQUFNLElBQUk7d0RBQ2pFMkgsU0FBUztvREFDYjtvREFDQSwrQkFBK0I7b0RBQy9CMVMsT0FBT3dDLE9BQU8yTSxTQUFTLENBQUMsNEJBQTRCN00seURBQU1BLENBQUNpRyxNQUFNLENBQUNvSyxvQkFBb0IsRUFBRTt3REFDcEZDLFdBQVlGLFdBQVcsY0FBY0EsV0FBVzt3REFDaERBO3dEQUNBRyxhQUFhLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNsSzt3REFDbkMxRCxNQUFNZ0w7d0RBQ05UO29EQUNKO29EQUNBO2dEQUNKOzRDQUNKOzRDQUNBd0M7d0NBQ0o7b0NBQ0o7b0NBQ0EsSUFBSTFSLE1BQU07d0NBQ047b0NBQ0o7b0NBQ0EsSUFBSSxDQUFDaUYsSUFBSSxDQUFDLFNBQVMwTTtnQ0FDdkIsSUFBSSxDQUFDdkw7Z0NBQ0QsSUFBSXBHLE1BQU07b0NBQ047Z0NBQ0o7Z0NBQ0EsSUFBSSxDQUFDaUYsSUFBSSxDQUFDLFNBQVMwTTs0QkFDdkI7d0JBQ0o7b0JBQ0EsSUFBSTNSLE1BQU07d0JBQ047b0JBQ0o7b0JBQ0EsSUFBSSxDQUFDaUYsSUFBSSxDQUFDLFNBQVMwTTtvQkFDbkJULFlBQVk1SixJQUFJLENBQUM7d0JBQ2IsSUFBSSxDQUFDaUssY0FBYyxDQUFDLFNBQVNJO29CQUNqQztnQkFDSjtnQkFDQSxJQUFJLE9BQVFaLFlBQWEsWUFBWUEsVUFBVSxHQUFHO29CQUM5QyxNQUFNeUIsUUFBUWxPLFdBQVc7d0JBQ3JCLElBQUk2TSxlQUFlOzRCQUNmO3dCQUNKO3dCQUNBMVIsT0FBT3dDLE9BQU8yTSxTQUFTLENBQUMsb0JBQW9CN00seURBQU1BLENBQUNpRyxNQUFNLENBQUN5SyxPQUFPLEVBQUU7NEJBQUUxQixTQUFTQTt3QkFBUTtvQkFDMUYsR0FBR0E7b0JBQ0gsSUFBSXlCLE1BQU1FLEtBQUssRUFBRTt3QkFDYkYsTUFBTUUsS0FBSztvQkFDZjtvQkFDQXhCLFlBQVk1SixJQUFJLENBQUM7d0JBQVFxTCxhQUFhSDtvQkFBUTtnQkFDbEQ7WUFDSjtRQUNKO0lBQ0o7SUFDQTVCLGlCQUFpQjtRQUNiLE9BQU81UixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE9BQU8sSUFBSSxDQUFDME8sdUJBQXVCLENBQUM7UUFDeEM7SUFDSjtJQUNBa0YsY0FBYztRQUNWLE9BQU81VCxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNdEIsU0FBUyxNQUFNLElBQUksQ0FBQ21PLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDbEQsSUFBSTtnQkFDQSxPQUFPMU4sK0RBQVNBLENBQUNtRixJQUFJLENBQUM1RjtZQUMxQixFQUNBLE9BQU9xRyxPQUFPO2dCQUNWLE9BQU9uRSxPQUFPd0csVUFBVSxDQUFDLDJCQUEyQjFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO29CQUM1RXFGLFFBQVE7b0JBQ1I5UztvQkFBUXFHO2dCQUNaO1lBQ0o7UUFDSjtJQUNKO0lBQ0EwTSxXQUFXQyxhQUFhLEVBQUVDLFFBQVEsRUFBRTtRQUNoQyxPQUFPaFUsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNLElBQUksQ0FBQ3FDLFVBQVU7WUFDckIsTUFBTTRSLFNBQVMsTUFBTXpSLDRFQUFpQkEsQ0FBQztnQkFDbkN5QyxTQUFTLElBQUksQ0FBQzJFLFdBQVcsQ0FBQ21LO2dCQUMxQkMsVUFBVSxJQUFJLENBQUNFLFlBQVksQ0FBQ0Y7WUFDaEM7WUFDQSxNQUFNalQsU0FBUyxNQUFNLElBQUksQ0FBQ21PLE9BQU8sQ0FBQyxjQUFjK0U7WUFDaEQsSUFBSTtnQkFDQSxPQUFPelMsK0RBQVNBLENBQUNtRixJQUFJLENBQUM1RjtZQUMxQixFQUNBLE9BQU9xRyxPQUFPO2dCQUNWLE9BQU9uRSxPQUFPd0csVUFBVSxDQUFDLDJCQUEyQjFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO29CQUM1RXFGLFFBQVE7b0JBQ1JJO29CQUFRbFQ7b0JBQVFxRztnQkFDcEI7WUFDSjtRQUNKO0lBQ0o7SUFDQXdMLG9CQUFvQm1CLGFBQWEsRUFBRUMsUUFBUSxFQUFFO1FBQ3pDLE9BQU9oVSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNNFIsU0FBUyxNQUFNelIsNEVBQWlCQSxDQUFDO2dCQUNuQ3lDLFNBQVMsSUFBSSxDQUFDMkUsV0FBVyxDQUFDbUs7Z0JBQzFCQyxVQUFVLElBQUksQ0FBQ0UsWUFBWSxDQUFDRjtZQUNoQztZQUNBLE1BQU1qVCxTQUFTLE1BQU0sSUFBSSxDQUFDbU8sT0FBTyxDQUFDLHVCQUF1QitFO1lBQ3pELElBQUk7Z0JBQ0EsT0FBT3pTLCtEQUFTQSxDQUFDbUYsSUFBSSxDQUFDNUYsUUFBUXVHLFFBQVE7WUFDMUMsRUFDQSxPQUFPRixPQUFPO2dCQUNWLE9BQU9uRSxPQUFPd0csVUFBVSxDQUFDLDJCQUEyQjFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO29CQUM1RXFGLFFBQVE7b0JBQ1JJO29CQUFRbFQ7b0JBQVFxRztnQkFDcEI7WUFDSjtRQUNKO0lBQ0o7SUFDQStNLFFBQVFKLGFBQWEsRUFBRUMsUUFBUSxFQUFFO1FBQzdCLE9BQU9oVSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNNFIsU0FBUyxNQUFNelIsNEVBQWlCQSxDQUFDO2dCQUNuQ3lDLFNBQVMsSUFBSSxDQUFDMkUsV0FBVyxDQUFDbUs7Z0JBQzFCQyxVQUFVLElBQUksQ0FBQ0UsWUFBWSxDQUFDRjtZQUNoQztZQUNBLE1BQU1qVCxTQUFTLE1BQU0sSUFBSSxDQUFDbU8sT0FBTyxDQUFDLFdBQVcrRTtZQUM3QyxJQUFJO2dCQUNBLE9BQU9uUyw2REFBT0EsQ0FBQ2Y7WUFDbkIsRUFDQSxPQUFPcUcsT0FBTztnQkFDVixPQUFPbkUsT0FBT3dHLFVBQVUsQ0FBQywyQkFBMkIxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ3dGLFlBQVksRUFBRTtvQkFDNUVxRixRQUFRO29CQUNSSTtvQkFBUWxUO29CQUFRcUc7Z0JBQ3BCO1lBQ0o7UUFDSjtJQUNKO0lBQ0FnTixhQUFhTCxhQUFhLEVBQUVNLFFBQVEsRUFBRUwsUUFBUSxFQUFFO1FBQzVDLE9BQU9oVSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNNFIsU0FBUyxNQUFNelIsNEVBQWlCQSxDQUFDO2dCQUNuQ3lDLFNBQVMsSUFBSSxDQUFDMkUsV0FBVyxDQUFDbUs7Z0JBQzFCQyxVQUFVLElBQUksQ0FBQ0UsWUFBWSxDQUFDRjtnQkFDNUJLLFVBQVU3VCxRQUFRRCxPQUFPLENBQUM4VCxVQUFVcFQsSUFBSSxDQUFDLENBQUNxVCxJQUFNdlMsOERBQVFBLENBQUN1UztZQUM3RDtZQUNBLE1BQU12VCxTQUFTLE1BQU0sSUFBSSxDQUFDbU8sT0FBTyxDQUFDLGdCQUFnQitFO1lBQ2xELElBQUk7Z0JBQ0EsT0FBT25TLDZEQUFPQSxDQUFDZjtZQUNuQixFQUNBLE9BQU9xRyxPQUFPO2dCQUNWLE9BQU9uRSxPQUFPd0csVUFBVSxDQUFDLDJCQUEyQjFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDd0YsWUFBWSxFQUFFO29CQUM1RXFGLFFBQVE7b0JBQ1JJO29CQUFRbFQ7b0JBQVFxRztnQkFDcEI7WUFDSjtRQUNKO0lBQ0o7SUFDQSx1RUFBdUU7SUFDdkVtTSxpQkFBaUJsSyxFQUFFLEVBQUUxRCxJQUFJLEVBQUU4TSxVQUFVLEVBQUU7UUFDbkMsSUFBSTlNLFFBQVEsUUFBUS9ELG1FQUFhQSxDQUFDK0QsVUFBVSxJQUFJO1lBQzVDLE1BQU0sSUFBSVgsTUFBTTtRQUNwQjtRQUNBLE1BQU1qRSxTQUFTc0k7UUFDZix1RUFBdUU7UUFDdkUsSUFBSTFELFFBQVEsUUFBUTBELEdBQUcxRCxJQUFJLEtBQUtBLE1BQU07WUFDbEMxQyxPQUFPd0csVUFBVSxDQUFDLDREQUE0RDFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDbUUsYUFBYSxFQUFFO2dCQUFFb0gsY0FBY2xMLEdBQUcxRCxJQUFJO2dCQUFFNk8sY0FBYzdPO1lBQUs7UUFDM0o7UUFDQTVFLE9BQU8wVCxJQUFJLEdBQUcsQ0FBQ0MsVUFBVTNDLFVBQVkvUixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO2dCQUNqRSxJQUFJMFUsWUFBWSxNQUFNO29CQUNsQkEsV0FBVztnQkFDZjtnQkFDQSxJQUFJM0MsV0FBVyxNQUFNO29CQUNqQkEsVUFBVTtnQkFDZDtnQkFDQSx3Q0FBd0M7Z0JBQ3hDLElBQUl1QixjQUFjOUY7Z0JBQ2xCLElBQUlrSCxhQUFhLEtBQUtqQyxjQUFjLE1BQU07b0JBQ3RDYSxjQUFjO3dCQUNWOU8sTUFBTTZFLEdBQUc3RSxJQUFJO3dCQUNibUMsTUFBTTBDLEdBQUcxQyxJQUFJO3dCQUNia00sT0FBT3hKLEdBQUd3SixLQUFLO3dCQUNmakssSUFBSVMsR0FBR1QsRUFBRTt3QkFDVHRJLE9BQU8rSSxHQUFHL0ksS0FBSzt3QkFDZm1TO29CQUNKO2dCQUNKO2dCQUNBLE1BQU12QyxVQUFVLE1BQU0sSUFBSSxDQUFDOEIsbUJBQW1CLENBQUMzSSxHQUFHMUQsSUFBSSxFQUFFK08sVUFBVTNDLFNBQVN1QjtnQkFDM0UsSUFBSXBELFdBQVcsUUFBUXdFLGFBQWEsR0FBRztvQkFDbkMsT0FBTztnQkFDWDtnQkFDQSxvRUFBb0U7Z0JBQ3BFLElBQUksQ0FBQ2pGLFFBQVEsQ0FBQyxPQUFPcEcsR0FBRzFELElBQUksQ0FBQyxHQUFHdUssUUFBUW5CLFdBQVc7Z0JBQ25ELElBQUltQixRQUFROUIsTUFBTSxLQUFLLEdBQUc7b0JBQ3RCbkwsT0FBT3dHLFVBQVUsQ0FBQyxzQkFBc0IxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFO3dCQUNsRTBILGlCQUFpQnRILEdBQUcxRCxJQUFJO3dCQUN4QitELGFBQWFMO3dCQUNiNkcsU0FBU0E7b0JBQ2I7Z0JBQ0o7Z0JBQ0EsT0FBT0E7WUFDWDtRQUNBLE9BQU9uUDtJQUNYO0lBQ0E0VCxnQkFBZ0JDLGlCQUFpQixFQUFFO1FBQy9CLE9BQU81VSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNd1MsUUFBUSxNQUFNclUsUUFBUUQsT0FBTyxDQUFDcVUsbUJBQW1CM1QsSUFBSSxDQUFDNlQsQ0FBQUEsSUFBS2hULDZEQUFPQSxDQUFDZ1Q7WUFDekUsTUFBTXpMLEtBQUssSUFBSSxDQUFDYyxTQUFTLENBQUNULFdBQVcsQ0FBQ2tMO1lBQ3RDLElBQUl2TCxHQUFHeUksYUFBYSxJQUFJLE1BQU07Z0JBQzFCekksR0FBR3lJLGFBQWEsR0FBRztZQUN2QjtZQUNBLE1BQU0vQyxjQUFjLE1BQU0sSUFBSSxDQUFDTCx1QkFBdUIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDYyxlQUFlO1lBQ3JGLElBQUk7Z0JBQ0EsTUFBTTdKLE9BQU8sTUFBTSxJQUFJLENBQUN1SixPQUFPLENBQUMsbUJBQW1CO29CQUFFMEYsbUJBQW1CQztnQkFBTTtnQkFDOUUsT0FBTyxJQUFJLENBQUN0QixnQkFBZ0IsQ0FBQ2xLLElBQUkxRCxNQUFNb0o7WUFDM0MsRUFDQSxPQUFPM0gsT0FBTztnQkFDVkEsTUFBTXNDLFdBQVcsR0FBR0w7Z0JBQ3BCakMsTUFBTXVKLGVBQWUsR0FBR3RILEdBQUcxRCxJQUFJO2dCQUMvQixNQUFNeUI7WUFDVjtRQUNKO0lBQ0o7SUFDQTJOLHVCQUF1QnJMLFdBQVcsRUFBRTtRQUNoQyxPQUFPMUosVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxNQUFNZ1YsU0FBUyxNQUFNdEw7WUFDckIsTUFBTUwsS0FBSyxDQUFDO1lBQ1o7Z0JBQUM7Z0JBQVE7YUFBSyxDQUFDcEYsT0FBTyxDQUFDLENBQUN1STtnQkFDcEIsSUFBSXdJLE1BQU0sQ0FBQ3hJLElBQUksSUFBSSxNQUFNO29CQUNyQjtnQkFDSjtnQkFDQW5ELEVBQUUsQ0FBQ21ELElBQUksR0FBR2hNLFFBQVFELE9BQU8sQ0FBQ3lVLE1BQU0sQ0FBQ3hJLElBQUksRUFBRXZMLElBQUksQ0FBQyxDQUFDZ1UsSUFBT0EsSUFBSSxJQUFJLENBQUNyTCxXQUFXLENBQUNxTCxLQUFLO1lBQ2xGO1lBQ0E7Z0JBQUM7Z0JBQVk7Z0JBQVk7Z0JBQWdCO2dCQUF3QjthQUFRLENBQUNoUixPQUFPLENBQUMsQ0FBQ3VJO2dCQUMvRSxJQUFJd0ksTUFBTSxDQUFDeEksSUFBSSxJQUFJLE1BQU07b0JBQ3JCO2dCQUNKO2dCQUNBbkQsRUFBRSxDQUFDbUQsSUFBSSxHQUFHaE0sUUFBUUQsT0FBTyxDQUFDeVUsTUFBTSxDQUFDeEksSUFBSSxFQUFFdkwsSUFBSSxDQUFDLENBQUNnVSxJQUFPQSxJQUFJelQsK0RBQVNBLENBQUNtRixJQUFJLENBQUNzTyxLQUFLO1lBQ2hGO1lBQ0E7Z0JBQUM7YUFBTyxDQUFDaFIsT0FBTyxDQUFDLENBQUN1STtnQkFDZCxJQUFJd0ksTUFBTSxDQUFDeEksSUFBSSxJQUFJLE1BQU07b0JBQ3JCO2dCQUNKO2dCQUNBbkQsRUFBRSxDQUFDbUQsSUFBSSxHQUFHaE0sUUFBUUQsT0FBTyxDQUFDeVUsTUFBTSxDQUFDeEksSUFBSSxFQUFFdkwsSUFBSSxDQUFDLENBQUNnVSxJQUFPLEtBQU0sT0FBUUEsSUFBSTtZQUMxRTtZQUNBLElBQUlELE9BQU9FLFVBQVUsRUFBRTtnQkFDbkI3TCxHQUFHNkwsVUFBVSxHQUFHLElBQUksQ0FBQy9LLFNBQVMsQ0FBQytLLFVBQVUsQ0FBQ0YsT0FBT0UsVUFBVTtZQUMvRDtZQUNBO2dCQUFDO2FBQU8sQ0FBQ2pSLE9BQU8sQ0FBQyxDQUFDdUk7Z0JBQ2QsSUFBSXdJLE1BQU0sQ0FBQ3hJLElBQUksSUFBSSxNQUFNO29CQUNyQjtnQkFDSjtnQkFDQW5ELEVBQUUsQ0FBQ21ELElBQUksR0FBR2hNLFFBQVFELE9BQU8sQ0FBQ3lVLE1BQU0sQ0FBQ3hJLElBQUksRUFBRXZMLElBQUksQ0FBQyxDQUFDZ1UsSUFBT0EsSUFBSW5ULDZEQUFPQSxDQUFDbVQsS0FBSztZQUN6RTtZQUNBLE9BQU8sSUFBSSxDQUFDOUssU0FBUyxDQUFDZ0wsa0JBQWtCLENBQUMsT0FBTTNTLDRFQUFpQkEsQ0FBQzZHLEdBQUU7UUFDdkU7SUFDSjtJQUNBK0wsV0FBV3hQLE1BQU0sRUFBRTtRQUNmLE9BQU81RixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DNEYsU0FBUyxNQUFNQTtZQUNmLE1BQU03RSxTQUFTLENBQUM7WUFDaEIsSUFBSTZFLE9BQU9YLE9BQU8sSUFBSSxNQUFNO2dCQUN4QmxFLE9BQU9rRSxPQUFPLEdBQUcsSUFBSSxDQUFDMkUsV0FBVyxDQUFDaEUsT0FBT1gsT0FBTztZQUNwRDtZQUNBO2dCQUFDO2dCQUFhO2FBQVMsQ0FBQ2hCLE9BQU8sQ0FBQyxDQUFDdUk7Z0JBQzdCLElBQUk1RyxNQUFNLENBQUM0RyxJQUFJLElBQUksTUFBTTtvQkFDckI7Z0JBQ0o7Z0JBQ0F6TCxNQUFNLENBQUN5TCxJQUFJLEdBQUc1RyxNQUFNLENBQUM0RyxJQUFJO1lBQzdCO1lBQ0E7Z0JBQUM7Z0JBQWE7YUFBVSxDQUFDdkksT0FBTyxDQUFDLENBQUN1STtnQkFDOUIsSUFBSTVHLE1BQU0sQ0FBQzRHLElBQUksSUFBSSxNQUFNO29CQUNyQjtnQkFDSjtnQkFDQXpMLE1BQU0sQ0FBQ3lMLElBQUksR0FBRyxJQUFJLENBQUMwSCxZQUFZLENBQUN0TyxNQUFNLENBQUM0RyxJQUFJO1lBQy9DO1lBQ0EsT0FBTyxJQUFJLENBQUNyQyxTQUFTLENBQUN2RSxNQUFNLENBQUMsT0FBTXBELDRFQUFpQkEsQ0FBQ3pCLE9BQU07UUFDL0Q7SUFDSjtJQUNBc1UsTUFBTTNMLFdBQVcsRUFBRXNLLFFBQVEsRUFBRXNCLE9BQU8sRUFBRTtRQUNsQyxPQUFPdFYsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyxJQUFJc1YsV0FBV25TLG9CQUFvQjtnQkFDL0JGLE9BQU93RyxVQUFVLENBQUMsMkNBQTJDMUcseURBQU1BLENBQUNpRyxNQUFNLENBQUN3RixZQUFZLEVBQUU7b0JBQ3JGK0csV0FBV0Q7b0JBQVM1TDtnQkFDeEI7WUFDSjtZQUNBLE1BQU04TCxXQUFXOUwsWUFBWWQsRUFBRTtZQUMvQixNQUFNN0gsU0FBUyxNQUFNLElBQUksQ0FBQ21PLE9BQU8sQ0FBQyxRQUFRO2dCQUFFeEY7Z0JBQWFzSztZQUFTO1lBQ2xFLDRFQUE0RTtZQUM1RSxJQUFJc0IsV0FBVyxLQUFLdEIsYUFBYSxZQUFZd0IsWUFBWSxRQUFRelUsT0FBTzJHLFNBQVMsQ0FBQyxHQUFHLFFBQVEsZ0JBQWlCOUYsbUVBQWFBLENBQUNiLFVBQVUsT0FBTyxHQUFJO2dCQUM3SSxJQUFJO29CQUNBLE1BQU15RCxPQUFPM0Msa0VBQVlBLENBQUNkLFFBQVE7b0JBQ2xDLGlFQUFpRTtvQkFDakUsTUFBTStNLFNBQVNqTSxrRUFBWUEsQ0FBQzJDLE1BQU0sR0FBRztvQkFDckMsSUFBSSxDQUFDaEQsK0RBQVNBLENBQUNtRixJQUFJLENBQUNtSCxRQUFRakYsRUFBRSxDQUFDMk0sV0FBVzt3QkFDdEN2UyxPQUFPd0csVUFBVSxDQUFDLGtDQUFrQzFHLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDQyxjQUFjLEVBQUU7NEJBQzlFTSxNQUFNOzRCQUNOa00sV0FBVzs0QkFDWC9MOzRCQUFhbEYsTUFBTXpEO3dCQUN2QjtvQkFDSjtvQkFDQSxrQ0FBa0M7b0JBQ2xDLE1BQU02TSxPQUFPLEVBQUU7b0JBQ2YsTUFBTThILGFBQWFsVSwrREFBU0EsQ0FBQ21GLElBQUksQ0FBQzlFLGtFQUFZQSxDQUFDMkMsTUFBTSxJQUFJLEtBQUs4QyxRQUFRO29CQUN0RSxNQUFNcU8sYUFBYW5VLCtEQUFTQSxDQUFDbUYsSUFBSSxDQUFDOUUsa0VBQVlBLENBQUMyQyxNQUFNa1IsWUFBWUEsYUFBYSxLQUFLcE8sUUFBUTtvQkFDM0YsTUFBTXNPLFdBQVcvVCxrRUFBWUEsQ0FBQzJDLE1BQU1rUixhQUFhO29CQUNqRCxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUYsWUFBWUUsSUFBSzt3QkFDakMsTUFBTTVLLE1BQU1oRSxhQUFhMk8sVUFBVUMsSUFBSTt3QkFDdkMsSUFBSTVLLE9BQU8sTUFBTTs0QkFDYmhJLE9BQU93RyxVQUFVLENBQUMsMENBQTBDMUcseURBQU1BLENBQUNpRyxNQUFNLENBQUNDLGNBQWMsRUFBRTtnQ0FDdEZNLE1BQU07Z0NBQ05rTSxXQUFXO2dDQUNYL0w7Z0NBQWFsRixNQUFNekQ7NEJBQ3ZCO3dCQUNKO3dCQUNBNk0sS0FBS3RGLElBQUksQ0FBQzJDO29CQUNkO29CQUNBLG1DQUFtQztvQkFDbkMsTUFBTTBDLFdBQVd4RyxZQUFZM0MsTUFBTTtvQkFDbkMsb0NBQW9DO29CQUNwQyxJQUFJLENBQUNoRCwrREFBU0EsQ0FBQ21GLElBQUksQ0FBQzlFLGtFQUFZQSxDQUFDMkMsTUFBTSxLQUFLLE1BQU1nSCxNQUFNLElBQUk7d0JBQ3hEdkksT0FBT3dHLFVBQVUsQ0FBQyw2Q0FBNkMxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFOzRCQUN6Rk0sTUFBTTs0QkFDTmtNLFdBQVc7NEJBQ1gvTDs0QkFBYWxGLE1BQU16RDt3QkFDdkI7b0JBQ0o7b0JBQ0EsTUFBTStVLG1CQUFtQmpVLGtFQUFZQSxDQUFDMkMsTUFBTSxJQUFJO29CQUNoRCw2REFBNkQ7b0JBQzdELE1BQU11UixZQUFZNU8sWUFBWTNDLE1BQU07b0JBQ3BDLE1BQU13UixhQUFhLE1BQU0sSUFBSSxDQUFDdEksYUFBYSxDQUFDaEUsYUFBYWlFLFVBQVVDO29CQUNuRSxJQUFJb0ksY0FBYyxNQUFNO3dCQUNwQi9TLE9BQU93RyxVQUFVLENBQUMsMENBQTBDMUcseURBQU1BLENBQUNpRyxNQUFNLENBQUNDLGNBQWMsRUFBRTs0QkFDdEZNLE1BQU07NEJBQ05rTSxXQUFXOzRCQUNYL0w7NEJBQWFsRixNQUFNekQ7d0JBQ3ZCO29CQUNKO29CQUNBLE1BQU1zSSxLQUFLO3dCQUNQVCxJQUFJNE07d0JBQ0poUixNQUFNN0MsK0RBQVNBLENBQUM7NEJBQUNtVTs0QkFBa0I1TixZQUFZO2dDQUFDOE47Z0NBQVlEOzZCQUFVO3lCQUFFO29CQUM1RTtvQkFDQSxPQUFPLElBQUksQ0FBQ1YsS0FBSyxDQUFDaE0sSUFBSTJLLFVBQVVzQixVQUFVO2dCQUM5QyxFQUNBLE9BQU9sTyxPQUFPO29CQUNWLElBQUlBLE1BQU0yQixJQUFJLEtBQUtoRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ3dGLFlBQVksRUFBRTt3QkFDM0MsTUFBTXBIO29CQUNWO2dCQUNKO1lBQ0o7WUFDQSxJQUFJO2dCQUNBLE9BQU90Riw2REFBT0EsQ0FBQ2Y7WUFDbkIsRUFDQSxPQUFPcUcsT0FBTztnQkFDVixPQUFPbkUsT0FBT3dHLFVBQVUsQ0FBQywyQkFBMkIxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ3dGLFlBQVksRUFBRTtvQkFDNUVxRixRQUFRO29CQUNSSSxRQUFRO3dCQUFFdks7d0JBQWFzSztvQkFBUztvQkFBR2pUO29CQUFRcUc7Z0JBQy9DO1lBQ0o7UUFDSjtJQUNKO0lBQ0F1QixLQUFLZSxXQUFXLEVBQUVzSyxRQUFRLEVBQUU7UUFDeEIsT0FBT2hVLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxJQUFJLENBQUNxQyxVQUFVO1lBQ3JCLE1BQU00VCxXQUFXLE1BQU16VCw0RUFBaUJBLENBQUM7Z0JBQ3JDa0gsYUFBYSxJQUFJLENBQUNxTCxzQkFBc0IsQ0FBQ3JMO2dCQUN6Q3NLLFVBQVUsSUFBSSxDQUFDRSxZQUFZLENBQUNGO2dCQUM1QjFLLGlCQUFpQjlJLFFBQVFELE9BQU8sQ0FBQ21KLFlBQVlKLGVBQWU7WUFDaEU7WUFDQSxPQUFPLElBQUksQ0FBQytMLEtBQUssQ0FBQ1ksU0FBU3ZNLFdBQVcsRUFBRXVNLFNBQVNqQyxRQUFRLEVBQUVpQyxTQUFTM00sZUFBZSxHQUFHLElBQUksQ0FBQztRQUMvRjtJQUNKO0lBQ0E0TSxZQUFZeE0sV0FBVyxFQUFFO1FBQ3JCLE9BQU8xSixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQixNQUFNNFIsU0FBUyxNQUFNelIsNEVBQWlCQSxDQUFDO2dCQUNuQ2tILGFBQWEsSUFBSSxDQUFDcUwsc0JBQXNCLENBQUNyTDtZQUM3QztZQUNBLE1BQU0zSSxTQUFTLE1BQU0sSUFBSSxDQUFDbU8sT0FBTyxDQUFDLGVBQWUrRTtZQUNqRCxJQUFJO2dCQUNBLE9BQU96UywrREFBU0EsQ0FBQ21GLElBQUksQ0FBQzVGO1lBQzFCLEVBQ0EsT0FBT3FHLE9BQU87Z0JBQ1YsT0FBT25FLE9BQU93RyxVQUFVLENBQUMsMkJBQTJCMUcseURBQU1BLENBQUNpRyxNQUFNLENBQUN3RixZQUFZLEVBQUU7b0JBQzVFcUYsUUFBUTtvQkFDUkk7b0JBQVFsVDtvQkFBUXFHO2dCQUNwQjtZQUNKO1FBQ0o7SUFDSjtJQUNBd0MsWUFBWW1LLGFBQWEsRUFBRTtRQUN2QixPQUFPL1QsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQytULGdCQUFnQixNQUFNQTtZQUN0QixJQUFJLE9BQVFBLGtCQUFtQixVQUFVO2dCQUNyQzlRLE9BQU9LLGtCQUFrQixDQUFDLCtCQUErQixRQUFReVE7WUFDckU7WUFDQSxNQUFNOU8sVUFBVSxNQUFNLElBQUksQ0FBQ2tSLFdBQVcsQ0FBQ3BDO1lBQ3ZDLElBQUk5TyxXQUFXLE1BQU07Z0JBQ2pCaEMsT0FBT3dHLFVBQVUsQ0FBQywyQkFBMkIxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ2lCLHFCQUFxQixFQUFFO29CQUM5RUMsV0FBVyxlQUE2QyxPQUE5QjJCLEtBQUtDLFNBQVMsQ0FBQ2lJLGdCQUFlO2dCQUM1RDtZQUNKO1lBQ0EsT0FBTzlPO1FBQ1g7SUFDSjtJQUNBbVIsVUFBVUMsbUJBQW1CLEVBQUVDLG1CQUFtQixFQUFFO1FBQ2hELE9BQU90VyxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQmdVLHNCQUFzQixNQUFNQTtZQUM1Qix3RUFBd0U7WUFDeEUsSUFBSXRILGNBQWMsQ0FBQztZQUNuQixNQUFNa0YsU0FBUztnQkFDWHFDLHFCQUFxQixDQUFDLENBQUNBO1lBQzNCO1lBQ0EsSUFBSXJVLGlFQUFXQSxDQUFDb1UscUJBQXFCLEtBQUs7Z0JBQ3RDcEMsT0FBT3ZELFNBQVMsR0FBRzJGO1lBQ3ZCLE9BQ0s7Z0JBQ0QsSUFBSTtvQkFDQXBDLE9BQU9ELFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQ0UsWUFBWSxDQUFDbUM7b0JBQzFDLElBQUlwVSxpRUFBV0EsQ0FBQ2dTLE9BQU9ELFFBQVEsR0FBRzt3QkFDOUJqRixjQUFjMUUsU0FBUzRKLE9BQU9ELFFBQVEsQ0FBQ3RNLFNBQVMsQ0FBQyxJQUFJO29CQUN6RDtnQkFDSixFQUNBLE9BQU9OLE9BQU87b0JBQ1ZuRSxPQUFPSyxrQkFBa0IsQ0FBQyxtQ0FBbUMsdUJBQXVCK1M7Z0JBQ3hGO1lBQ0o7WUFDQSxPQUFPeFQseURBQUlBLENBQUMsSUFBTTdDLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7b0JBQzlDLE1BQU0wUCxRQUFRLE1BQU0sSUFBSSxDQUFDUixPQUFPLENBQUMsWUFBWStFO29CQUM3QyxzQkFBc0I7b0JBQ3RCLElBQUl2RSxTQUFTLE1BQU07d0JBQ2YsbUVBQW1FO3dCQUNuRSxrRUFBa0U7d0JBQ2xFLHNEQUFzRDt3QkFDdEQsSUFBSXVFLE9BQU92RCxTQUFTLElBQUksTUFBTTs0QkFDMUIsSUFBSSxJQUFJLENBQUNqQixRQUFRLENBQUMsT0FBT3dFLE9BQU92RCxTQUFTLENBQUMsSUFBSSxNQUFNO2dDQUNoRCxPQUFPOzRCQUNYO3dCQUNKO3dCQUNBLHNFQUFzRTt3QkFDdEUsSUFBSXVELE9BQU9ELFFBQVEsSUFBSSxNQUFNOzRCQUN6QixJQUFJakYsY0FBYyxJQUFJLENBQUNVLFFBQVEsQ0FBQ0MsS0FBSyxFQUFFO2dDQUNuQyxPQUFPOzRCQUNYO3dCQUNKO3dCQUNBLDBCQUEwQjt3QkFDMUIsT0FBT2xDO29CQUNYO29CQUNBLG1CQUFtQjtvQkFDbkIsSUFBSThJLHFCQUFxQjt3QkFDckIsSUFBSXZILGNBQWM7d0JBQ2xCLElBQUssSUFBSTFHLElBQUksR0FBR0EsSUFBSXFILE1BQU13RCxZQUFZLENBQUN2UCxNQUFNLEVBQUUwRSxJQUFLOzRCQUNoRCxNQUFNZ0IsS0FBS3FHLE1BQU13RCxZQUFZLENBQUM3SyxFQUFFOzRCQUNoQyxJQUFJZ0IsR0FBRzBGLFdBQVcsSUFBSSxNQUFNO2dDQUN4QjFGLEdBQUd5SSxhQUFhLEdBQUc7NEJBQ3ZCLE9BQ0ssSUFBSXpJLEdBQUd5SSxhQUFhLElBQUksTUFBTTtnQ0FDL0IsSUFBSS9DLGVBQWUsTUFBTTtvQ0FDckJBLGNBQWMsTUFBTSxJQUFJLENBQUNMLHVCQUF1QixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNjLGVBQWU7Z0NBQ25GO2dDQUNBLGtFQUFrRTtnQ0FDbEUsSUFBSXNDLGdCQUFnQixjQUFlekksR0FBRzBGLFdBQVcsR0FBSTtnQ0FDckQsSUFBSStDLGlCQUFpQixHQUFHO29DQUNwQkEsZ0JBQWdCO2dDQUNwQjtnQ0FDQXpJLEdBQUd5SSxhQUFhLEdBQUdBOzRCQUN2Qjt3QkFDSjt3QkFDQSxNQUFNeUUsZUFBZSxJQUFJLENBQUNwTSxTQUFTLENBQUNxTSxxQkFBcUIsQ0FBQzlHO3dCQUMxRDZHLGFBQWFyRCxZQUFZLEdBQUdxRCxhQUFhckQsWUFBWSxDQUFDclAsR0FBRyxDQUFDLENBQUN3RixLQUFPLElBQUksQ0FBQ2tLLGdCQUFnQixDQUFDbEs7d0JBQ3hGLE9BQU9rTjtvQkFDWDtvQkFDQSxPQUFPLElBQUksQ0FBQ3BNLFNBQVMsQ0FBQ3VGLEtBQUssQ0FBQ0E7Z0JBQ2hDLElBQUk7Z0JBQUUrRyxVQUFVLElBQUk7WUFBQztRQUN6QjtJQUNKO0lBQ0FDLFNBQVNMLG1CQUFtQixFQUFFO1FBQzFCLE9BQVEsSUFBSSxDQUFDRCxTQUFTLENBQUNDLHFCQUFxQjtJQUNoRDtJQUNBckQseUJBQXlCcUQsbUJBQW1CLEVBQUU7UUFDMUMsT0FBUSxJQUFJLENBQUNELFNBQVMsQ0FBQ0MscUJBQXFCO0lBQ2hEO0lBQ0F0RCxlQUFlcEMsZUFBZSxFQUFFO1FBQzVCLE9BQU8zUSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQnNPLGtCQUFrQixNQUFNQTtZQUN4QixNQUFNc0QsU0FBUztnQkFBRXRELGlCQUFpQixJQUFJLENBQUN4RyxTQUFTLENBQUN4RSxJQUFJLENBQUNnTCxpQkFBaUI7WUFBTTtZQUM3RSxPQUFPOU4seURBQUlBLENBQUMsSUFBTTdDLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7b0JBQzlDLE1BQU1lLFNBQVMsTUFBTSxJQUFJLENBQUNtTyxPQUFPLENBQUMsa0JBQWtCK0U7b0JBQ3BELElBQUlsVCxVQUFVLE1BQU07d0JBQ2hCLElBQUksSUFBSSxDQUFDME8sUUFBUSxDQUFDLE9BQU9rQixnQkFBZ0IsSUFBSSxNQUFNOzRCQUMvQyxPQUFPO3dCQUNYO3dCQUNBLE9BQU9uRDtvQkFDWDtvQkFDQSxNQUFNbkUsS0FBSyxJQUFJLENBQUNjLFNBQVMsQ0FBQ3dNLG1CQUFtQixDQUFDNVY7b0JBQzlDLElBQUlzSSxHQUFHMEYsV0FBVyxJQUFJLE1BQU07d0JBQ3hCMUYsR0FBR3lJLGFBQWEsR0FBRztvQkFDdkIsT0FDSyxJQUFJekksR0FBR3lJLGFBQWEsSUFBSSxNQUFNO3dCQUMvQixNQUFNL0MsY0FBYyxNQUFNLElBQUksQ0FBQ0wsdUJBQXVCLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQ2MsZUFBZTt3QkFDckYsa0VBQWtFO3dCQUNsRSxJQUFJc0MsZ0JBQWdCLGNBQWV6SSxHQUFHMEYsV0FBVyxHQUFJO3dCQUNyRCxJQUFJK0MsaUJBQWlCLEdBQUc7NEJBQ3BCQSxnQkFBZ0I7d0JBQ3BCO3dCQUNBekksR0FBR3lJLGFBQWEsR0FBR0E7b0JBQ3ZCO29CQUNBLE9BQU8sSUFBSSxDQUFDeUIsZ0JBQWdCLENBQUNsSztnQkFDakMsSUFBSTtnQkFBRW9OLFVBQVUsSUFBSTtZQUFDO1FBQ3pCO0lBQ0o7SUFDQXhHLHNCQUFzQlUsZUFBZSxFQUFFO1FBQ25DLE9BQU8zUSxVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLE1BQU0sSUFBSSxDQUFDcUMsVUFBVTtZQUNyQnNPLGtCQUFrQixNQUFNQTtZQUN4QixNQUFNc0QsU0FBUztnQkFBRXRELGlCQUFpQixJQUFJLENBQUN4RyxTQUFTLENBQUN4RSxJQUFJLENBQUNnTCxpQkFBaUI7WUFBTTtZQUM3RSxPQUFPOU4seURBQUlBLENBQUMsSUFBTTdDLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7b0JBQzlDLE1BQU1lLFNBQVMsTUFBTSxJQUFJLENBQUNtTyxPQUFPLENBQUMseUJBQXlCK0U7b0JBQzNELElBQUlsVCxVQUFVLE1BQU07d0JBQ2hCLElBQUksSUFBSSxDQUFDME8sUUFBUSxDQUFDLE9BQU9rQixnQkFBZ0IsSUFBSSxNQUFNOzRCQUMvQyxPQUFPO3dCQUNYO3dCQUNBLE9BQU9uRDtvQkFDWDtvQkFDQSxvREFBb0Q7b0JBQ3BELElBQUl6TSxPQUFPMlAsU0FBUyxJQUFJLE1BQU07d0JBQzFCLE9BQU9sRDtvQkFDWDtvQkFDQSxNQUFNMEMsVUFBVSxJQUFJLENBQUMvRixTQUFTLENBQUMrRixPQUFPLENBQUNuUDtvQkFDdkMsSUFBSW1QLFFBQVFuQixXQUFXLElBQUksTUFBTTt3QkFDN0JtQixRQUFRNEIsYUFBYSxHQUFHO29CQUM1QixPQUNLLElBQUk1QixRQUFRNEIsYUFBYSxJQUFJLE1BQU07d0JBQ3BDLE1BQU0vQyxjQUFjLE1BQU0sSUFBSSxDQUFDTCx1QkFBdUIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDYyxlQUFlO3dCQUNyRixrRUFBa0U7d0JBQ2xFLElBQUlzQyxnQkFBZ0IsY0FBZTVCLFFBQVFuQixXQUFXLEdBQUk7d0JBQzFELElBQUkrQyxpQkFBaUIsR0FBRzs0QkFDcEJBLGdCQUFnQjt3QkFDcEI7d0JBQ0E1QixRQUFRNEIsYUFBYSxHQUFHQTtvQkFDNUI7b0JBQ0EsT0FBTzVCO2dCQUNYLElBQUk7Z0JBQUV1RyxVQUFVLElBQUk7WUFBQztRQUN6QjtJQUNKO0lBQ0FsRyxRQUFRM0ssTUFBTSxFQUFFO1FBQ1osT0FBTzVGLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxJQUFJLENBQUNxQyxVQUFVO1lBQ3JCLE1BQU00UixTQUFTLE1BQU16Uiw0RUFBaUJBLENBQUM7Z0JBQUVvRCxRQUFRLElBQUksQ0FBQ3dQLFVBQVUsQ0FBQ3hQO1lBQVE7WUFDekUsTUFBTTRLLE9BQU8sTUFBTSxJQUFJLENBQUN0QixPQUFPLENBQUMsV0FBVytFO1lBQzNDekQsS0FBS3ZNLE9BQU8sQ0FBQyxDQUFDd007Z0JBQ1YsSUFBSUEsSUFBSW1HLE9BQU8sSUFBSSxNQUFNO29CQUNyQm5HLElBQUltRyxPQUFPLEdBQUc7Z0JBQ2xCO1lBQ0o7WUFDQSxPQUFPMVQsa0RBQVNBLENBQUMyVCxPQUFPLENBQUMsSUFBSSxDQUFDMU0sU0FBUyxDQUFDMk0sU0FBUyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDNU0sU0FBUyxHQUFHcUc7UUFDNUU7SUFDSjtJQUNBd0csZ0JBQWdCO1FBQ1osT0FBT2hYLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsTUFBTSxJQUFJLENBQUNxQyxVQUFVO1lBQ3JCLE9BQU8sSUFBSSxDQUFDNk0sT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQzFDO0lBQ0o7SUFDQWdGLGFBQWFGLFFBQVEsRUFBRTtRQUNuQixPQUFPaFUsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQ2dVLFdBQVcsTUFBTUE7WUFDakIsSUFBSSxPQUFRQSxhQUFjLFlBQVlBLFdBQVcsR0FBRztnQkFDaEQsSUFBSUEsV0FBVyxHQUFHO29CQUNkL1EsT0FBT0ssa0JBQWtCLENBQUMsb0JBQW9CLFlBQVkwUTtnQkFDOUQ7Z0JBQ0EsSUFBSWpGLGNBQWMsTUFBTSxJQUFJLENBQUNMLHVCQUF1QixDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUNjLGVBQWU7Z0JBQ25GVCxlQUFlaUY7Z0JBQ2YsSUFBSWpGLGNBQWMsR0FBRztvQkFDakJBLGNBQWM7Z0JBQ2xCO2dCQUNBLE9BQU8sSUFBSSxDQUFDNUUsU0FBUyxDQUFDNkosUUFBUSxDQUFDakY7WUFDbkM7WUFDQSxPQUFPLElBQUksQ0FBQzVFLFNBQVMsQ0FBQzZKLFFBQVEsQ0FBQ0E7UUFDbkM7SUFDSjtJQUNBaUQsWUFBWTFOLElBQUksRUFBRTtRQUNkLE9BQU92SixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DLElBQUlrWCxjQUFjM047WUFDbEIsTUFBTyxLQUFNO2dCQUNULElBQUkyTixnQkFBZ0IsTUFBTUEsZ0JBQWdCLEtBQUs7b0JBQzNDLE9BQU87Z0JBQ1g7Z0JBQ0EseURBQXlEO2dCQUN6RCwrQkFBK0I7Z0JBQy9CLElBQUkzTixTQUFTLFNBQVMyTixnQkFBZ0IsT0FBTztvQkFDekMsT0FBTztnQkFDWDtnQkFDQSx3Q0FBd0M7Z0JBQ3hDLE1BQU05TCxPQUFPLE1BQU0sSUFBSSxDQUFDK0wsWUFBWSxDQUFDRCxhQUFhO2dCQUNsRCxvQkFBb0I7Z0JBQ3BCLElBQUk5TCxRQUFRLE1BQU07b0JBQ2QsTUFBTWdNLFdBQVcsSUFBSTdPLFNBQVMsSUFBSSxFQUFFNkMsTUFBTTdCO29CQUMxQyxnRUFBZ0U7b0JBQ2hFLElBQUkyTixnQkFBZ0IzTixRQUFRLENBQUUsT0FBTTZOLFNBQVM1TyxnQkFBZ0IsRUFBQyxHQUFJO3dCQUM5RCxPQUFPO29CQUNYO29CQUNBLE9BQU80TztnQkFDWDtnQkFDQSxzQkFBc0I7Z0JBQ3RCRixjQUFjQSxZQUFZelMsS0FBSyxDQUFDLEtBQUtmLEtBQUssQ0FBQyxHQUFHWSxJQUFJLENBQUM7WUFDdkQ7UUFDSjtJQUNKO0lBQ0E2UyxhQUFhNU4sSUFBSSxFQUFFVyxTQUFTLEVBQUU7UUFDMUIsT0FBT2xLLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSWtLLGFBQWEsTUFBTTtnQkFDbkJBLFlBQVk7WUFDaEI7WUFDQSxNQUFNOEMsVUFBVSxNQUFNLElBQUksQ0FBQzNLLFVBQVU7WUFDckMsWUFBWTtZQUNaLElBQUksQ0FBQzJLLFFBQVFxSyxVQUFVLEVBQUU7Z0JBQ3JCcFUsT0FBT3dHLFVBQVUsQ0FBQyxnQ0FBZ0MxRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ2lCLHFCQUFxQixFQUFFO29CQUFFQztvQkFBVzhDLFNBQVNBLFFBQVF6RCxJQUFJO2dCQUFDO1lBQzlIO1lBQ0EsSUFBSTtnQkFDQSxpQ0FBaUM7Z0JBQ2pDLE1BQU0rTixXQUFXLE1BQU0sSUFBSSxDQUFDM08sSUFBSSxDQUFDO29CQUM3QkMsSUFBSW9FLFFBQVFxSyxVQUFVO29CQUN0QjdTLE1BQU8sZUFBZXBDLDhEQUFRQSxDQUFDbUgsTUFBTTdCLFNBQVMsQ0FBQztnQkFDbkQ7Z0JBQ0EsT0FBTyxJQUFJLENBQUN5QyxTQUFTLENBQUNPLFdBQVcsQ0FBQzRNO1lBQ3RDLEVBQ0EsT0FBT2xRLE9BQU87WUFDVix3REFBd0Q7WUFDNUQ7WUFDQSxPQUFPO1FBQ1g7SUFDSjtJQUNBK08sWUFBWTVNLElBQUksRUFBRTtRQUNkLE9BQU92SixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DdUosT0FBTyxNQUFNQTtZQUNiLGtEQUFrRDtZQUNsRCxJQUFJO2dCQUNBLE9BQU8vSSxRQUFRRCxPQUFPLENBQUMsSUFBSSxDQUFDNEosU0FBUyxDQUFDbEYsT0FBTyxDQUFDc0U7WUFDbEQsRUFDQSxPQUFPbkMsT0FBTztnQkFDVixzREFBc0Q7Z0JBQ3RELElBQUluRixpRUFBV0EsQ0FBQ3NILE9BQU87b0JBQ25CLE1BQU1uQztnQkFDVjtZQUNKO1lBQ0EsSUFBSSxPQUFRbUMsU0FBVSxVQUFVO2dCQUM1QnRHLE9BQU9LLGtCQUFrQixDQUFDLG9CQUFvQixRQUFRaUc7WUFDMUQ7WUFDQSxpQ0FBaUM7WUFDakMsTUFBTTZOLFdBQVcsTUFBTSxJQUFJLENBQUNILFdBQVcsQ0FBQzFOO1lBQ3hDLElBQUksQ0FBQzZOLFVBQVU7Z0JBQ1gsT0FBTztZQUNYO1lBQ0EsT0FBTyxNQUFNQSxTQUFTM00sVUFBVTtRQUNwQztJQUNKO0lBQ0E4TSxjQUFjdFMsT0FBTyxFQUFFO1FBQ25CLE9BQU9qRixVQUFVLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQ25DaUYsVUFBVSxNQUFNQTtZQUNoQkEsVUFBVSxJQUFJLENBQUNrRixTQUFTLENBQUNsRixPQUFPLENBQUNBO1lBQ2pDLE1BQU11UyxPQUFPdlMsUUFBUXlDLFNBQVMsQ0FBQyxHQUFHbkUsV0FBVyxLQUFLO1lBQ2xELE1BQU1rVSxlQUFlLE1BQU0sSUFBSSxDQUFDTixZQUFZLENBQUNLLE1BQU07WUFDbkQsSUFBSUMsZ0JBQWdCLE1BQU07Z0JBQ3RCLE9BQU87WUFDWDtZQUNBLDBCQUEwQjtZQUMxQixNQUFNbE8sT0FBT3RDLGFBQWEsT0FBTSxJQUFJLENBQUMwQixJQUFJLENBQUM7Z0JBQ3RDQyxJQUFJNk87Z0JBQ0pqVCxNQUFPLGVBQWVwQyw4REFBUUEsQ0FBQ29WLE1BQU05UCxTQUFTLENBQUM7WUFDbkQsRUFBQyxHQUFHO1lBQ0osTUFBTTBELE9BQU8sTUFBTSxJQUFJLENBQUMrSyxXQUFXLENBQUM1TTtZQUNwQyxJQUFJNkIsUUFBUW5HLFNBQVM7Z0JBQ2pCLE9BQU87WUFDWDtZQUNBLE9BQU9zRTtRQUNYO0lBQ0o7SUFDQW9CLFVBQVUrTSxhQUFhLEVBQUU7UUFDckIsT0FBTzFYLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDbkMsSUFBSW9YLFdBQVc7WUFDZixJQUFJblYsaUVBQVdBLENBQUN5VixnQkFBZ0I7Z0JBQzVCLDBCQUEwQjtnQkFDMUIsTUFBTXpTLFVBQVUsSUFBSSxDQUFDa0YsU0FBUyxDQUFDbEYsT0FBTyxDQUFDeVM7Z0JBQ3ZDLE1BQU1GLE9BQU92UyxRQUFReUMsU0FBUyxDQUFDLEdBQUduRSxXQUFXLEtBQUs7Z0JBQ2xELE1BQU1vVSxrQkFBa0IsTUFBTSxJQUFJLENBQUNSLFlBQVksQ0FBQ0ssTUFBTTtnQkFDdEQsSUFBSSxDQUFDRyxpQkFBaUI7b0JBQ2xCLE9BQU87Z0JBQ1g7Z0JBQ0EsNkRBQTZEO2dCQUM3RFAsV0FBVyxJQUFJN08sU0FBUyxJQUFJLEVBQUVvUCxpQkFBaUJIO2dCQUMvQyxJQUFJO29CQUNBLE1BQU0xTSxTQUFTLE1BQU1zTSxTQUFTek0sU0FBUztvQkFDdkMsSUFBSUcsUUFBUTt3QkFDUixPQUFPQSxPQUFPRyxHQUFHO29CQUNyQjtnQkFDSixFQUNBLE9BQU83RCxPQUFPO29CQUNWLElBQUlBLE1BQU0yQixJQUFJLEtBQUtoRyx5REFBTUEsQ0FBQ2lHLE1BQU0sQ0FBQ0MsY0FBYyxFQUFFO3dCQUM3QyxNQUFNN0I7b0JBQ1Y7Z0JBQ0o7Z0JBQ0EseUVBQXlFO2dCQUN6RSxJQUFJO29CQUNBLDBCQUEwQjtvQkFDMUIsTUFBTW1DLE9BQU90QyxhQUFhLE9BQU0sSUFBSSxDQUFDMEIsSUFBSSxDQUFDO3dCQUN0Q0MsSUFBSStPO3dCQUNKblQsTUFBTyxlQUFlcEMsOERBQVFBLENBQUNvVixNQUFNOVAsU0FBUyxDQUFDO29CQUNuRCxFQUFDLEdBQUc7b0JBQ0owUCxXQUFXLE1BQU0sSUFBSSxDQUFDSCxXQUFXLENBQUMxTjtnQkFDdEMsRUFDQSxPQUFPbkMsT0FBTztvQkFDVixJQUFJQSxNQUFNMkIsSUFBSSxLQUFLaEcseURBQU1BLENBQUNpRyxNQUFNLENBQUNDLGNBQWMsRUFBRTt3QkFDN0MsTUFBTTdCO29CQUNWO29CQUNBLE9BQU87Z0JBQ1g7WUFDSixPQUNLO2dCQUNELHlDQUF5QztnQkFDekNnUSxXQUFXLE1BQU0sSUFBSSxDQUFDSCxXQUFXLENBQUNTO2dCQUNsQyxJQUFJLENBQUNOLFVBQVU7b0JBQ1gsT0FBTztnQkFDWDtZQUNKO1lBQ0EsTUFBTXRNLFNBQVMsTUFBTXNNLFNBQVN6TSxTQUFTO1lBQ3ZDLElBQUlHLFVBQVUsTUFBTTtnQkFDaEIsT0FBTztZQUNYO1lBQ0EsT0FBT0EsT0FBT0csR0FBRztRQUNyQjtJQUNKO0lBQ0FpRSxRQUFRMkUsTUFBTSxFQUFFSSxNQUFNLEVBQUU7UUFDcEIsT0FBT2hSLE9BQU93RyxVQUFVLENBQUNvSyxTQUFTLG9CQUFvQjlRLHlEQUFNQSxDQUFDaUcsTUFBTSxDQUFDNE8sZUFBZSxFQUFFO1lBQUUxTixXQUFXMko7UUFBTztJQUM3RztJQUNBZ0UsWUFBWXBTLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQ3FMLE9BQU8sR0FBSSxJQUFJLENBQUNmLE9BQU8sQ0FBQ25LLE1BQU0sQ0FBQyxDQUFDL0UsSUFBTUEsRUFBRWlGLFFBQVEsSUFBSW5DLE1BQU0sR0FBRztJQUN0RTtJQUNBbVUsV0FBV3JTLEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQ3FMLE9BQU8sR0FBSSxJQUFJLENBQUNmLE9BQU8sQ0FBQ25LLE1BQU0sQ0FBQyxDQUFDL0UsSUFBTUEsRUFBRWlGLFFBQVEsSUFBSW5DLE1BQU0sR0FBRztJQUN0RTtJQUNBb1Usa0JBQWtCblQsU0FBUyxFQUFFb0IsUUFBUSxFQUFFQyxJQUFJLEVBQUU7UUFDekMsTUFBTVIsUUFBUSxJQUFJRCxNQUFNYixZQUFZQyxZQUFZb0IsVUFBVUM7UUFDMUQsSUFBSSxDQUFDOEosT0FBTyxDQUFDekgsSUFBSSxDQUFDN0M7UUFDbEIsSUFBSSxDQUFDb1MsV0FBVyxDQUFDcFM7UUFDakIsT0FBTyxJQUFJO0lBQ2Y7SUFDQTZNLEdBQUcxTixTQUFTLEVBQUVvQixRQUFRLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUMrUixpQkFBaUIsQ0FBQ25ULFdBQVdvQixVQUFVO0lBQ3ZEO0lBQ0FDLEtBQUtyQixTQUFTLEVBQUVvQixRQUFRLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUMrUixpQkFBaUIsQ0FBQ25ULFdBQVdvQixVQUFVO0lBQ3ZEO0lBQ0FxSCxLQUFLekksU0FBUyxFQUFXO1FBQVQ7WUFBR29ULEtBQUgsMkJBQU87O1FBQ25CLElBQUlqWCxTQUFTO1FBQ2IsSUFBSWtYLFVBQVUsRUFBRTtRQUNoQixJQUFJQyxXQUFXdlQsWUFBWUM7UUFDM0IsSUFBSSxDQUFDbUwsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDbkssTUFBTSxDQUFDLENBQUNIO1lBQ2hDLElBQUlBLE1BQU1JLEdBQUcsS0FBS3FTLFVBQVU7Z0JBQ3hCLE9BQU87WUFDWDtZQUNBNVMsV0FBVztnQkFDUEcsTUFBTU8sUUFBUSxDQUFDOUUsS0FBSyxDQUFDLElBQUksRUFBRThXO1lBQy9CLEdBQUc7WUFDSGpYLFNBQVM7WUFDVCxJQUFJMEUsTUFBTVEsSUFBSSxFQUFFO2dCQUNaZ1MsUUFBUTNQLElBQUksQ0FBQzdDO2dCQUNiLE9BQU87WUFDWDtZQUNBLE9BQU87UUFDWDtRQUNBd1MsUUFBUWhVLE9BQU8sQ0FBQyxDQUFDd0I7WUFBWSxJQUFJLENBQUNxUyxVQUFVLENBQUNyUztRQUFRO1FBQ3JELE9BQU8xRTtJQUNYO0lBQ0FvWCxjQUFjdlQsU0FBUyxFQUFFO1FBQ3JCLElBQUksQ0FBQ0EsV0FBVztZQUNaLE9BQU8sSUFBSSxDQUFDbUwsT0FBTyxDQUFDcE0sTUFBTTtRQUM5QjtRQUNBLElBQUl1VSxXQUFXdlQsWUFBWUM7UUFDM0IsT0FBTyxJQUFJLENBQUNtTCxPQUFPLENBQUNuSyxNQUFNLENBQUMsQ0FBQ0g7WUFDeEIsT0FBUUEsTUFBTUksR0FBRyxLQUFLcVM7UUFDMUIsR0FBR3ZVLE1BQU07SUFDYjtJQUNBeVUsVUFBVXhULFNBQVMsRUFBRTtRQUNqQixJQUFJQSxhQUFhLE1BQU07WUFDbkIsT0FBTyxJQUFJLENBQUNtTCxPQUFPLENBQUNsTSxHQUFHLENBQUMsQ0FBQzRCLFFBQVVBLE1BQU1PLFFBQVE7UUFDckQ7UUFDQSxJQUFJa1MsV0FBV3ZULFlBQVlDO1FBQzNCLE9BQU8sSUFBSSxDQUFDbUwsT0FBTyxDQUNkbkssTUFBTSxDQUFDLENBQUNILFFBQVdBLE1BQU1JLEdBQUcsS0FBS3FTLFVBQ2pDclUsR0FBRyxDQUFDLENBQUM0QixRQUFVQSxNQUFNTyxRQUFRO0lBQ3RDO0lBQ0FxUyxJQUFJelQsU0FBUyxFQUFFb0IsUUFBUSxFQUFFO1FBQ3JCLElBQUlBLFlBQVksTUFBTTtZQUNsQixPQUFPLElBQUksQ0FBQ3NTLGtCQUFrQixDQUFDMVQ7UUFDbkM7UUFDQSxNQUFNcVQsVUFBVSxFQUFFO1FBQ2xCLElBQUlNLFFBQVE7UUFDWixJQUFJTCxXQUFXdlQsWUFBWUM7UUFDM0IsSUFBSSxDQUFDbUwsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDbkssTUFBTSxDQUFDLENBQUNIO1lBQ2hDLElBQUlBLE1BQU1JLEdBQUcsS0FBS3FTLFlBQVl6UyxNQUFNTyxRQUFRLElBQUlBLFVBQVU7Z0JBQ3RELE9BQU87WUFDWDtZQUNBLElBQUl1UyxPQUFPO2dCQUNQLE9BQU87WUFDWDtZQUNBQSxRQUFRO1lBQ1JOLFFBQVEzUCxJQUFJLENBQUM3QztZQUNiLE9BQU87UUFDWDtRQUNBd1MsUUFBUWhVLE9BQU8sQ0FBQyxDQUFDd0I7WUFBWSxJQUFJLENBQUNxUyxVQUFVLENBQUNyUztRQUFRO1FBQ3JELE9BQU8sSUFBSTtJQUNmO0lBQ0E2UyxtQkFBbUIxVCxTQUFTLEVBQUU7UUFDMUIsSUFBSXFULFVBQVUsRUFBRTtRQUNoQixJQUFJclQsYUFBYSxNQUFNO1lBQ25CcVQsVUFBVSxJQUFJLENBQUNsSSxPQUFPO1lBQ3RCLElBQUksQ0FBQ0EsT0FBTyxHQUFHLEVBQUU7UUFDckIsT0FDSztZQUNELE1BQU1tSSxXQUFXdlQsWUFBWUM7WUFDN0IsSUFBSSxDQUFDbUwsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDbkssTUFBTSxDQUFDLENBQUNIO2dCQUNoQyxJQUFJQSxNQUFNSSxHQUFHLEtBQUtxUyxVQUFVO29CQUN4QixPQUFPO2dCQUNYO2dCQUNBRCxRQUFRM1AsSUFBSSxDQUFDN0M7Z0JBQ2IsT0FBTztZQUNYO1FBQ0o7UUFDQXdTLFFBQVFoVSxPQUFPLENBQUMsQ0FBQ3dCO1lBQVksSUFBSSxDQUFDcVMsVUFBVSxDQUFDclM7UUFBUTtRQUNyRCxPQUFPLElBQUk7SUFDZjtJQXgzQ0E7Ozs7Ozs7O0tBUUMsR0FDRE0sWUFBWWlILE9BQU8sQ0FBRTtRQUNqQixLQUFLO1FBQ0wsMkJBQTJCO1FBQzNCLElBQUksQ0FBQytDLE9BQU8sR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQ04sUUFBUSxHQUFHO1lBQUVDLE9BQU8sQ0FBQztRQUFFO1FBQzVCLElBQUksQ0FBQzdCLGVBQWUsR0FBRztRQUN2QixJQUFJLENBQUMxRCxTQUFTLEdBQUcsV0FBV3NELFlBQVk7UUFDeEMseURBQXlEO1FBQ3pELHdEQUF3RDtRQUN4RCxrQkFBa0I7UUFDbEJuTCx5RUFBY0EsQ0FBQyxJQUFJLEVBQUUsY0FBZTBLLFlBQVk7UUFDaEQsSUFBSSxJQUFJLENBQUNJLFVBQVUsRUFBRTtZQUNqQkosVUFBVSxJQUFJLENBQUNFLGFBQWE7UUFDaEM7UUFDQSxJQUFJRixtQkFBbUJ4TSxTQUFTO1lBQzVCLElBQUksQ0FBQ3lNLGVBQWUsR0FBR0Q7WUFDdkIsd0VBQXdFO1lBQ3hFQSxRQUFRbEUsS0FBSyxDQUFDLENBQUMxQixTQUFZO1lBQzNCLDBDQUEwQztZQUMxQyxJQUFJLENBQUMwRixNQUFNLEdBQUdoRSxLQUFLLENBQUMsQ0FBQzFCLFNBQVk7UUFDckMsT0FDSztZQUNELE1BQU1vUixlQUFlalcsb0VBQVNBLENBQUMsWUFBWSxjQUFjeUs7WUFDekQsSUFBSXdMLGNBQWM7Z0JBQ2RsVyx5RUFBY0EsQ0FBQyxJQUFJLEVBQUUsWUFBWWtXO2dCQUNqQyxJQUFJLENBQUNuTCxJQUFJLENBQUMsV0FBV21MLGNBQWM7WUFDdkMsT0FDSztnQkFDRHZWLE9BQU9LLGtCQUFrQixDQUFDLG1CQUFtQixXQUFXMEo7WUFDNUQ7UUFDSjtRQUNBLElBQUksQ0FBQ29DLHVCQUF1QixHQUFHLENBQUM7UUFDaEMsSUFBSSxDQUFDbEosZ0JBQWdCLEdBQUcsQ0FBQztRQUN6QixJQUFJLENBQUNvSyxvQkFBb0IsR0FBRztRQUM1QixJQUFJLENBQUNtQixnQkFBZ0IsR0FBRztRQUN4QixJQUFJLENBQUNOLGNBQWMsR0FBRztJQUMxQjtBQTQwQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL2Jhc2UtcHJvdmlkZXIuanM/NGJhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgRm9ya0V2ZW50LCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgZW5jb2RlIGFzIGJhc2U2NEVuY29kZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNlNjRcIjtcbmltcG9ydCB7IEJhc2U1OCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNleFwiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGNvbmNhdCwgaGV4Q29uY2F0LCBoZXhEYXRhTGVuZ3RoLCBoZXhEYXRhU2xpY2UsIGhleGxpZnksIGhleFZhbHVlLCBoZXhaZXJvUGFkLCBpc0hleFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgSGFzaFplcm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkbnNFbmNvZGUsIG5hbWVoYXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IGdldE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5LCBnZXRTdGF0aWMsIHJlc29sdmVQcm9wZXJ0aWVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IHNoYTI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaGEyXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IGZldGNoSnNvbiwgcG9sbCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC93ZWJcIjtcbmltcG9ydCBiZWNoMzIgZnJvbSBcImJlY2gzMlwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5jb25zdCBNQVhfQ0NJUF9SRURJUkVDVFMgPSAxMDtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRXZlbnQgU2VyaWFsaXplaW5nXG5mdW5jdGlvbiBjaGVja1RvcGljKHRvcGljKSB7XG4gICAgaWYgKHRvcGljID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgIH1cbiAgICBpZiAoaGV4RGF0YUxlbmd0aCh0b3BpYykgIT09IDMyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRvcGljXCIsIFwidG9waWNcIiwgdG9waWMpO1xuICAgIH1cbiAgICByZXR1cm4gdG9waWMudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZVRvcGljcyh0b3BpY3MpIHtcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgbnVsbCBBTkQtdG9waWNzOyB0aGV5IGFyZSByZWR1bmRhbnRcbiAgICB0b3BpY3MgPSB0b3BpY3Muc2xpY2UoKTtcbiAgICB3aGlsZSAodG9waWNzLmxlbmd0aCA+IDAgJiYgdG9waWNzW3RvcGljcy5sZW5ndGggLSAxXSA9PSBudWxsKSB7XG4gICAgICAgIHRvcGljcy5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvcGljcy5tYXAoKHRvcGljKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRvcGljKSkge1xuICAgICAgICAgICAgLy8gT25seSB0cmFjayB1bmlxdWUgT1ItdG9waWNzXG4gICAgICAgICAgICBjb25zdCB1bmlxdWUgPSB7fTtcbiAgICAgICAgICAgIHRvcGljLmZvckVhY2goKHRvcGljKSA9PiB7XG4gICAgICAgICAgICAgICAgdW5pcXVlW2NoZWNrVG9waWModG9waWMpXSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRoZSBvcmRlciBvZiBPUi10b3BpY3MgZG9lcyBub3QgbWF0dGVyXG4gICAgICAgICAgICBjb25zdCBzb3J0ZWQgPSBPYmplY3Qua2V5cyh1bmlxdWUpO1xuICAgICAgICAgICAgc29ydGVkLnNvcnQoKTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0ZWQuam9pbihcInxcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tUb3BpYyh0b3BpYyk7XG4gICAgICAgIH1cbiAgICB9KS5qb2luKFwiJlwiKTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplVG9waWNzKGRhdGEpIHtcbiAgICBpZiAoZGF0YSA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBkYXRhLnNwbGl0KC8mL2cpLm1hcCgodG9waWMpID0+IHtcbiAgICAgICAgaWYgKHRvcGljID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcHMgPSB0b3BpYy5zcGxpdChcInxcIikubWFwKCh0b3BpYykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICgodG9waWMgPT09IFwibnVsbFwiKSA/IG51bGwgOiB0b3BpYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKChjb21wcy5sZW5ndGggPT09IDEpID8gY29tcHNbMF0gOiBjb21wcyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRFdmVudFRhZyhldmVudE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIChldmVudE5hbWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoaGV4RGF0YUxlbmd0aChldmVudE5hbWUpID09PSAzMikge1xuICAgICAgICAgICAgcmV0dXJuIFwidHg6XCIgKyBldmVudE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50TmFtZS5pbmRleE9mKFwiOlwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudE5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShldmVudE5hbWUpKSB7XG4gICAgICAgIHJldHVybiBcImZpbHRlcjoqOlwiICsgc2VyaWFsaXplVG9waWNzKGV2ZW50TmFtZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEZvcmtFdmVudC5pc0ZvcmtFdmVudChldmVudE5hbWUpKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKFwibm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50TmFtZSAmJiB0eXBlb2YgKGV2ZW50TmFtZSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIFwiZmlsdGVyOlwiICsgKGV2ZW50TmFtZS5hZGRyZXNzIHx8IFwiKlwiKSArIFwiOlwiICsgc2VyaWFsaXplVG9waWNzKGV2ZW50TmFtZS50b3BpY3MgfHwgW10pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGV2ZW50IC0gXCIgKyBldmVudE5hbWUpO1xufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIZWxwZXIgT2JqZWN0XG5mdW5jdGlvbiBnZXRUaW1lKCkge1xuICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xufVxuZnVuY3Rpb24gc3RhbGwoZHVyYXRpb24pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBkdXJhdGlvbik7XG4gICAgfSk7XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFByb3ZpZGVyIE9iamVjdFxuLyoqXG4gKiAgRXZlbnRUeXBlXG4gKiAgIC0gXCJibG9ja1wiXG4gKiAgIC0gXCJwb2xsXCJcbiAqICAgLSBcImRpZFBvbGxcIlxuICogICAtIFwicGVuZGluZ1wiXG4gKiAgIC0gXCJlcnJvclwiXG4gKiAgIC0gXCJuZXR3b3JrXCJcbiAqICAgLSBmaWx0ZXJcbiAqICAgLSB0b3BpY3MgYXJyYXlcbiAqICAgLSB0cmFuc2FjdGlvbiBoYXNoXG4gKi9cbmNvbnN0IFBvbGxhYmxlRXZlbnRzID0gW1wiYmxvY2tcIiwgXCJuZXR3b3JrXCIsIFwicGVuZGluZ1wiLCBcInBvbGxcIl07XG5leHBvcnQgY2xhc3MgRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKHRhZywgbGlzdGVuZXIsIG9uY2UpIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJ0YWdcIiwgdGFnKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJsaXN0ZW5lclwiLCBsaXN0ZW5lcik7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwib25jZVwiLCBvbmNlKTtcbiAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gLTI7XG4gICAgICAgIHRoaXMuX2luZmxpZ2h0ID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCBldmVudCgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc2g7XG4gICAgICAgICAgICBjYXNlIFwiZmlsdGVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRhZztcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZy5zcGxpdChcIjpcIilbMF07XG4gICAgfVxuICAgIGdldCBoYXNoKCkge1xuICAgICAgICBjb25zdCBjb21wcyA9IHRoaXMudGFnLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgaWYgKGNvbXBzWzBdICE9PSBcInR4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wc1sxXTtcbiAgICB9XG4gICAgZ2V0IGZpbHRlcigpIHtcbiAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLnRhZy5zcGxpdChcIjpcIik7XG4gICAgICAgIGlmIChjb21wc1swXSAhPT0gXCJmaWx0ZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGNvbXBzWzFdO1xuICAgICAgICBjb25zdCB0b3BpY3MgPSBkZXNlcmlhbGl6ZVRvcGljcyhjb21wc1syXSk7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHt9O1xuICAgICAgICBpZiAodG9waWNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZpbHRlci50b3BpY3MgPSB0b3BpY3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFkZHJlc3MgJiYgYWRkcmVzcyAhPT0gXCIqXCIpIHtcbiAgICAgICAgICAgIGZpbHRlci5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgIH1cbiAgICBwb2xsYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRhZy5pbmRleE9mKFwiOlwiKSA+PSAwIHx8IFBvbGxhYmxlRXZlbnRzLmluZGV4T2YodGhpcy50YWcpID49IDApO1xuICAgIH1cbn1cbjtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXRvc2hpbGFicy9zbGlwcy9ibG9iL21hc3Rlci9zbGlwLTAwNDQubWRcbmNvbnN0IGNvaW5JbmZvcyA9IHtcbiAgICBcIjBcIjogeyBzeW1ib2w6IFwiYnRjXCIsIHAycGtoOiAweDAwLCBwMnNoOiAweDA1LCBwcmVmaXg6IFwiYmNcIiB9LFxuICAgIFwiMlwiOiB7IHN5bWJvbDogXCJsdGNcIiwgcDJwa2g6IDB4MzAsIHAyc2g6IDB4MzIsIHByZWZpeDogXCJsdGNcIiB9LFxuICAgIFwiM1wiOiB7IHN5bWJvbDogXCJkb2dlXCIsIHAycGtoOiAweDFlLCBwMnNoOiAweDE2IH0sXG4gICAgXCI2MFwiOiB7IHN5bWJvbDogXCJldGhcIiwgaWxrOiBcImV0aFwiIH0sXG4gICAgXCI2MVwiOiB7IHN5bWJvbDogXCJldGNcIiwgaWxrOiBcImV0aFwiIH0sXG4gICAgXCI3MDBcIjogeyBzeW1ib2w6IFwieGRhaVwiLCBpbGs6IFwiZXRoXCIgfSxcbn07XG5mdW5jdGlvbiBieXRlczMyaWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIGhleFplcm9QYWQoQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvSGV4U3RyaW5nKCksIDMyKTtcbn1cbi8vIENvbXB1dGUgdGhlIEJhc2U1OENoZWNrIGVuY29kZWQgZGF0YSAoY2hlY2tzdW0gaXMgZmlyc3QgNCBieXRlcyBvZiBzaGEyNTZkKVxuZnVuY3Rpb24gYmFzZTU4RW5jb2RlKGRhdGEpIHtcbiAgICByZXR1cm4gQmFzZTU4LmVuY29kZShjb25jYXQoW2RhdGEsIGhleERhdGFTbGljZShzaGEyNTYoc2hhMjU2KGRhdGEpKSwgMCwgNCldKSk7XG59XG5jb25zdCBtYXRjaGVySXBmcyA9IG5ldyBSZWdFeHAoXCJeKGlwZnMpOi9cXC8oLiopJFwiLCBcImlcIik7XG5jb25zdCBtYXRjaGVycyA9IFtcbiAgICBuZXcgUmVnRXhwKFwiXihodHRwcyk6L1xcLyguKikkXCIsIFwiaVwiKSxcbiAgICBuZXcgUmVnRXhwKFwiXihkYXRhKTooLiopJFwiLCBcImlcIiksXG4gICAgbWF0Y2hlcklwZnMsXG4gICAgbmV3IFJlZ0V4cChcIl5laXAxNTU6WzAtOV0rLyhlcmNbMC05XSspOiguKikkXCIsIFwiaVwiKSxcbl07XG5mdW5jdGlvbiBfcGFyc2VTdHJpbmcocmVzdWx0LCBzdGFydCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0b1V0ZjhTdHJpbmcoX3BhcnNlQnl0ZXMocmVzdWx0LCBzdGFydCkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gX3BhcnNlQnl0ZXMocmVzdWx0LCBzdGFydCkge1xuICAgIGlmIChyZXN1bHQgPT09IFwiMHhcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgb2Zmc2V0ID0gQmlnTnVtYmVyLmZyb20oaGV4RGF0YVNsaWNlKHJlc3VsdCwgc3RhcnQsIHN0YXJ0ICsgMzIpKS50b051bWJlcigpO1xuICAgIGNvbnN0IGxlbmd0aCA9IEJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShyZXN1bHQsIG9mZnNldCwgb2Zmc2V0ICsgMzIpKS50b051bWJlcigpO1xuICAgIHJldHVybiBoZXhEYXRhU2xpY2UocmVzdWx0LCBvZmZzZXQgKyAzMiwgb2Zmc2V0ICsgMzIgKyBsZW5ndGgpO1xufVxuLy8gVHJpbSBvZmYgdGhlIGlwZnM6Ly8gcHJlZml4IGFuZCByZXR1cm4gdGhlIGRlZmF1bHQgZ2F0ZXdheSBVUkxcbmZ1bmN0aW9uIGdldElwZnNMaW5rKGxpbmspIHtcbiAgICBpZiAobGluay5tYXRjaCgvXmlwZnM6XFwvXFwvaXBmc1xcLy9pKSkge1xuICAgICAgICBsaW5rID0gbGluay5zdWJzdHJpbmcoMTIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChsaW5rLm1hdGNoKC9eaXBmczpcXC9cXC8vaSkpIHtcbiAgICAgICAgbGluayA9IGxpbmsuc3Vic3RyaW5nKDcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIElQRlMgZm9ybWF0XCIsIFwibGlua1wiLCBsaW5rKTtcbiAgICB9XG4gICAgcmV0dXJuIGBodHRwczovXFwvZ2F0ZXdheS5pcGZzLmlvL2lwZnMvJHtsaW5rfWA7XG59XG5mdW5jdGlvbiBudW1QYWQodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnRlcm5hbDsgc2hvdWxkIG5vdCBoYXBwZW5cIik7XG4gICAgfVxuICAgIGNvbnN0IHBhZGRlZCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBwYWRkZWQuc2V0KHJlc3VsdCwgMzIgLSByZXN1bHQubGVuZ3RoKTtcbiAgICByZXR1cm4gcGFkZGVkO1xufVxuZnVuY3Rpb24gYnl0ZXNQYWQodmFsdWUpIHtcbiAgICBpZiAoKHZhbHVlLmxlbmd0aCAlIDMyKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbCh2YWx1ZS5sZW5ndGggLyAzMikgKiAzMik7XG4gICAgcmVzdWx0LnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIEFCSSBFbmNvZGVzIGEgc2VyaWVzIG9mIChieXRlcywgYnl0ZXMsIC4uLilcbmZ1bmN0aW9uIGVuY29kZUJ5dGVzKGRhdGFzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGJ5dGVDb3VudCA9IDA7XG4gICAgLy8gQWRkIHBsYWNlLWhvbGRlcnMgZm9yIHBvaW50ZXJzIGFzIHdlIGFkZCBpdGVtc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobnVsbCk7XG4gICAgICAgIGJ5dGVDb3VudCArPSAzMjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkYXRhID0gYXJyYXlpZnkoZGF0YXNbaV0pO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIGJ5dGVzIG9mZnNldFxuICAgICAgICByZXN1bHRbaV0gPSBudW1QYWQoYnl0ZUNvdW50KTtcbiAgICAgICAgLy8gVGhlIGxlbmd0aCBhbmQgcGFkZGVkIHZhbHVlIG9mIGRhdGFcbiAgICAgICAgcmVzdWx0LnB1c2gobnVtUGFkKGRhdGEubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdC5wdXNoKGJ5dGVzUGFkKGRhdGEpKTtcbiAgICAgICAgYnl0ZUNvdW50ICs9IDMyICsgTWF0aC5jZWlsKGRhdGEubGVuZ3RoIC8gMzIpICogMzI7XG4gICAgfVxuICAgIHJldHVybiBoZXhDb25jYXQocmVzdWx0KTtcbn1cbmV4cG9ydCBjbGFzcyBSZXNvbHZlciB7XG4gICAgLy8gVGhlIHJlc29sdmVkQWRkcmVzcyBpcyBvbmx5IGZvciBjcmVhdGluZyBhIFJldmVyc2VMb29rdXAgcmVzb2x2ZXJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlciwgYWRkcmVzcywgbmFtZSwgcmVzb2x2ZWRBZGRyZXNzKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBwcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhhZGRyZXNzKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3Jlc29sdmVkQWRkcmVzc1wiLCByZXNvbHZlZEFkZHJlc3MpO1xuICAgIH1cbiAgICBzdXBwb3J0c1dpbGRjYXJkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3N1cHBvcnRzRWlwMjU0NCkge1xuICAgICAgICAgICAgLy8gc3VwcG9ydHNJbnRlcmZhY2UoYnl0ZXM0ID0gc2VsZWN0b3IoXCJyZXNvbHZlKGJ5dGVzLGJ5dGVzKVwiKSlcbiAgICAgICAgICAgIHRoaXMuX3N1cHBvcnRzRWlwMjU0NCA9IHRoaXMucHJvdmlkZXIuY2FsbCh7XG4gICAgICAgICAgICAgICAgdG86IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBkYXRhOiBcIjB4MDFmZmM5YTc5MDYxYjkyMzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCJcbiAgICAgICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpLmVxKDEpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZXRocm93IHRoZSBlcnJvcjogbGluayBpcyBkb3duLCBldGMuIExldCBmdXR1cmUgYXR0ZW1wdHMgcmV0cnkuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VwcG9ydHNFaXAyNTQ0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBwb3J0c0VpcDI1NDQ7XG4gICAgfVxuICAgIF9mZXRjaChzZWxlY3RvciwgcGFyYW1ldGVycykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gZS5nLiBrZWNjYWsyNTYoXCJhZGRyKGJ5dGVzMzIsdWludDI1NilcIilcbiAgICAgICAgICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICAgICAgICAgIHRvOiB0aGlzLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgY2NpcFJlYWRFbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGhleENvbmNhdChbc2VsZWN0b3IsIG5hbWVoYXNoKHRoaXMubmFtZSksIChwYXJhbWV0ZXJzIHx8IFwiMHhcIildKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFdpbGRjYXJkIHN1cHBvcnQ7IHVzZSBFSVAtMjU0NCB0byByZXNvbHZlIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICBsZXQgcGFyc2VCeXRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHlpZWxkIHRoaXMuc3VwcG9ydHNXaWxkY2FyZCgpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VCeXRlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0b3IoXCJyZXNvbHZlKGJ5dGVzLGJ5dGVzKVwiKVxuICAgICAgICAgICAgICAgIHR4LmRhdGEgPSBoZXhDb25jYXQoW1wiMHg5MDYxYjkyM1wiLCBlbmNvZGVCeXRlcyhbZG5zRW5jb2RlKHRoaXMubmFtZSksIHR4LmRhdGFdKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHR4KTtcbiAgICAgICAgICAgICAgICBpZiAoKGFycmF5aWZ5KHJlc3VsdCkubGVuZ3RoICUgMzIpID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwicmVzb2x2ZXIgdGhyZXcgZXJyb3JcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHR4LCBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9wYXJzZUJ5dGVzKHJlc3VsdCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZmV0Y2hCeXRlcyhzZWxlY3RvciwgcGFyYW1ldGVycykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5fZmV0Y2goc2VsZWN0b3IsIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9wYXJzZUJ5dGVzKHJlc3VsdCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRBZGRyZXNzKGNvaW5UeXBlLCBoZXhCeXRlcykge1xuICAgICAgICBjb25zdCBjb2luSW5mbyA9IGNvaW5JbmZvc1tTdHJpbmcoY29pblR5cGUpXTtcbiAgICAgICAgaWYgKGNvaW5JbmZvID09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKGB1bnN1cHBvcnRlZCBjb2luIHR5cGU6ICR7Y29pblR5cGV9YCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IGBnZXRBZGRyZXNzKCR7Y29pblR5cGV9KWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2luSW5mby5pbGsgPT09IFwiZXRoXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGhleEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KGhleEJ5dGVzKTtcbiAgICAgICAgLy8gUDJQS0g6IE9QX0RVUCBPUF9IQVNIMTYwIDxwdWJLZXlIYXNoPiBPUF9FUVVBTFZFUklGWSBPUF9DSEVDS1NJR1xuICAgICAgICBpZiAoY29pbkluZm8ucDJwa2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcDJwa2ggPSBoZXhCeXRlcy5tYXRjaCgvXjB4NzZhOShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopODhhYyQvKTtcbiAgICAgICAgICAgIGlmIChwMnBraCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KHAycGtoWzFdLCAxNik7XG4gICAgICAgICAgICAgICAgaWYgKHAycGtoWzJdLmxlbmd0aCA9PT0gbGVuZ3RoICogMiAmJiBsZW5ndGggPj0gMSAmJiBsZW5ndGggPD0gNzUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2U1OEVuY29kZShjb25jYXQoW1tjb2luSW5mby5wMnBraF0sIChcIjB4XCIgKyBwMnBraFsyXSldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFAyU0g6IE9QX0hBU0gxNjAgPHNjcmlwdEhhc2g+IE9QX0VRVUFMXG4gICAgICAgIGlmIChjb2luSW5mby5wMnNoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHAyc2ggPSBoZXhCeXRlcy5tYXRjaCgvXjB4YTkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKTg3JC8pO1xuICAgICAgICAgICAgaWYgKHAyc2gpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChwMnNoWzFdLCAxNik7XG4gICAgICAgICAgICAgICAgaWYgKHAyc2hbMl0ubGVuZ3RoID09PSBsZW5ndGggKiAyICYmIGxlbmd0aCA+PSAxICYmIGxlbmd0aCA8PSA3NSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTU4RW5jb2RlKGNvbmNhdChbW2NvaW5JbmZvLnAyc2hdLCAoXCIweFwiICsgcDJzaFsyXSldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEJlY2gzMlxuICAgICAgICBpZiAoY29pbkluZm8ucHJlZml4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGJ5dGVzWzFdO1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDE0MS5tZWRpYXdpa2kjd2l0bmVzcy1wcm9ncmFtXG4gICAgICAgICAgICBsZXQgdmVyc2lvbiA9IGJ5dGVzWzBdO1xuICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IDB4MDApIHtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoICE9PSAyMCAmJiBsZW5ndGggIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA+PSAwICYmIGJ5dGVzLmxlbmd0aCA9PT0gMiArIGxlbmd0aCAmJiBsZW5ndGggPj0gMSAmJiBsZW5ndGggPD0gNzUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IGJlY2gzMi50b1dvcmRzKGJ5dGVzLnNsaWNlKDIpKTtcbiAgICAgICAgICAgICAgICB3b3Jkcy51bnNoaWZ0KHZlcnNpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBiZWNoMzIuZW5jb2RlKGNvaW5JbmZvLnByZWZpeCwgd29yZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXRBZGRyZXNzKGNvaW5UeXBlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoY29pblR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvaW5UeXBlID0gNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiBFdGhlcmV1bSwgdXNlIHRoZSBzdGFuZGFyZCBgYWRkcihieXRlczMyKWBcbiAgICAgICAgICAgIGlmIChjb2luVHlwZSA9PT0gNjApIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBrZWNjYWsyNTYoXCJhZGRyKGJ5dGVzMzIpXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMuX2ZldGNoKFwiMHgzYjNiNTdkZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBcIjB4XCIgfHwgcmVzdWx0ID09PSBIYXNoWmVybykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8ga2VjY2FrMjU2KFwiYWRkcihieXRlczMyLHVpbnQyNTZcIilcbiAgICAgICAgICAgIGNvbnN0IGhleEJ5dGVzID0geWllbGQgdGhpcy5fZmV0Y2hCeXRlcyhcIjB4ZjFjYjdlMDZcIiwgYnl0ZXMzMmlmeShjb2luVHlwZSkpO1xuICAgICAgICAgICAgLy8gTm8gYWRkcmVzc1xuICAgICAgICAgICAgaWYgKGhleEJ5dGVzID09IG51bGwgfHwgaGV4Qnl0ZXMgPT09IFwiMHhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgYWRkcmVzc1xuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHRoaXMuX2dldEFkZHJlc3MoY29pblR5cGUsIGhleEJ5dGVzKTtcbiAgICAgICAgICAgIGlmIChhZGRyZXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihgaW52YWxpZCBvciB1bnN1cHBvcnRlZCBjb2luIGRhdGFgLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IGBnZXRBZGRyZXNzKCR7Y29pblR5cGV9KWAsXG4gICAgICAgICAgICAgICAgICAgIGNvaW5UeXBlOiBjb2luVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogaGV4Qnl0ZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QXZhdGFyKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbGlua2FnZSA9IFt7IHR5cGU6IFwibmFtZVwiLCBjb250ZW50OiB0aGlzLm5hbWUgfV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIHRlc3QgZGF0YSBmb3IgcmljbW9vLmV0aFxuICAgICAgICAgICAgICAgIC8vY29uc3QgYXZhdGFyID0gXCJlaXAxNTU6MS9lcmM3MjE6MHgyNjUzODVjN2Y0MTMyMjI4QTBkNTRFQjFBOWU3NDYwYjkxYzBjQzY4LzI5MjMzXCI7XG4gICAgICAgICAgICAgICAgY29uc3QgYXZhdGFyID0geWllbGQgdGhpcy5nZXRUZXh0KFwiYXZhdGFyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChhdmF0YXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGF2YXRhci5tYXRjaChtYXRjaGVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWUgPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjaGVtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImh0dHBzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJ1cmxcIiwgY29udGVudDogYXZhdGFyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmthZ2UsIHVybDogYXZhdGFyIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF0YVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwiZGF0YVwiLCBjb250ZW50OiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsOiBhdmF0YXIgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpcGZzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJpcGZzXCIsIGNvbnRlbnQ6IGF2YXRhciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5rYWdlLCB1cmw6IGdldElwZnNMaW5rKGF2YXRhcikgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlcmM3MjFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlcmMxMTU1XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBlbmRpbmcgb24gdGhlIEVSQyB0eXBlLCB1c2UgdG9rZW5VUkkodWludDI1Nikgb3IgdXJsKHVpbnQyNTYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSAoc2NoZW1lID09PSBcImVyYzcyMVwiKSA/IFwiMHhjODdiNTZkZFwiIDogXCIweDBlODkzNDFjXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogc2NoZW1lLCBjb250ZW50OiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG93bmVyIG9mIHRoaXMgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bmVyID0gKHRoaXMuX3Jlc29sdmVkQWRkcmVzcyB8fCAoeWllbGQgdGhpcy5nZXRBZGRyZXNzKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wcyA9IChtYXRjaFsyXSB8fCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkciA9IHlpZWxkIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoY29tcHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuSWQgPSBoZXhaZXJvUGFkKEJpZ051bWJlci5mcm9tKGNvbXBzWzFdKS50b0hleFN0cmluZygpLCAzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGlzIGFjY291bnQgb3ducyB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NoZW1lID09PSBcImVyYzcyMVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG93bmVyT2YodWludDI1NiB0b2tlbklkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk93bmVyID0gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MoeWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBhZGRyLCBkYXRhOiBoZXhDb25jYXQoW1wiMHg2MzUyMjExZVwiLCB0b2tlbklkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3duZXIgIT09IHRva2VuT3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwib3duZXJcIiwgY29udGVudDogdG9rZW5Pd25lciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NoZW1lID09PSBcImVyYzExNTVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiYWxhbmNlT2YoYWRkcmVzcyBvd25lciwgdWludDI1NiB0b2tlbklkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gQmlnTnVtYmVyLmZyb20oeWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBhZGRyLCBkYXRhOiBoZXhDb25jYXQoW1wiMHgwMGZkZDU4ZVwiLCBoZXhaZXJvUGFkKG93bmVyLCAzMiksIHRva2VuSWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYWxhbmNlLmlzWmVybygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImJhbGFuY2VcIiwgY29udGVudDogYmFsYW5jZS50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSB0b2tlbiBjb250cmFjdCBmb3IgdGhlIG1ldGFkYXRhIFVSTFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhjb21wc1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGhleENvbmNhdChbc2VsZWN0b3IsIHRva2VuSWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGFkYXRhVXJsID0gX3BhcnNlU3RyaW5nKHlpZWxkIHRoaXMucHJvdmlkZXIuY2FsbCh0eCksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YVVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm1ldGFkYXRhLXVybC1iYXNlXCIsIGNvbnRlbnQ6IG1ldGFkYXRhVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVSQy0xMTU1IGFsbG93cyBhIGdlbmVyaWMge2lkfSBpbiB0aGUgVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtZSA9PT0gXCJlcmMxMTU1XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFVcmwgPSBtZXRhZGF0YVVybC5yZXBsYWNlKFwie2lkfVwiLCB0b2tlbklkLnN1YnN0cmluZygyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGEtdXJsLWV4cGFuZGVkXCIsIGNvbnRlbnQ6IG1ldGFkYXRhVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc2Zvcm0gSVBGUyBtZXRhZGF0YSBsaW5rc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YVVybC5tYXRjaCgvXmlwZnM6L2kpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhVXJsID0gZ2V0SXBmc0xpbmsobWV0YWRhdGFVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm1ldGFkYXRhLXVybFwiLCBjb250ZW50OiBtZXRhZGF0YVVybCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRva2VuIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB5aWVsZCBmZXRjaEpzb24obWV0YWRhdGFVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwibWV0YWRhdGFcIiwgY29udGVudDogSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1bGwgdGhlIGltYWdlIFVSTCBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VVcmwgPSBtZXRhZGF0YS5pbWFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChpbWFnZVVybCkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVVybC5tYXRjaCgvXihodHRwczpcXC9cXC98ZGF0YTopL2kpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc2Zvcm0gSVBGUyBsaW5rIHRvIGdhdGV3YXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXBmcyA9IGltYWdlVXJsLm1hdGNoKG1hdGNoZXJJcGZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlwZnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJ1cmwtaXBmc1wiLCBjb250ZW50OiBpbWFnZVVybCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBnZXRJcGZzTGluayhpbWFnZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwidXJsXCIsIGNvbnRlbnQ6IGltYWdlVXJsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmthZ2UsIHVybDogaW1hZ2VVcmwgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldENvbnRlbnRIYXNoKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8ga2VjY2FrMjU2KFwiY29udGVudGhhc2goKVwiKVxuICAgICAgICAgICAgY29uc3QgaGV4Qnl0ZXMgPSB5aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHhiYzFjNThkMVwiKTtcbiAgICAgICAgICAgIC8vIE5vIGNvbnRlbnRoYXNoXG4gICAgICAgICAgICBpZiAoaGV4Qnl0ZXMgPT0gbnVsbCB8fCBoZXhCeXRlcyA9PT0gXCIweFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJUEZTIChDSUQ6IDEsIFR5cGU6IERBRy1QQilcbiAgICAgICAgICAgIGNvbnN0IGlwZnMgPSBoZXhCeXRlcy5tYXRjaCgvXjB4ZTMwMTAxNzAoKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKikpJC8pO1xuICAgICAgICAgICAgaWYgKGlwZnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChpcGZzWzNdLCAxNik7XG4gICAgICAgICAgICAgICAgaWYgKGlwZnNbNF0ubGVuZ3RoID09PSBsZW5ndGggKiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlwZnM6L1xcL1wiICsgQmFzZTU4LmVuY29kZShcIjB4XCIgKyBpcGZzWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJUE5TIChDSUQ6IDEsIFR5cGU6IGxpYnAycC1rZXkpXG4gICAgICAgICAgICBjb25zdCBpcG5zID0gaGV4Qnl0ZXMubWF0Y2goL14weGU1MDEwMTcyKChbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopKSQvKTtcbiAgICAgICAgICAgIGlmIChpcG5zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQoaXBuc1szXSwgMTYpO1xuICAgICAgICAgICAgICAgIGlmIChpcG5zWzRdLmxlbmd0aCA9PT0gbGVuZ3RoICogMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJpcG5zOi9cXC9cIiArIEJhc2U1OC5lbmNvZGUoXCIweFwiICsgaXBuc1sxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3dhcm0gKENJRDogMSwgVHlwZTogc3dhcm0tbWFuaWZlc3Q7IGhhc2gvbGVuZ3RoIGhhcmQtY29kZWQgdG8ga2VjY2FrMjU2LzMyKVxuICAgICAgICAgICAgY29uc3Qgc3dhcm0gPSBoZXhCeXRlcy5tYXRjaCgvXjB4ZTQwMTAxZmEwMTFiMjAoWzAtOWEtZl0qKSQvKTtcbiAgICAgICAgICAgIGlmIChzd2FybSkge1xuICAgICAgICAgICAgICAgIGlmIChzd2FybVsxXS5sZW5ndGggPT09ICgzMiAqIDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJ6ejovXFwvXCIgKyBzd2FybVsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBza3luZXQgPSBoZXhCeXRlcy5tYXRjaCgvXjB4OTBiMmM2MDUoWzAtOWEtZl0qKSQvKTtcbiAgICAgICAgICAgIGlmIChza3luZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2t5bmV0WzFdLmxlbmd0aCA9PT0gKDM0ICogMikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVVJMIFNhZmUgYmFzZTY0OyBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQ2NDgjc2VjdGlvbi01XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybFNhZmUgPSB7IFwiPVwiOiBcIlwiLCBcIitcIjogXCItXCIsIFwiL1wiOiBcIl9cIiB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gYmFzZTY0RW5jb2RlKFwiMHhcIiArIHNreW5ldFsxXSkucmVwbGFjZSgvWz0rXFwvXS9nLCAoYSkgPT4gKHVybFNhZmVbYV0pKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic2lhOi9cXC9cIiArIGhhc2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKGBpbnZhbGlkIG9yIHVuc3VwcG9ydGVkIGNvbnRlbnQgaGFzaCBkYXRhYCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0Q29udGVudEhhc2goKVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IGhleEJ5dGVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFRleHQoa2V5KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBUaGUga2V5IGVuY29kZWQgYXMgcGFyYW1ldGVyIHRvIGZldGNoQnl0ZXNcbiAgICAgICAgICAgIGxldCBrZXlCeXRlcyA9IHRvVXRmOEJ5dGVzKGtleSk7XG4gICAgICAgICAgICAvLyBUaGUgbm9kZWhhc2ggY29uc3VtZXMgdGhlIGZpcnN0IHNsb3QsIHNvIHRoZSBzdHJpbmcgcG9pbnRlciB0YXJnZXRzXG4gICAgICAgICAgICAvLyBvZmZzZXQgNjQsIHdpdGggdGhlIGxlbmd0aCBhdCBvZmZzZXQgNjQgYW5kIGRhdGEgc3RhcnRpbmcgYXQgb2Zmc2V0IDk2XG4gICAgICAgICAgICBrZXlCeXRlcyA9IGNvbmNhdChbYnl0ZXMzMmlmeSg2NCksIGJ5dGVzMzJpZnkoa2V5Qnl0ZXMubGVuZ3RoKSwga2V5Qnl0ZXNdKTtcbiAgICAgICAgICAgIC8vIFBhZCB0byB3b3JkLXNpemUgKDMyIGJ5dGVzKVxuICAgICAgICAgICAgaWYgKChrZXlCeXRlcy5sZW5ndGggJSAzMikgIT09IDApIHtcbiAgICAgICAgICAgICAgICBrZXlCeXRlcyA9IGNvbmNhdChba2V5Qnl0ZXMsIGhleFplcm9QYWQoXCIweFwiLCAzMiAtIChrZXkubGVuZ3RoICUgMzIpKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGV4Qnl0ZXMgPSB5aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHg1OWQxZDQzY1wiLCBoZXhsaWZ5KGtleUJ5dGVzKSk7XG4gICAgICAgICAgICBpZiAoaGV4Qnl0ZXMgPT0gbnVsbCB8fCBoZXhCeXRlcyA9PT0gXCIweFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9VdGY4U3RyaW5nKGhleEJ5dGVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxubGV0IGRlZmF1bHRGb3JtYXR0ZXIgPSBudWxsO1xubGV0IG5leHRQb2xsSWQgPSAxO1xuZXhwb3J0IGNsYXNzIEJhc2VQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiAgcmVhZHlcbiAgICAgKlxuICAgICAqICBBIFByb21pc2U8TmV0d29yaz4gdGhhdCByZXNvbHZlcyBvbmx5IG9uY2UgdGhlIHByb3ZpZGVyIGlzIHJlYWR5LlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzIHRoYXQgY2FsbCB0aGUgc3VwZXIgd2l0aCBhIG5ldHdvcmsgd2l0aG91dCBhIGNoYWluSWRcbiAgICAgKiAgTVVTVCBzZXQgdGhpcy4gU3RhbmRhcmQgbmFtZWQgbmV0d29ya3MgaGF2ZSBhIGtub3duIGNoYWluSWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIEV2ZW50cyBiZWluZyBsaXN0ZW5lZCB0b1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fZW1pdHRlZCA9IHsgYmxvY2s6IC0yIH07XG4gICAgICAgIHRoaXMuZGlzYWJsZUNjaXBSZWFkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyID0gbmV3LnRhcmdldC5nZXRGb3JtYXR0ZXIoKTtcbiAgICAgICAgLy8gSWYgbmV0d29yayBpcyBhbnksIHRoaXMgUHJvdmlkZXIgYWxsb3dzIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgIC8vIG5ldHdvcmsgdG8gY2hhbmdlIGR5bmFtaWNhbGx5LCBhbmQgd2UgYXV0by1kZXRlY3QgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgbmV0d29ya1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFueU5ldHdvcmtcIiwgKG5ldHdvcmsgPT09IFwiYW55XCIpKTtcbiAgICAgICAgaWYgKHRoaXMuYW55TmV0d29yaykge1xuICAgICAgICAgICAgbmV0d29yayA9IHRoaXMuZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXR3b3JrIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgdGhpcy5fbmV0d29ya1Byb21pc2UgPSBuZXR3b3JrO1xuICAgICAgICAgICAgLy8gU3F1YXNoIGFueSBcInVuaGFuZGxlZCBwcm9taXNlXCIgZXJyb3JzOyB0aGF0IGRvIG5vdCBuZWVkIHRvIGJlIGhhbmRsZWRcbiAgICAgICAgICAgIG5ldHdvcmsuY2F0Y2goKGVycm9yKSA9PiB7IH0pO1xuICAgICAgICAgICAgLy8gVHJpZ2dlciBpbml0aWFsIG5ldHdvcmsgc2V0dGluZyAoYXN5bmMpXG4gICAgICAgICAgICB0aGlzLl9yZWFkeSgpLmNhdGNoKChlcnJvcikgPT4geyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtub3duTmV0d29yayA9IGdldFN0YXRpYyhuZXcudGFyZ2V0LCBcImdldE5ldHdvcmtcIikobmV0d29yayk7XG4gICAgICAgICAgICBpZiAoa25vd25OZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfbmV0d29ya1wiLCBrbm93bk5ldHdvcmspO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm5ldHdvcmtcIiwga25vd25OZXR3b3JrLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXIgPSAtMTAyNDtcbiAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gLTI7XG4gICAgICAgIHRoaXMuX21heEZpbHRlckJsb2NrUmFuZ2UgPSAxMDtcbiAgICAgICAgdGhpcy5fcG9sbGluZ0ludGVydmFsID0gNDAwMDtcbiAgICAgICAgdGhpcy5fZmFzdFF1ZXJ5RGF0ZSA9IDA7XG4gICAgfVxuICAgIF9yZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZXR3b3JrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV0d29yayA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX25ldHdvcmtQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrID0geWllbGQgdGhpcy5fbmV0d29ya1Byb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRoZSBQcm92aWRlcidzIG5ldHdvcmsgZGV0ZWN0aW9uICh0aGlzIE1VU1QgdGhyb3cgaWYgaXQgY2Fubm90KVxuICAgICAgICAgICAgICAgIGlmIChuZXR3b3JrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV0d29yayA9IHlpZWxkIHRoaXMuZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW47IGV2ZXJ5IFByb3ZpZGVyIHN1Yi1jbGFzcyBzaG91bGQgaGF2ZVxuICAgICAgICAgICAgICAgIC8vIHN1Z2dlc3RlZCBhIG5ldHdvcmsgYnkgaGVyZSAob3IgaGF2ZSB0aHJvd24pLlxuICAgICAgICAgICAgICAgIGlmICghbmV0d29yaykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5vIG5ldHdvcmsgZGV0ZWN0ZWRcIiwgTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SLCB7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBvc3NpYmxlIHRoaXMgY2FsbCBzdGFja2VkIHNvIGRvIG5vdCBjYWxsIGRlZmluZVJlYWRPbmx5IGFnYWluXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbnlOZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXR3b3JrID0gbmV0d29yaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX25ldHdvcmtcIiwgbmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBuZXR3b3JrLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV0d29yaztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSBtb3N0IHJlY2VudGx5IGVzdGFibGlzaGVkIG5ldHdvcmsuXG4gICAgLy8gRm9yIFwiYW55XCIsIHRoaXMgY2FuIGNoYW5nZSAoYSBcIm5ldHdvcmtcIiBldmVudCBpcyBlbWl0dGVkIGJlZm9yZVxuICAgIC8vIGFueSBjaGFuZ2UgaXMgcmVmbGVjdGVkKTsgb3RoZXJ3aXNlIHRoaXMgY2Fubm90IGNoYW5nZVxuICAgIGdldCByZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIHBvbGwoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5KCkudGhlbigobmV0d29yaykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5ldHdvcmsgaXNuJ3QgcnVubmluZyB5ZXQsIHdlIHdpbGwgd2FpdFxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IgJiYgZXJyb3IuZXZlbnQgPT09IFwibm9OZXR3b3JrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEBUT0RPOiBSZW1vdmUgdGhpcyBhbmQganVzdCBjcmVhdGUgYSBzaW5nbGV0b24gZm9ybWF0dGVyXG4gICAgc3RhdGljIGdldEZvcm1hdHRlcigpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRGb3JtYXR0ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmYXVsdEZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmYXVsdEZvcm1hdHRlcjtcbiAgICB9XG4gICAgLy8gQFRPRE86IFJlbW92ZSB0aGlzIGFuZCBqdXN0IHVzZSBnZXROZXR3b3JrXG4gICAgc3RhdGljIGdldE5ldHdvcmsobmV0d29yaykge1xuICAgICAgICByZXR1cm4gZ2V0TmV0d29yaygobmV0d29yayA9PSBudWxsKSA/IFwiaG9tZXN0ZWFkXCIgOiBuZXR3b3JrKTtcbiAgICB9XG4gICAgY2NpcFJlYWRGZXRjaCh0eCwgY2FsbGRhdGEsIHVybHMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVDY2lwUmVhZCB8fCB1cmxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gdHgudG8udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjYWxsZGF0YS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdXJsc1tpXTtcbiAgICAgICAgICAgICAgICAvLyBVUkwgZXhwYW5zaW9uXG4gICAgICAgICAgICAgICAgY29uc3QgaHJlZiA9IHVybC5yZXBsYWNlKFwie3NlbmRlcn1cIiwgc2VuZGVyKS5yZXBsYWNlKFwie2RhdGF9XCIsIGRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIElmIG5vIHtkYXRhfSBpcyBwcmVzZW50LCB1c2UgUE9TVDsgb3RoZXJ3aXNlIEdFVFxuICAgICAgICAgICAgICAgIGNvbnN0IGpzb24gPSAodXJsLmluZGV4T2YoXCJ7ZGF0YX1cIikgPj0gMCkgPyBudWxsIDogSlNPTi5zdHJpbmdpZnkoeyBkYXRhLCBzZW5kZXIgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgZmV0Y2hKc29uKHsgdXJsOiBocmVmLCBlcnJvclBhc3NUaHJvdWdoOiB0cnVlIH0sIGpzb24sICh2YWx1ZSwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IChyZXN1bHQubWVzc2FnZSB8fCBcInVua25vd24gZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgLy8gNHh4IGluZGljYXRlcyB0aGUgcmVzdWx0IGlzIG5vdCBwcmVzZW50OyBzdG9wXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMgPCA1MDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKGByZXNwb25zZSBub3QgZm91bmQgZHVyaW5nIENDSVAgZmV0Y2g6ICR7ZXJyb3JNZXNzYWdlfWAsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7IHVybCwgZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyA1eHggaW5kaWNhdGVzIHNlcnZlciBpc3N1ZTsgdHJ5IHRoZSBuZXh0IHVybFxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZXMucHVzaChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKGBlcnJvciBlbmNvdW50ZXJlZCBkdXJpbmcgQ0NJUCBmZXRjaDogJHtlcnJvck1lc3NhZ2VzLm1hcCgobSkgPT4gSlNPTi5zdHJpbmdpZnkobSkpLmpvaW4oXCIsIFwiKX1gLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgIHVybHMsIGVycm9yTWVzc2FnZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRmV0Y2hlcyB0aGUgYmxvY2tOdW1iZXIsIGJ1dCB3aWxsIHJldXNlIGFueSByZXN1bHQgdGhhdCBpcyBsZXNzXG4gICAgLy8gdGhhbiBtYXhBZ2Ugb2xkIG9yIGhhcyBiZWVuIHJlcXVlc3RlZCBzaW5jZSB0aGUgbGFzdCByZXF1ZXN0XG4gICAgX2dldEludGVybmFsQmxvY2tOdW1iZXIobWF4QWdlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLl9yZWFkeSgpO1xuICAgICAgICAgICAgLy8gQWxsb3dpbmcgc3RhbGUgZGF0YSB1cCB0byBtYXhBZ2Ugb2xkXG4gICAgICAgICAgICBpZiAobWF4QWdlID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdoaWxlIHRoZXJlIGFyZSBwZW5kaW5nIGludGVybmFsIGJsb2NrIHJlcXVlc3RzLi4uXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gLi4uXCJyZW1lbWJlclwiIHdoaWNoIGZldGNoIHdlIHN0YXJ0ZWQgd2l0aFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm5hbEJsb2NrTnVtYmVyID0gdGhpcy5faW50ZXJuYWxCbG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSByZXN1bHQgaXMgbm90IHRvbyBzdGFsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgaW50ZXJuYWxCbG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZ2V0VGltZSgpIC0gcmVzdWx0LnJlc3BUaW1lKSA8PSBtYXhBZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG9vIG9sZDsgZmV0Y2ggYSBuZXcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZldGNoIHJlamVjdGVkOyBpZiB3ZSBhcmUgdGhlIGZpcnN0IHRvIGdldCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdGlvbiwgZHJvcCB0aHJvdWdoIHNvIHdlIHJlcGxhY2UgaXQgd2l0aCBhIG5ld1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmV0Y2g7IGFsbCBvdGhlcnMgYmxvY2tlZCB3aWxsIHRoZW4gZ2V0IHRoYXQgZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdvbid0IG1hdGNoIHRoZSBvbmUgdGhleSBcInJlbWVtYmVyZWRcIiBhbmQgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPT09IGludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcVRpbWUgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgICBjb25zdCBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIgPSByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgYmxvY2tOdW1iZXI6IHRoaXMucGVyZm9ybShcImdldEJsb2NrTnVtYmVyXCIsIHt9KSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrRXJyb3I6IHRoaXMuZ2V0TmV0d29yaygpLnRoZW4oKG5ldHdvcmspID0+IChudWxsKSwgKGVycm9yKSA9PiAoZXJyb3IpKVxuICAgICAgICAgICAgfSkudGhlbigoeyBibG9ja051bWJlciwgbmV0d29ya0Vycm9yIH0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVucmVtZW1iZXIgdGhpcyBiYWQgaW50ZXJuYWwgYmxvY2sgbnVtYmVyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyID09PSBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldHdvcmtFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcFRpbWUgPSBnZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSBCaWdOdW1iZXIuZnJvbShibG9ja051bWJlcikudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPCB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gdGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcik7IC8vIEBUT0RPOiBTdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgYmxvY2tOdW1iZXIsIHJlcVRpbWUsIHJlc3BUaW1lIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPSBjaGVja0ludGVybmFsQmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAvLyBTd2FsbG93IHVuaGFuZGxlZCBleGNlcHRpb25zOyBpZiBuZWVkZWQgdGhleSBhcmUgaGFuZGxlZCBlbHNlIHdoZXJlXG4gICAgICAgICAgICBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgbnVsbCB0aGUgZGVhZCAocmVqZWN0ZWQpIGZldGNoLCBpZiBpdCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9PT0gY2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICh5aWVsZCBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIpLmJsb2NrTnVtYmVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9sbCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbGxJZCA9IG5leHRQb2xsSWQrKztcbiAgICAgICAgICAgIC8vIFRyYWNrIGFsbCBydW5uaW5nIHByb21pc2VzLCBzbyB3ZSBjYW4gdHJpZ2dlciBhIHBvc3QtcG9sbCBvbmNlIHRoZXkgYXJlIGNvbXBsZXRlXG4gICAgICAgICAgICBjb25zdCBydW5uZXJzID0gW107XG4gICAgICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgdGhpcy5wb2xsaW5nSW50ZXJ2YWwgLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgLy8gRW1pdCBhIHBvbGwgZXZlbnQgYWZ0ZXIgd2UgaGF2ZSB0aGUgbGF0ZXN0IChmYXN0KSBibG9jayBudW1iZXJcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInBvbGxcIiwgcG9sbElkLCBibG9ja051bWJlcik7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYmxvY2sgaGFzIG5vdCBjaGFuZ2VkLCBtZWguXG4gICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPT09IHRoaXMuX2xhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRpZFBvbGxcIiwgcG9sbElkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaXJzdCBwb2xsaW5nIGN5Y2xlLCB0cmlnZ2VyIGEgXCJibG9ja1wiIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZWQuYmxvY2sgPT09IC0yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlZC5ibG9jayA9IGJsb2NrTnVtYmVyIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChNYXRoLmFicygodGhpcy5fZW1pdHRlZC5ibG9jaykgLSBibG9ja051bWJlcikgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYG5ldHdvcmsgYmxvY2sgc2tldyBkZXRlY3RlZDsgc2tpcHBpbmcgYmxvY2sgZXZlbnRzIChlbWl0dGVkPSR7dGhpcy5fZW1pdHRlZC5ibG9ja30gYmxvY2tOdW1iZXIke2Jsb2NrTnVtYmVyfSlgKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBsb2dnZXIubWFrZUVycm9yKFwibmV0d29yayBibG9jayBza2V3IGRldGVjdGVkXCIsIExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBibG9ja051bWJlcjogYmxvY2tOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBcImJsb2NrU2tld1wiLFxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0Jsb2NrTnVtYmVyOiB0aGlzLl9lbWl0dGVkLmJsb2NrXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImJsb2NrXCIsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhbGwgbGlzdGVuZXIgZm9yIGVhY2ggYmxvY2sgdGhhdCBoYXMgcGFzc2VkXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuX2VtaXR0ZWQuYmxvY2sgKyAxOyBpIDw9IGJsb2NrTnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiYmxvY2tcIiwgaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIGVtaXR0ZWQgYmxvY2sgd2FzIHVwZGF0ZWQsIGNoZWNrIGZvciBvYnNvbGV0ZSBldmVudHNcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVkLmJsb2NrICE9PSBibG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWQuYmxvY2sgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLl9lbWl0dGVkKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJsb2NrIGV2ZW50IGRvZXMgbm90IGV4cGlyZVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcImJsb2NrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYmxvY2sgd2Ugd2VyZSBhdCB3aGVuIHdlIGVtaXR0ZWQgdGhpcyBldmVudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudEJsb2NrTnVtYmVyID0gdGhpcy5fZW1pdHRlZFtrZXldO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW5ub3QgZ2FyYmFnZSBjb2xsZWN0IHBlbmRpbmcgdHJhbnNhY3Rpb25zIG9yIGJsb2NrcyBoZXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXkgc2hvdWxkIGJlIGdhcmJhZ2UgY29sbGVjdGVkIGJ5IHRoZSBQcm92aWRlciB3aGVuIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gXCJwZW5kaW5nXCIgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudEJsb2NrTnVtYmVyID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEV2aWN0IGFueSB0cmFuc2FjdGlvbiBoYXNoZXMgb3IgYmxvY2sgaGFzaGVzIG92ZXIgMTIgYmxvY2tzXG4gICAgICAgICAgICAgICAgICAgIC8vIG9sZCwgc2luY2UgdGhleSBzaG91bGQgbm90IHJldHVybiBudWxsIGFueXdheXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyIC0gZXZlbnRCbG9ja051bWJlciA+IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZW1pdHRlZFtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaXJzdCBwb2xsaW5nIGN5Y2xlXG4gICAgICAgICAgICBpZiAodGhpcy5fbGFzdEJsb2NrTnVtYmVyID09PSAtMikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpbmQgYWxsIHRyYW5zYWN0aW9uIGhhc2hlcyB3ZSBhcmUgd2FpdGluZyBvblxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0eFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0gZXZlbnQuaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydW5uZXIgPSB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKS50aGVuKChyZWNlaXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWNlaXB0IHx8IHJlY2VpcHQuYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlZFtcInQ6XCIgKyBoYXNoXSA9IHJlY2VpcHQuYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGhhc2gsIHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7IHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uZXJzLnB1c2gocnVubmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmaWx0ZXJcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugb25seSBhbGxvdyBhIHNpbmdsZSBnZXRMb2dzIHRvIGJlIGluLWZsaWdodCBhdCBhIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQuX2luZmxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2luZmxpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBmaWx0ZXIgZm9yIHRoaXMgZXZlbnQsIHNvIHdlIHdhbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXN0cmljdCBldmVudHMgdG8gZXZlbnRzIHRoYXQgaGFwcGVuZWQgbm8gZWFybGllciB0aGFuIG5vd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5fbGFzdEJsb2NrTnVtYmVyID09PSAtMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXIgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgZnJvbSB0aGUgbGFzdCAqa25vd24qIGV2ZW50OyBkdWUgdG8gbG9hZC1iYWxhbmNpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgc29tZSBub2RlcyByZXR1cm5pbmcgdXBkYXRlZCBibG9jayBudW1iZXJzIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluZGV4aW5nIGV2ZW50cywgYSBsb2dzIHJlc3VsdCB3aXRoIDAgZW50cmllcyBjYW5ub3QgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVzdGVkIGFuZCB3ZSBtdXN0IHJldHJ5IGEgcmFuZ2Ugd2hpY2ggaW5jbHVkZXMgaXQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBldmVudC5maWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyLmZyb21CbG9jayA9IGV2ZW50Ll9sYXN0QmxvY2tOdW1iZXIgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci50b0Jsb2NrID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBmaXRsZXIgcmFuZ2VzIGZyb20gZ3Jvd2luZyB0b28gd2lsZCwgc2luY2UgaXQgaXMgcXVpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgdGhlcmUganVzdCBoYXZlbid0IGJlZW4gYW55IGV2ZW50cyB0byBtb3ZlIHRoZSBsYXN0QmxvY2tOdW1iZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluRnJvbUJsb2NrID0gZmlsdGVyLnRvQmxvY2sgLSB0aGlzLl9tYXhGaWx0ZXJCbG9ja1JhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5Gcm9tQmxvY2sgPiBmaWx0ZXIuZnJvbUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5mcm9tQmxvY2sgPSBtaW5Gcm9tQmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIuZnJvbUJsb2NrIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIuZnJvbUJsb2NrID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcnVubmVyID0gdGhpcy5nZXRMb2dzKGZpbHRlcikudGhlbigobG9ncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvdyB0aGUgbmV4dCBnZXRMb2dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9pbmZsaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9ncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dzLmZvckVhY2goKGxvZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSB3aGVuIHdlIGdldCBhbiBldmVudCBmb3IgYSBnaXZlbiBibG9jayBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbiB3ZSB0cnVzdCB0aGUgZXZlbnRzIGFyZSBpbmRleGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nLmJsb2NrTnVtYmVyID4gZXZlbnQuX2xhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9sYXN0QmxvY2tOdW1iZXIgPSBsb2cuYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2Ugc3RhbGwgcmVxdWVzdHMgdG8gZmV0Y2ggYmxvY2tzIGFuZCB0eHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWRbXCJiOlwiICsgbG9nLmJsb2NrSGFzaF0gPSBsb2cuYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1widDpcIiArIGxvZy50cmFuc2FjdGlvbkhhc2hdID0gbG9nLmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGZpbHRlciwgbG9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgYW5vdGhlciBnZXRMb2dzICh0aGUgcmFuZ2Ugd2FzIG5vdCB1cGRhdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5faW5mbGlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5uZXJzLnB1c2gocnVubmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgIC8vIE9uY2UgYWxsIGV2ZW50cyBmb3IgdGhpcyBsb29wIGhhdmUgYmVlbiBwcm9jZXNzZWQsIGVtaXQgXCJkaWRQb2xsXCJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHJ1bm5lcnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRpZFBvbGxcIiwgcG9sbElkKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4geyB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7IH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gRGVwcmVjYXRlZDsgZG8gbm90IHVzZSB0aGlzXG4gICAgcmVzZXRFdmVudHNCbG9jayhibG9ja051bWJlcikge1xuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlciAtIDE7XG4gICAgICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBuZXR3b3JrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmV0d29yaztcbiAgICB9XG4gICAgLy8gVGhpcyBtZXRob2Qgc2hvdWxkIHF1ZXJ5IHRoZSBuZXR3b3JrIGlmIHRoZSB1bmRlcmx5aW5nIG5ldHdvcmtcbiAgICAvLyBjYW4gY2hhbmdlLCBzdWNoIGFzIHdoZW4gY29ubmVjdGVkIHRvIGEgSlNPTi1SUEMgYmFja2VuZFxuICAgIGRldGVjdE5ldHdvcmsoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IG5ldHdvcmsgZGV0ZWN0aW9uXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInByb3ZpZGVyLmRldGVjdE5ldHdvcmtcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXROZXR3b3JrKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbmV0d29yayA9IHlpZWxkIHRoaXMuX3JlYWR5KCk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgYXJlIHN0aWxsIGNvbm5lY3RlZCB0byB0aGUgc2FtZSBuZXR3b3JrOyB0aGlzIGlzXG4gICAgICAgICAgICAvLyBvbmx5IGFuIGV4dGVybmFsIGNhbGwgZm9yIGJhY2tlbmRzIHdoaWNoIGNhbiBoYXZlIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgICAgICAvLyBuZXR3b3JrIGNoYW5nZSBzcG9udGFuZW91c2x5XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50TmV0d29yayA9IHlpZWxkIHRoaXMuZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICAgICAgaWYgKG5ldHdvcmsuY2hhaW5JZCAhPT0gY3VycmVudE5ldHdvcmsuY2hhaW5JZCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBhbGxvd2luZyBuZXR3b3JrIGNoYW5nZXMsIHRoaW5ncyBjYW4gZ2V0IGNvbXBsZXggZmFzdDtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nIGlmIHlvdSB1c2UgXCJhbnlcIlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFueU5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV0d29yayA9IGN1cnJlbnROZXR3b3JrO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBhbGwgaW50ZXJuYWwgYmxvY2sgbnVtYmVyIGd1YXJkcyBhbmQgY2FjaGVzXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RCbG9ja051bWJlciA9IC0yO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFzdFF1ZXJ5RGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWQuYmxvY2sgPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlciA9IC0xMDI0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFwibmV0d29ya1wiIGV2ZW50IE1VU1QgaGFwcGVuIGJlZm9yZSB0aGlzIG1ldGhvZCByZXNvbHZlc1xuICAgICAgICAgICAgICAgICAgICAvLyBzbyBhbnkgZXZlbnRzIGhhdmUgYSBjaGFuY2UgdG8gdW5yZWdpc3Rlciwgc28gd2Ugc3RhbGwgYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkaXRpb25hbCBldmVudCBsb29wIGJlZm9yZSByZXR1cm5pbmcgZnJvbSAvdGhpcy8gY2FsbFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJuZXR3b3JrXCIsIGN1cnJlbnROZXR3b3JrLCBuZXR3b3JrKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgc3RhbGwoMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZXR3b3JrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGxvZ2dlci5tYWtlRXJyb3IoXCJ1bmRlcmx5aW5nIG5ldHdvcmsgY2hhbmdlZFwiLCBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IFwiY2hhbmdlZFwiLFxuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrOiBuZXR3b3JrLFxuICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZE5ldHdvcms6IGN1cnJlbnROZXR3b3JrXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldHdvcms7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgYmxvY2tOdW1iZXIoKSB7XG4gICAgICAgIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgdGhpcy5wb2xsaW5nSW50ZXJ2YWwgLyAyKS50aGVuKChibG9ja051bWJlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7IH0pO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2Zhc3RCbG9ja051bWJlciAhPSBudWxsKSA/IHRoaXMuX2Zhc3RCbG9ja051bWJlciA6IC0xO1xuICAgIH1cbiAgICBnZXQgcG9sbGluZygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9wb2xsZXIgIT0gbnVsbCk7XG4gICAgfVxuICAgIHNldCBwb2xsaW5nKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdGhpcy5fcG9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7IHRoaXMucG9sbCgpOyB9LCB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Jvb3RzdHJhcFBvbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib290c3RyYXBQb2xsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBibG9jayBhZGRpdGlvbmFsIHBvbGxzIHVudGlsIHRoZSBwb2xsaW5nIGludGVydmFsXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGRvbmUsIHRvIHByZXZlbnQgb3ZlcndoZWxtaW5nIHRoZSBwb2xsIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jvb3RzdHJhcFBvbGwgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHBvbGxpbmcgd2FzIGRpc2FibGVkLCBzb21ldGhpbmcgbWF5IHJlcXVpcmUgYSBwb2tlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSBzdGFydGluZyB0aGUgYm9vdHN0cmFwIHBvbGwgYW5kIGl0IHdhcyBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIG91dCB0aGUgYm9vdHN0cmFwIHNvIHdlIGNhbiBkbyBhbm90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib290c3RyYXBQb2xsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF2YWx1ZSAmJiB0aGlzLl9wb2xsZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fcG9sbGVyKTtcbiAgICAgICAgICAgIHRoaXMuX3BvbGxlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHBvbGxpbmdJbnRlcnZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvbGxpbmdJbnRlcnZhbDtcbiAgICB9XG4gICAgc2V0IHBvbGxpbmdJbnRlcnZhbCh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgIT09IFwibnVtYmVyXCIgfHwgdmFsdWUgPD0gMCB8fCBwYXJzZUludChTdHJpbmcodmFsdWUpKSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwb2xsaW5nIGludGVydmFsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BvbGxpbmdJbnRlcnZhbCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fcG9sbGVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3BvbGxlcik7XG4gICAgICAgICAgICB0aGlzLl9wb2xsZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7IHRoaXMucG9sbCgpOyB9LCB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXRGYXN0QmxvY2tOdW1iZXIoKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IGdldFRpbWUoKTtcbiAgICAgICAgLy8gU3RhbGUgYmxvY2sgbnVtYmVyLCByZXF1ZXN0IGEgbmV3ZXIgdmFsdWVcbiAgICAgICAgaWYgKChub3cgLSB0aGlzLl9mYXN0UXVlcnlEYXRlKSA+IDIgKiB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2Zhc3RRdWVyeURhdGUgPSBub3c7XG4gICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlID0gdGhpcy5nZXRCbG9ja051bWJlcigpLnRoZW4oKGJsb2NrTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Zhc3RCbG9ja051bWJlciA9PSBudWxsIHx8IGJsb2NrTnVtYmVyID4gdGhpcy5fZmFzdEJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFzdEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2U7XG4gICAgfVxuICAgIF9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgLy8gT2xkZXIgYmxvY2ssIG1heWJlIGEgc3RhbGUgcmVxdWVzdFxuICAgICAgICBpZiAodGhpcy5fZmFzdEJsb2NrTnVtYmVyICE9IG51bGwgJiYgYmxvY2tOdW1iZXIgPCB0aGlzLl9mYXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgdGhlIHRpbWUgd2UgdXBkYXRlZCB0aGUgYmxvY2tudW1iZXJcbiAgICAgICAgdGhpcy5fZmFzdFF1ZXJ5RGF0ZSA9IGdldFRpbWUoKTtcbiAgICAgICAgLy8gTmV3ZXIgYmxvY2sgbnVtYmVyLCB1c2UgIGl0XG4gICAgICAgIGlmICh0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPT0gbnVsbCB8fCBibG9ja051bWJlciA+IHRoaXMuX2Zhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGJsb2NrTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoLCBjb25maXJtYXRpb25zLCB0aW1lb3V0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2FpdEZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgKGNvbmZpcm1hdGlvbnMgPT0gbnVsbCkgPyAxIDogY29uZmlybWF0aW9ucywgdGltZW91dCB8fCAwLCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF93YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoLCBjb25maXJtYXRpb25zLCB0aW1lb3V0LCByZXBsYWNlYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVjZWlwdCA9IHlpZWxkIHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgICAgICAvLyBSZWNlaXB0IGlzIGFscmVhZHkgZ29vZFxuICAgICAgICAgICAgaWYgKChyZWNlaXB0ID8gcmVjZWlwdC5jb25maXJtYXRpb25zIDogMCkgPj0gY29uZmlybWF0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUG9sbCB1bnRpbCB0aGUgcmVjZWlwdCBpcyBnb29kLi4uXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbmNlbEZ1bmNzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5RG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxGdW5jcy5mb3JFYWNoKChmdW5jKSA9PiB7IGZ1bmMoKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbmVkSGFuZGxlciA9IChyZWNlaXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWNlaXB0LmNvbmZpcm1hdGlvbnMgPCBjb25maXJtYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFscmVhZHlEb25lKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlY2VpcHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5vbih0cmFuc2FjdGlvbkhhc2gsIG1pbmVkSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgY2FuY2VsRnVuY3MucHVzaCgoKSA9PiB7IHRoaXMucmVtb3ZlTGlzdGVuZXIodHJhbnNhY3Rpb25IYXNoLCBtaW5lZEhhbmRsZXIpOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZWFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RCbG9ja051bWJlciA9IHJlcGxhY2VhYmxlLnN0YXJ0QmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzY2FubmVkQmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlSGFuZGxlciA9IChibG9ja051bWJlcikgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IDEgc2Vjb25kOyB0aGlzIGlzIG9ubHkgdXNlZCBpbiB0aGUgY2FzZSBvZiBhIGZhdWx0LCBzb1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2lsbCB0cmFkZSBvZmYgYSBsaXR0bGUgYml0IG9mIGxhdGVuY3kgZm9yIG1vcmUgY29uc2lzdGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0cyBhbmQgZmV3ZXIgSlNPTi1SUEMgY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHN0YWxsKDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRUcmFuc2FjdGlvbkNvdW50KHJlcGxhY2VhYmxlLmZyb20pLnRoZW4oKG5vbmNlKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9uY2UgPD0gcmVwbGFjZWFibGUubm9uY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgdHJhbnNhY3Rpb24gd2FzIG1pbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pbmVkID0geWllbGQgdGhpcy5nZXRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmVkICYmIG1pbmVkLmJsb2NrTnVtYmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QgdGltZSBzY2FubmluZy4gV2Ugc3RhcnQgYSBsaXR0bGUgZWFybGllciBmb3Igc29tZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWdnbGUgcm9vbSBoZXJlIHRvIGhhbmRsZSB0aGUgZXZlbnR1YWxseSBjb25zaXN0ZW50IG5hdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBibG9ja2NoYWluIChlLmcuIHRoZSBnZXRUcmFuc2FjdGlvbkNvdW50IHdhcyBmb3IgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaWZmZXJlbnQgYmxvY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FubmVkQmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nhbm5lZEJsb2NrID0gbGFzdEJsb2NrTnVtYmVyIC0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FubmVkQmxvY2sgPCByZXBsYWNlYWJsZS5zdGFydEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nhbm5lZEJsb2NrID0gcmVwbGFjZWFibGUuc3RhcnRCbG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2Nhbm5lZEJsb2NrIDw9IGJsb2NrTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0geWllbGQgdGhpcy5nZXRCbG9ja1dpdGhUcmFuc2FjdGlvbnMoc2Nhbm5lZEJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRpID0gMDsgdGkgPCBibG9jay50cmFuc2FjdGlvbnMubGVuZ3RoOyB0aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBibG9jay50cmFuc2FjdGlvbnNbdGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWxseSBtaW5lZCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguaGFzaCA9PT0gdHJhbnNhY3Rpb25IYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWF0Y2hlcyBvdXIgdHJhbnNhY3Rpb24gZnJvbSBhbmQgbm9uY2U7IGl0cyBhIHJlcGxhY2VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR4LmZyb20gPT09IHJlcGxhY2VhYmxlLmZyb20gJiYgdHgubm9uY2UgPT09IHJlcGxhY2VhYmxlLm5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSByZWNlaXB0IG9mIHRoZSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWNlaXB0ID0geWllbGQgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24odHguaGFzaCwgY29uZmlybWF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgKHByb2xseSBhIHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHJlYWR5RG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlYXNvbiB3ZSB3ZXJlIHJlcGxhY2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWFzb24gPSBcInJlcGxhY2VkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5kYXRhID09PSByZXBsYWNlYWJsZS5kYXRhICYmIHR4LnRvID09PSByZXBsYWNlYWJsZS50byAmJiB0eC52YWx1ZS5lcShyZXBsYWNlYWJsZS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IFwicmVwcmljZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eC5kYXRhID09PSBcIjB4XCIgJiYgdHguZnJvbSA9PT0gdHgudG8gJiYgdHgudmFsdWUuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IFwiY2FuY2VsbGVkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGFpbiB3aHkgd2Ugd2VyZSByZXBsYWNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobG9nZ2VyLm1ha2VFcnJvcihcInRyYW5zYWN0aW9uIHdhcyByZXBsYWNlZFwiLCBMb2dnZXIuZXJyb3JzLlRSQU5TQUNUSU9OX1JFUExBQ0VELCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQ6IChyZWFzb24gPT09IFwicmVwbGFjZWRcIiB8fCByZWFzb24gPT09IFwiY2FuY2VsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IHRoaXMuX3dyYXBUcmFuc2FjdGlvbih0eCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoOiB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYW5uZWRCbG9jaysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiYmxvY2tcIiwgcmVwbGFjZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiYmxvY2tcIiwgcmVwbGFjZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsRnVuY3MucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwiYmxvY2tcIiwgcmVwbGFjZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodGltZW91dCkgPT09IFwibnVtYmVyXCIgJiYgdGltZW91dCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHJlYWR5RG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGxvZ2dlci5tYWtlRXJyb3IoXCJ0aW1lb3V0IGV4Y2VlZGVkXCIsIExvZ2dlci5lcnJvcnMuVElNRU9VVCwgeyB0aW1lb3V0OiB0aW1lb3V0IH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lci51bnJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxGdW5jcy5wdXNoKCgpID0+IHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRCbG9ja051bWJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0R2FzUHJpY2UoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldEdhc1ByaWNlXCIsIHt9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0R2FzUHJpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0QmFsYW5jZShhZGRyZXNzT3JOYW1lLCBibG9ja1RhZykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB5aWVsZCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxcbiAgICAgICAgICAgICAgICBibG9ja1RhZzogdGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldEJhbGFuY2VcIiwgcGFyYW1zKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0QmFsYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFRyYW5zYWN0aW9uQ291bnQoYWRkcmVzc09yTmFtZSwgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksXG4gICAgICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRUcmFuc2FjdGlvbkNvdW50XCIsIHBhcmFtcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldENvZGUoYWRkcmVzc09yTmFtZSwgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksXG4gICAgICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRDb2RlXCIsIHBhcmFtcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZXhsaWZ5KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0Q29kZVwiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFN0b3JhZ2VBdChhZGRyZXNzT3JOYW1lLCBwb3NpdGlvbiwgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksXG4gICAgICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogUHJvbWlzZS5yZXNvbHZlKHBvc2l0aW9uKS50aGVuKChwKSA9PiBoZXhWYWx1ZShwKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0U3RvcmFnZUF0XCIsIHBhcmFtcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZXhsaWZ5KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0U3RvcmFnZUF0XCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcywgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IGFueSBzdWJjbGFzcyB3cmFwcGluZyBhIFRyYW5zYWN0aW9uUmVzcG9uc2VcbiAgICBfd3JhcFRyYW5zYWN0aW9uKHR4LCBoYXNoLCBzdGFydEJsb2NrKSB7XG4gICAgICAgIGlmIChoYXNoICE9IG51bGwgJiYgaGV4RGF0YUxlbmd0aChoYXNoKSAhPT0gMzIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcmVzcG9uc2UgLSBzZW5kVHJhbnNhY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHg7XG4gICAgICAgIC8vIENoZWNrIHRoZSBoYXNoIHdlIGV4cGVjdCBpcyB0aGUgc2FtZSBhcyB0aGUgaGFzaCB0aGUgc2VydmVyIHJlcG9ydGVkXG4gICAgICAgIGlmIChoYXNoICE9IG51bGwgJiYgdHguaGFzaCAhPT0gaGFzaCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJUcmFuc2FjdGlvbiBoYXNoIG1pc21hdGNoIGZyb20gUHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uLlwiLCBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1IsIHsgZXhwZWN0ZWRIYXNoOiB0eC5oYXNoLCByZXR1cm5lZEhhc2g6IGhhc2ggfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LndhaXQgPSAoY29uZmlybXMsIHRpbWVvdXQpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChjb25maXJtcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlybXMgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR2V0IHRoZSBkZXRhaWxzIHRvIGRldGVjdCByZXBsYWNlbWVudFxuICAgICAgICAgICAgbGV0IHJlcGxhY2VtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKGNvbmZpcm1zICE9PSAwICYmIHN0YXJ0QmxvY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0eC5mcm9tLFxuICAgICAgICAgICAgICAgICAgICBub25jZTogdHgubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIHRvOiB0eC50byxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHR4LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzdGFydEJsb2NrXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSB5aWVsZCB0aGlzLl93YWl0Rm9yVHJhbnNhY3Rpb24odHguaGFzaCwgY29uZmlybXMsIHRpbWVvdXQsIHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChyZWNlaXB0ID09IG51bGwgJiYgY29uZmlybXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vIGxvbmdlciBwZW5kaW5nLCBhbGxvdyB0aGUgcG9sbGluZyBsb29wIHRvIGdhcmJhZ2UgY29sbGVjdCB0aGlzXG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1widDpcIiArIHR4Lmhhc2hdID0gcmVjZWlwdC5ibG9ja051bWJlcjtcbiAgICAgICAgICAgIGlmIChyZWNlaXB0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidHJhbnNhY3Rpb24gZmFpbGVkXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiB0eC5oYXNoLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHgsXG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHQ6IHJlY2VpcHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2VuZFRyYW5zYWN0aW9uKHNpZ25lZFRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IGhleFR4ID0geWllbGQgUHJvbWlzZS5yZXNvbHZlKHNpZ25lZFRyYW5zYWN0aW9uKS50aGVuKHQgPT4gaGV4bGlmeSh0KSk7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uKHNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIGlmICh0eC5jb25maXJtYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5jb25maXJtYXRpb25zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyAyICogdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNoID0geWllbGQgdGhpcy5wZXJmb3JtKFwic2VuZFRyYW5zYWN0aW9uXCIsIHsgc2lnbmVkVHJhbnNhY3Rpb246IGhleFR4IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgsIGhhc2gsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yLnRyYW5zYWN0aW9uID0gdHg7XG4gICAgICAgICAgICAgICAgZXJyb3IudHJhbnNhY3Rpb25IYXNoID0gdHguaGFzaDtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRUcmFuc2FjdGlvblJlcXVlc3QodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IHlpZWxkIHRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgY29uc3QgdHggPSB7fTtcbiAgICAgICAgICAgIFtcImZyb21cIiwgXCJ0b1wiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHR4W2tleV0gPSBQcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4oKHYpID0+ICh2ID8gdGhpcy5fZ2V0QWRkcmVzcyh2KSA6IG51bGwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgW1wiZ2FzTGltaXRcIiwgXCJnYXNQcmljZVwiLCBcIm1heEZlZVBlckdhc1wiLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwidmFsdWVcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1trZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0eFtrZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKCh2KSA9PiAodiA/IEJpZ051bWJlci5mcm9tKHYpIDogbnVsbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBbXCJ0eXBlXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHhba2V5XSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZXNba2V5XSkudGhlbigodikgPT4gKCh2ICE9IG51bGwpID8gdiA6IG51bGwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5hY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgdHguYWNjZXNzTGlzdCA9IHRoaXMuZm9ybWF0dGVyLmFjY2Vzc0xpc3QodmFsdWVzLmFjY2Vzc0xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgW1wiZGF0YVwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHR4W2tleV0gPSBQcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4oKHYpID0+ICh2ID8gaGV4bGlmeSh2KSA6IG51bGwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVxdWVzdCh5aWVsZCByZXNvbHZlUHJvcGVydGllcyh0eCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2dldEZpbHRlcihmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IHlpZWxkIGZpbHRlcjtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgaWYgKGZpbHRlci5hZGRyZXNzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkcmVzcyA9IHRoaXMuX2dldEFkZHJlc3MoZmlsdGVyLmFkZHJlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgW1wiYmxvY2tIYXNoXCIsIFwidG9waWNzXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBmaWx0ZXJba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgW1wiZnJvbUJsb2NrXCIsIFwidG9CbG9ja1wiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5fZ2V0QmxvY2tUYWcoZmlsdGVyW2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuZmlsdGVyKHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHJlc3VsdCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2NhbGwodHJhbnNhY3Rpb24sIGJsb2NrVGFnLCBhdHRlbXB0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoYXR0ZW1wdCA+PSBNQVhfQ0NJUF9SRURJUkVDVFMpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkNDSVAgcmVhZCBleGNlZWRlZCBtYXhpbXVtIHJlZGlyZWN0aW9uc1wiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICByZWRpcmVjdHM6IGF0dGVtcHQsIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0eFNlbmRlciA9IHRyYW5zYWN0aW9uLnRvO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiY2FsbFwiLCB7IHRyYW5zYWN0aW9uLCBibG9ja1RhZyB9KTtcbiAgICAgICAgICAgIC8vIENDSVAgUmVhZCByZXF1ZXN0IHZpYSBPZmZjaGFpbkxvb2t1cChhZGRyZXNzLHN0cmluZ1tdLGJ5dGVzLGJ5dGVzNCxieXRlcylcbiAgICAgICAgICAgIGlmIChhdHRlbXB0ID49IDAgJiYgYmxvY2tUYWcgPT09IFwibGF0ZXN0XCIgJiYgdHhTZW5kZXIgIT0gbnVsbCAmJiByZXN1bHQuc3Vic3RyaW5nKDAsIDEwKSA9PT0gXCIweDU1NmYxODMwXCIgJiYgKGhleERhdGFMZW5ndGgocmVzdWx0KSAlIDMyID09PSA0KSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBoZXhEYXRhU2xpY2UocmVzdWx0LCA0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHNlbmRlciBvZiB0aGUgT2ZmY2hhaW5Mb29rdXAgbWF0Y2hlcyB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gaGV4RGF0YVNsaWNlKGRhdGEsIDAsIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFCaWdOdW1iZXIuZnJvbShzZW5kZXIpLmVxKHR4U2VuZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJDQ0lQIFJlYWQgc2VuZGVyIGRpZCBub3QgbWF0Y2hcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IFwiT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCB0aGUgVVJMcyBmcm9tIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmxzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybHNPZmZzZXQgPSBCaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UoZGF0YSwgMzIsIDY0KSkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsc0xlbmd0aCA9IEJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShkYXRhLCB1cmxzT2Zmc2V0LCB1cmxzT2Zmc2V0ICsgMzIpKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmxzRGF0YSA9IGhleERhdGFTbGljZShkYXRhLCB1cmxzT2Zmc2V0ICsgMzIpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHVybHNMZW5ndGg7IHUrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gX3BhcnNlU3RyaW5nKHVybHNEYXRhLCB1ICogMzIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJDQ0lQIFJlYWQgY29udGFpbmVkIGNvcnJ1cHQgVVJMIHN0cmluZ1wiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiwgZGF0YTogcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxzLnB1c2godXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIENDSVAgY2FsbGRhdGEgdG8gZm9yd2FyZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsZGF0YSA9IF9wYXJzZUJ5dGVzKGRhdGEsIDY0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjYWxsYmFja1NlbGVjdG9yIChieXRlczQpXG4gICAgICAgICAgICAgICAgICAgIGlmICghQmlnTnVtYmVyLmZyb20oaGV4RGF0YVNsaWNlKGRhdGEsIDEwMCwgMTI4KSkuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIGNhbGxiYWNrIHNlbGVjdG9yIGluY2x1ZGVkIGp1bmtcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IFwiT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tTZWxlY3RvciA9IGhleERhdGFTbGljZShkYXRhLCA5NiwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBleHRyYSBkYXRhIHRvIHNlbmQgYmFjayB0byB0aGUgY29udHJhY3QgYXMgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYURhdGEgPSBfcGFyc2VCeXRlcyhkYXRhLCAxMjgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjY2lwUmVzdWx0ID0geWllbGQgdGhpcy5jY2lwUmVhZEZldGNoKHRyYW5zYWN0aW9uLCBjYWxsZGF0YSwgdXJscyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjY2lwUmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIGRpc2FibGVkIG9yIHByb3ZpZGVkIG5vIFVSTHNcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2ZmY2hhaW5Mb29rdXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IFwiT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogdHhTZW5kZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBoZXhDb25jYXQoW2NhbGxiYWNrU2VsZWN0b3IsIGVuY29kZUJ5dGVzKFtjY2lwUmVzdWx0LCBleHRyYURhdGFdKV0pXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsKHR4LCBibG9ja1RhZywgYXR0ZW1wdCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJjYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyB0cmFuc2FjdGlvbiwgYmxvY2tUYWcgfSwgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2FsbCh0cmFuc2FjdGlvbiwgYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB5aWVsZCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRoaXMuX2dldFRyYW5zYWN0aW9uUmVxdWVzdCh0cmFuc2FjdGlvbiksXG4gICAgICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKSxcbiAgICAgICAgICAgICAgICBjY2lwUmVhZEVuYWJsZWQ6IFByb21pc2UucmVzb2x2ZSh0cmFuc2FjdGlvbi5jY2lwUmVhZEVuYWJsZWQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsKHJlc29sdmVkLnRyYW5zYWN0aW9uLCByZXNvbHZlZC5ibG9ja1RhZywgcmVzb2x2ZWQuY2NpcFJlYWRFbmFibGVkID8gMCA6IC0xKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVzdGltYXRlR2FzKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdGhpcy5fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJlc3RpbWF0ZUdhc1wiLCBwYXJhbXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20ocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJlc3RpbWF0ZUdhc1wiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGFkZHJlc3NPck5hbWUgPSB5aWVsZCBhZGRyZXNzT3JOYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoYWRkcmVzc09yTmFtZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzIG9yIEVOUyBuYW1lXCIsIFwibmFtZVwiLCBhZGRyZXNzT3JOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB5aWVsZCB0aGlzLnJlc29sdmVOYW1lKGFkZHJlc3NPck5hbWUpO1xuICAgICAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiRU5TIG5hbWUgbm90IGNvbmZpZ3VyZWRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBgcmVzb2x2ZU5hbWUoJHtKU09OLnN0cmluZ2lmeShhZGRyZXNzT3JOYW1lKX0pYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZywgaW5jbHVkZVRyYW5zYWN0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBibG9ja0hhc2hPckJsb2NrVGFnID0geWllbGQgYmxvY2tIYXNoT3JCbG9ja1RhZztcbiAgICAgICAgICAgIC8vIElmIGJsb2NrVGFnIGlzIGEgbnVtYmVyIChub3QgXCJsYXRlc3RcIiwgZXRjKSwgdGhpcyBpcyB0aGUgYmxvY2sgbnVtYmVyXG4gICAgICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSAtMTI4O1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGluY2x1ZGVUcmFuc2FjdGlvbnM6ICEhaW5jbHVkZVRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhibG9ja0hhc2hPckJsb2NrVGFnLCAzMikpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMuYmxvY2tIYXNoID0gYmxvY2tIYXNoT3JCbG9ja1RhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5ibG9ja1RhZyA9IHlpZWxkIHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrSGFzaE9yQmxvY2tUYWcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSBwYXJzZUludChwYXJhbXMuYmxvY2tUYWcuc3Vic3RyaW5nKDIpLCAxNik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJsb2NrIGhhc2ggb3IgYmxvY2sgdGFnXCIsIFwiYmxvY2tIYXNoT3JCbG9ja1RhZ1wiLCBibG9ja0hhc2hPckJsb2NrVGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcG9sbCgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB5aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRCbG9ja1wiLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIC8vIEJsb2NrIHdhcyBub3QgZm91bmRcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYmxvY2toYXNoZXMsIGlmIHdlIGRpZG4ndCBzYXkgaXQgZXhpc3RlZCwgdGhhdCBibG9ja2hhc2ggbWF5XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBleGlzdC4gSWYgd2UgZGlkIHNlZSBpdCB0aG91Z2gsIHBlcmhhcHMgZnJvbSBhIGxvZywgd2Uga25vd1xuICAgICAgICAgICAgICAgICAgICAvLyBpdCBleGlzdHMsIGFuZCB0aGlzIG5vZGUgaXMganVzdCBub3QgY2F1Z2h0IHVwIHlldC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja0hhc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZWRbXCJiOlwiICsgcGFyYW1zLmJsb2NrSGFzaF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBibG9jayB0YWdzLCBpZiB3ZSBhcmUgYXNraW5nIGZvciBhIGZ1dHVyZSBibG9jaywgd2UgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja1RhZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPiB0aGlzLl9lbWl0dGVkLmJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0cnkgb24gdGhlIG5leHQgYmxvY2tcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlVHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBibG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2sudHJhbnNhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0eCA9IGJsb2NrLnRyYW5zYWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5ibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eC5jb25maXJtYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IHlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBjb25maXJtYXRpb25zIHVzaW5nIHRoZSBmYXN0IGJsb2NrIG51bWJlciAocGVzc2ltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpcm1hdGlvbnMgPSAoYmxvY2tOdW1iZXIgLSB0eC5ibG9ja051bWJlcikgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9ucyA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmNvbmZpcm1hdGlvbnMgPSBjb25maXJtYXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrV2l0aFR4cyA9IHRoaXMuZm9ybWF0dGVyLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyhibG9jayk7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrV2l0aFR4cy50cmFuc2FjdGlvbnMgPSBibG9ja1dpdGhUeHMudHJhbnNhY3Rpb25zLm1hcCgodHgpID0+IHRoaXMuX3dyYXBUcmFuc2FjdGlvbih0eCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2tXaXRoVHhzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2soYmxvY2spO1xuICAgICAgICAgICAgfSksIHsgb25jZVBvbGw6IHRoaXMgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZywgZmFsc2UpKTtcbiAgICB9XG4gICAgZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zKGJsb2NrSGFzaE9yQmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9nZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnLCB0cnVlKSk7XG4gICAgfVxuICAgIGdldFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2ggPSB5aWVsZCB0cmFuc2FjdGlvbkhhc2g7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7IHRyYW5zYWN0aW9uSGFzaDogdGhpcy5mb3JtYXR0ZXIuaGFzaCh0cmFuc2FjdGlvbkhhc2gsIHRydWUpIH07XG4gICAgICAgICAgICByZXR1cm4gcG9sbCgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0VHJhbnNhY3Rpb25cIiwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZWRbXCJ0OlwiICsgdHJhbnNhY3Rpb25IYXNoXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAodHguYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0eC5jb25maXJtYXRpb25zID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHguY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyAyICogdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbmZpcm1hdGlvbnMgdXNpbmcgdGhlIGZhc3QgYmxvY2sgbnVtYmVyIChwZXNzaW1pc3RpYylcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpcm1hdGlvbnMgPSAoYmxvY2tOdW1iZXIgLSB0eC5ibG9ja051bWJlcikgKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtYXRpb25zID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0eC5jb25maXJtYXRpb25zID0gY29uZmlybWF0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgICAgICB9KSwgeyBvbmNlUG9sbDogdGhpcyB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFRyYW5zYWN0aW9uUmVjZWlwdCh0cmFuc2FjdGlvbkhhc2gpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoID0geWllbGQgdHJhbnNhY3Rpb25IYXNoO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0geyB0cmFuc2FjdGlvbkhhc2g6IHRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLCB0cnVlKSB9O1xuICAgICAgICAgICAgcmV0dXJuIHBvbGwoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlZFtcInQ6XCIgKyB0cmFuc2FjdGlvbkhhc2hdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFwiZ2V0aC1ldGNcIiByZXR1cm5zIHJlY2VpcHRzIGJlZm9yZSB0aGV5IGFyZSByZWFkeVxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuYmxvY2tIYXNoID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjZWlwdCA9IHRoaXMuZm9ybWF0dGVyLnJlY2VpcHQocmVzdWx0KTtcbiAgICAgICAgICAgICAgICBpZiAocmVjZWlwdC5ibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuY29uZmlybWF0aW9ucyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlY2VpcHQuY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyAyICogdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbmZpcm1hdGlvbnMgdXNpbmcgdGhlIGZhc3QgYmxvY2sgbnVtYmVyIChwZXNzaW1pc3RpYylcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpcm1hdGlvbnMgPSAoYmxvY2tOdW1iZXIgLSByZWNlaXB0LmJsb2NrTnVtYmVyKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtYXRpb25zIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvbnMgPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHQuY29uZmlybWF0aW9ucyA9IGNvbmZpcm1hdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgICAgICAgICAgfSksIHsgb25jZVBvbGw6IHRoaXMgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRMb2dzKGZpbHRlcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB5aWVsZCByZXNvbHZlUHJvcGVydGllcyh7IGZpbHRlcjogdGhpcy5fZ2V0RmlsdGVyKGZpbHRlcikgfSk7XG4gICAgICAgICAgICBjb25zdCBsb2dzID0geWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0TG9nc1wiLCBwYXJhbXMpO1xuICAgICAgICAgICAgbG9ncy5mb3JFYWNoKChsb2cpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLnJlbW92ZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2cucmVtb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIEZvcm1hdHRlci5hcnJheU9mKHRoaXMuZm9ybWF0dGVyLmZpbHRlckxvZy5iaW5kKHRoaXMuZm9ybWF0dGVyKSkobG9ncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRFdGhlclByaWNlKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wZXJmb3JtKFwiZ2V0RXRoZXJQcmljZVwiLCB7fSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0QmxvY2tUYWcoYmxvY2tUYWcpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGJsb2NrVGFnID0geWllbGQgYmxvY2tUYWc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIChibG9ja1RhZykgPT09IFwibnVtYmVyXCIgJiYgYmxvY2tUYWcgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrVGFnICUgMSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBCbG9ja1RhZ1wiLCBcImJsb2NrVGFnXCIsIGJsb2NrVGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrTnVtYmVyID0geWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDAgKyAyICogdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyICs9IGJsb2NrVGFnO1xuICAgICAgICAgICAgICAgIGlmIChibG9ja051bWJlciA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2tUYWcoYmxvY2tOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrVGFnKGJsb2NrVGFnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFJlc29sdmVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50TmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TmFtZSA9PT0gXCJcIiB8fCBjdXJyZW50TmFtZSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE9wdGltaXphdGlvbiBzaW5jZSB0aGUgZXRoIG5vZGUgY2Fubm90IGNoYW5nZSBhbmQgZG9lc1xuICAgICAgICAgICAgICAgIC8vIG5vdCBoYXZlIGEgd2lsZGNhcmQgcmVzb2x2ZXJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPT0gXCJldGhcIiAmJiBjdXJyZW50TmFtZSA9PT0gXCJldGhcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGN1cnJlbnQgbm9kZSBmb3IgYSByZXNvbHZlclxuICAgICAgICAgICAgICAgIGNvbnN0IGFkZHIgPSB5aWVsZCB0aGlzLl9nZXRSZXNvbHZlcihjdXJyZW50TmFtZSwgXCJnZXRSZXNvbHZlclwiKTtcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBhIHJlc29sdmVyIVxuICAgICAgICAgICAgICAgIGlmIChhZGRyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgUmVzb2x2ZXIodGhpcywgYWRkciwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIExlZ2FjeSByZXNvbHZlciBmb3VuZCwgdXNpbmcgRUlQLTI1NDQgc28gaXQgaXNuJ3Qgc2FmZSB0byB1c2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnROYW1lICE9PSBuYW1lICYmICEoeWllbGQgcmVzb2x2ZXIuc3VwcG9ydHNXaWxkY2FyZCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBhcmVudCBub2RlXG4gICAgICAgICAgICAgICAgY3VycmVudE5hbWUgPSBjdXJyZW50TmFtZS5zcGxpdChcIi5cIikuc2xpY2UoMSkuam9pbihcIi5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0UmVzb2x2ZXIobmFtZSwgb3BlcmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb24gPSBcIkVOU1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV0d29yayA9IHlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgLy8gTm8gRU5TLi4uXG4gICAgICAgICAgICBpZiAoIW5ldHdvcmsuZW5zQWRkcmVzcykge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibmV0d29yayBkb2VzIG5vdCBzdXBwb3J0IEVOU1wiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwgeyBvcGVyYXRpb24sIG5ldHdvcms6IG5ldHdvcmsubmFtZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8ga2VjY2FrMjU2KFwicmVzb2x2ZXIoYnl0ZXMzMilcIilcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyRGF0YSA9IHlpZWxkIHRoaXMuY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgIHRvOiBuZXR3b3JrLmVuc0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IChcIjB4MDE3OGI4YmZcIiArIG5hbWVoYXNoKG5hbWUpLnN1YnN0cmluZygyKSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MoYWRkckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gRU5TIHJlZ2lzdHJ5IGNhbm5vdCB0aHJvdyBlcnJvcnMgb24gcmVzb2x2ZXIoYnl0ZXMzMilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVzb2x2ZU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbmFtZSA9IHlpZWxkIG5hbWU7XG4gICAgICAgICAgICAvLyBJZiBpdCBpcyBhbHJlYWR5IGFuIGFkZHJlc3MsIG5vdGhpbmcgdG8gcmVzb2x2ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZm9ybWF0dGVyLmFkZHJlc3MobmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXMgaXMgYSBoZXhzdHJpbmcsIHRoZSBhZGRyZXNzIGlzIGJhZCAoU2VlICM2OTQpXG4gICAgICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG5hbWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRU5TIG5hbWVcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR2V0IHRoZSBhZGRyIGZyb20gdGhlIHJlc29sdmVyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IHlpZWxkIHRoaXMuZ2V0UmVzb2x2ZXIobmFtZSk7XG4gICAgICAgICAgICBpZiAoIXJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQgcmVzb2x2ZXIuZ2V0QWRkcmVzcygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbG9va3VwQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBhZGRyZXNzID0geWllbGQgYWRkcmVzcztcbiAgICAgICAgICAgIGFkZHJlc3MgPSB0aGlzLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGFkZHJlc3Muc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCkgKyBcIi5hZGRyLnJldmVyc2VcIjtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyQWRkciA9IHlpZWxkIHRoaXMuX2dldFJlc29sdmVyKG5vZGUsIFwibG9va3VwQWRkcmVzc1wiKTtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlckFkZHIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8ga2VjY2FrKFwibmFtZShieXRlczMyKVwiKVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IF9wYXJzZVN0cmluZyh5aWVsZCB0aGlzLmNhbGwoe1xuICAgICAgICAgICAgICAgIHRvOiByZXNvbHZlckFkZHIsXG4gICAgICAgICAgICAgICAgZGF0YTogKFwiMHg2OTFmMzQzMVwiICsgbmFtZWhhc2gobm9kZSkuc3Vic3RyaW5nKDIpKVxuICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgY29uc3QgYWRkciA9IHlpZWxkIHRoaXMucmVzb2x2ZU5hbWUobmFtZSk7XG4gICAgICAgICAgICBpZiAoYWRkciAhPSBhZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEF2YXRhcihuYW1lT3JBZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKG5hbWVPckFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkcmVzczsgcmV2ZXJzZSBsb29rdXBcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhuYW1lT3JBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gYWRkcmVzcy5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKSArIFwiLmFkZHIucmV2ZXJzZVwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVyQWRkcmVzcyA9IHlpZWxkIHRoaXMuX2dldFJlc29sdmVyKG5vZGUsIFwiZ2V0QXZhdGFyXCIpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZXJBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcnkgcmVzb2x2aW5nIHRoZSBhdmF0YXIgYWdhaW5zdCB0aGUgYWRkci5yZXZlcnNlIHJlc29sdmVyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZXIgPSBuZXcgUmVzb2x2ZXIodGhpcywgcmVzb2x2ZXJBZGRyZXNzLCBub2RlKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdmF0YXIgPSB5aWVsZCByZXNvbHZlci5nZXRBdmF0YXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF2YXRhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF2YXRhci51cmw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlICE9PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUcnkgZ2V0dGluZyB0aGUgbmFtZSBhbmQgcGVyZm9ybWluZyBmb3J3YXJkIGxvb2t1cDsgYWxsb3dpbmcgd2lsZGNhcmRzXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8ga2VjY2FrKFwibmFtZShieXRlczMyKVwiKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gX3BhcnNlU3RyaW5nKHlpZWxkIHRoaXMuY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogcmVzb2x2ZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogKFwiMHg2OTFmMzQzMVwiICsgbmFtZWhhc2gobm9kZSkuc3Vic3RyaW5nKDIpKVxuICAgICAgICAgICAgICAgICAgICB9KSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVyID0geWllbGQgdGhpcy5nZXRSZXNvbHZlcihuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlICE9PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFTlMgbmFtZTsgZm9yd2FyZCBsb29rdXAgd2l0aCB3aWxkY2FyZFxuICAgICAgICAgICAgICAgIHJlc29sdmVyID0geWllbGQgdGhpcy5nZXRSZXNvbHZlcihuYW1lT3JBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF2YXRhciA9IHlpZWxkIHJlc29sdmVyLmdldEF2YXRhcigpO1xuICAgICAgICAgICAgaWYgKGF2YXRhciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXZhdGFyLnVybDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBlcmZvcm0obWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKG1ldGhvZCArIFwiIG5vdCBpbXBsZW1lbnRlZFwiLCBMb2dnZXIuZXJyb3JzLk5PVF9JTVBMRU1FTlRFRCwgeyBvcGVyYXRpb246IG1ldGhvZCB9KTtcbiAgICB9XG4gICAgX3N0YXJ0RXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gKHRoaXMuX2V2ZW50cy5maWx0ZXIoKGUpID0+IGUucG9sbGFibGUoKSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIF9zdG9wRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gKHRoaXMuX2V2ZW50cy5maWx0ZXIoKGUpID0+IGUucG9sbGFibGUoKSkubGVuZ3RoID4gMCk7XG4gICAgfVxuICAgIF9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9uY2UpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoZ2V0RXZlbnRUYWcoZXZlbnROYW1lKSwgbGlzdGVuZXIsIG9uY2UpO1xuICAgICAgICB0aGlzLl9ldmVudHMucHVzaChldmVudCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0RXZlbnQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuICAgIG9uY2UoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9XG4gICAgZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBsZXQgc3RvcHBlZCA9IFtdO1xuICAgICAgICBsZXQgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnRhZyAhPT0gZXZlbnRUYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50Lmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGV2ZW50Lm9uY2UpIHtcbiAgICAgICAgICAgICAgICBzdG9wcGVkLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RvcHBlZC5mb3JFYWNoKChldmVudCkgPT4geyB0aGlzLl9zdG9wRXZlbnQoZXZlbnQpOyB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGlzdGVuZXJDb3VudChldmVudE5hbWUpIHtcbiAgICAgICAgaWYgKCFldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxldCBldmVudFRhZyA9IGdldEV2ZW50VGFnKGV2ZW50TmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHMuZmlsdGVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChldmVudC50YWcgPT09IGV2ZW50VGFnKTtcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgIH1cbiAgICBsaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5tYXAoKGV2ZW50KSA9PiBldmVudC5saXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGV2ZW50VGFnID0gZ2V0RXZlbnRUYWcoZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50c1xuICAgICAgICAgICAgLmZpbHRlcigoZXZlbnQpID0+IChldmVudC50YWcgPT09IGV2ZW50VGFnKSlcbiAgICAgICAgICAgIC5tYXAoKGV2ZW50KSA9PiBldmVudC5saXN0ZW5lcik7XG4gICAgfVxuICAgIG9mZihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdG9wcGVkID0gW107XG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnRhZyAhPT0gZXZlbnRUYWcgfHwgZXZlbnQubGlzdGVuZXIgIT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgc3RvcHBlZC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0b3BwZWQuZm9yRWFjaCgoZXZlbnQpID0+IHsgdGhpcy5fc3RvcEV2ZW50KGV2ZW50KTsgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCBzdG9wcGVkID0gW107XG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRoaXMuX2V2ZW50cztcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFnICE9PSBldmVudFRhZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RvcHBlZC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBzdG9wcGVkLmZvckVhY2goKGV2ZW50KSA9PiB7IHRoaXMuX3N0b3BFdmVudChldmVudCk7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJGb3JrRXZlbnQiLCJQcm92aWRlciIsImVuY29kZSIsImJhc2U2NEVuY29kZSIsIkJhc2U1OCIsIkJpZ051bWJlciIsImFycmF5aWZ5IiwiY29uY2F0IiwiaGV4Q29uY2F0IiwiaGV4RGF0YUxlbmd0aCIsImhleERhdGFTbGljZSIsImhleGxpZnkiLCJoZXhWYWx1ZSIsImhleFplcm9QYWQiLCJpc0hleFN0cmluZyIsIkhhc2haZXJvIiwiZG5zRW5jb2RlIiwibmFtZWhhc2giLCJnZXROZXR3b3JrIiwiZGVmaW5lUmVhZE9ubHkiLCJnZXRTdGF0aWMiLCJyZXNvbHZlUHJvcGVydGllcyIsInNoYTI1NiIsInRvVXRmOEJ5dGVzIiwidG9VdGY4U3RyaW5nIiwiZmV0Y2hKc29uIiwicG9sbCIsImJlY2gzMiIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJGb3JtYXR0ZXIiLCJNQVhfQ0NJUF9SRURJUkVDVFMiLCJjaGVja1RvcGljIiwidG9waWMiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJ0b0xvd2VyQ2FzZSIsInNlcmlhbGl6ZVRvcGljcyIsInRvcGljcyIsInNsaWNlIiwibGVuZ3RoIiwicG9wIiwibWFwIiwiQXJyYXkiLCJpc0FycmF5IiwidW5pcXVlIiwiZm9yRWFjaCIsInNvcnRlZCIsIk9iamVjdCIsImtleXMiLCJzb3J0Iiwiam9pbiIsImRlc2VyaWFsaXplVG9waWNzIiwiZGF0YSIsInNwbGl0IiwiY29tcHMiLCJnZXRFdmVudFRhZyIsImV2ZW50TmFtZSIsImluZGV4T2YiLCJpc0ZvcmtFdmVudCIsIndhcm4iLCJFcnJvciIsImFkZHJlc3MiLCJnZXRUaW1lIiwiRGF0ZSIsInN0YWxsIiwiZHVyYXRpb24iLCJzZXRUaW1lb3V0IiwiUG9sbGFibGVFdmVudHMiLCJFdmVudCIsImV2ZW50IiwidHlwZSIsImhhc2giLCJmaWx0ZXIiLCJ0YWciLCJwb2xsYWJsZSIsImNvbnN0cnVjdG9yIiwibGlzdGVuZXIiLCJvbmNlIiwiX2xhc3RCbG9ja051bWJlciIsIl9pbmZsaWdodCIsImNvaW5JbmZvcyIsInN5bWJvbCIsInAycGtoIiwicDJzaCIsInByZWZpeCIsImlsayIsImJ5dGVzMzJpZnkiLCJmcm9tIiwidG9IZXhTdHJpbmciLCJiYXNlNThFbmNvZGUiLCJtYXRjaGVySXBmcyIsIlJlZ0V4cCIsIm1hdGNoZXJzIiwiX3BhcnNlU3RyaW5nIiwic3RhcnQiLCJfcGFyc2VCeXRlcyIsImVycm9yIiwib2Zmc2V0IiwidG9OdW1iZXIiLCJnZXRJcGZzTGluayIsImxpbmsiLCJtYXRjaCIsInN1YnN0cmluZyIsIm51bVBhZCIsInBhZGRlZCIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJieXRlc1BhZCIsIk1hdGgiLCJjZWlsIiwiZW5jb2RlQnl0ZXMiLCJkYXRhcyIsImJ5dGVDb3VudCIsImkiLCJwdXNoIiwiUmVzb2x2ZXIiLCJzdXBwb3J0c1dpbGRjYXJkIiwiX3N1cHBvcnRzRWlwMjU0NCIsInByb3ZpZGVyIiwiY2FsbCIsInRvIiwiZXEiLCJjYXRjaCIsImNvZGUiLCJlcnJvcnMiLCJDQUxMX0VYQ0VQVElPTiIsIl9mZXRjaCIsInNlbGVjdG9yIiwicGFyYW1ldGVycyIsInR4IiwiY2NpcFJlYWRFbmFibGVkIiwibmFtZSIsInBhcnNlQnl0ZXMiLCJ0aHJvd0Vycm9yIiwidHJhbnNhY3Rpb24iLCJfZmV0Y2hCeXRlcyIsIl9nZXRBZGRyZXNzIiwiY29pblR5cGUiLCJoZXhCeXRlcyIsImNvaW5JbmZvIiwiU3RyaW5nIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwib3BlcmF0aW9uIiwiZm9ybWF0dGVyIiwiYnl0ZXMiLCJwYXJzZUludCIsIndvcmRzIiwidG9Xb3JkcyIsInVuc2hpZnQiLCJnZXRBZGRyZXNzIiwiY2FsbEFkZHJlc3MiLCJnZXRBdmF0YXIiLCJsaW5rYWdlIiwiY29udGVudCIsImF2YXRhciIsImdldFRleHQiLCJzY2hlbWUiLCJ1cmwiLCJvd25lciIsIl9yZXNvbHZlZEFkZHJlc3MiLCJhZGRyIiwidG9rZW5JZCIsInRva2VuT3duZXIiLCJiYWxhbmNlIiwiaXNaZXJvIiwidG9TdHJpbmciLCJtZXRhZGF0YVVybCIsInJlcGxhY2UiLCJtZXRhZGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbWFnZVVybCIsImltYWdlIiwiaXBmcyIsImdldENvbnRlbnRIYXNoIiwiaXBucyIsInN3YXJtIiwic2t5bmV0IiwidXJsU2FmZSIsImEiLCJrZXkiLCJrZXlCeXRlcyIsInJlc29sdmVkQWRkcmVzcyIsImRlZmF1bHRGb3JtYXR0ZXIiLCJuZXh0UG9sbElkIiwiQmFzZVByb3ZpZGVyIiwiX3JlYWR5IiwiX25ldHdvcmsiLCJuZXR3b3JrIiwiX25ldHdvcmtQcm9taXNlIiwiZGV0ZWN0TmV0d29yayIsIlVOS05PV05fRVJST1IiLCJhbnlOZXR3b3JrIiwiZW1pdCIsInJlYWR5IiwiTkVUV09SS19FUlJPUiIsInVuZGVmaW5lZCIsImdldEZvcm1hdHRlciIsImNjaXBSZWFkRmV0Y2giLCJjYWxsZGF0YSIsInVybHMiLCJkaXNhYmxlQ2NpcFJlYWQiLCJzZW5kZXIiLCJlcnJvck1lc3NhZ2VzIiwiaHJlZiIsImpzb24iLCJlcnJvclBhc3NUaHJvdWdoIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNDb2RlIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIlNFUlZFUl9FUlJPUiIsIm0iLCJfZ2V0SW50ZXJuYWxCbG9ja051bWJlciIsIm1heEFnZSIsIl9pbnRlcm5hbEJsb2NrTnVtYmVyIiwiaW50ZXJuYWxCbG9ja051bWJlciIsInJlc3BUaW1lIiwiYmxvY2tOdW1iZXIiLCJyZXFUaW1lIiwiY2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyIiwicGVyZm9ybSIsIm5ldHdvcmtFcnJvciIsIl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyIiwiX3NldEZhc3RCbG9ja051bWJlciIsInBvbGxJZCIsInJ1bm5lcnMiLCJwb2xsaW5nSW50ZXJ2YWwiLCJfZW1pdHRlZCIsImJsb2NrIiwiYWJzIiwibWFrZUVycm9yIiwicHJldmlvdXNCbG9ja051bWJlciIsImV2ZW50QmxvY2tOdW1iZXIiLCJfZXZlbnRzIiwicnVubmVyIiwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0IiwicmVjZWlwdCIsImZyb21CbG9jayIsInRvQmxvY2siLCJtaW5Gcm9tQmxvY2siLCJfbWF4RmlsdGVyQmxvY2tSYW5nZSIsImdldExvZ3MiLCJsb2dzIiwibG9nIiwiYmxvY2tIYXNoIiwidHJhbnNhY3Rpb25IYXNoIiwiYWxsIiwicmVzZXRFdmVudHNCbG9jayIsInBvbGxpbmciLCJjdXJyZW50TmV0d29yayIsImNoYWluSWQiLCJfZmFzdEJsb2NrTnVtYmVyIiwiX2Zhc3RCbG9ja051bWJlclByb21pc2UiLCJfZmFzdFF1ZXJ5RGF0ZSIsImRldGVjdGVkTmV0d29yayIsIl9wb2xsZXIiLCJzZXRJbnRlcnZhbCIsIl9ib290c3RyYXBQb2xsIiwiY2xlYXJJbnRlcnZhbCIsIl9wb2xsaW5nSW50ZXJ2YWwiLCJfZ2V0RmFzdEJsb2NrTnVtYmVyIiwibm93IiwiZ2V0QmxvY2tOdW1iZXIiLCJ3YWl0Rm9yVHJhbnNhY3Rpb24iLCJjb25maXJtYXRpb25zIiwidGltZW91dCIsIl93YWl0Rm9yVHJhbnNhY3Rpb24iLCJyZXBsYWNlYWJsZSIsImNhbmNlbEZ1bmNzIiwiYWxyZWFkeURvbmUiLCJmdW5jIiwibWluZWRIYW5kbGVyIiwib24iLCJyZW1vdmVMaXN0ZW5lciIsImxhc3RCbG9ja051bWJlciIsInN0YXJ0QmxvY2siLCJzY2FubmVkQmxvY2siLCJyZXBsYWNlSGFuZGxlciIsImdldFRyYW5zYWN0aW9uQ291bnQiLCJub25jZSIsIm1pbmVkIiwiZ2V0VHJhbnNhY3Rpb24iLCJnZXRCbG9ja1dpdGhUcmFuc2FjdGlvbnMiLCJ0aSIsInRyYW5zYWN0aW9ucyIsInJlYXNvbiIsIlRSQU5TQUNUSU9OX1JFUExBQ0VEIiwiY2FuY2VsbGVkIiwicmVwbGFjZW1lbnQiLCJfd3JhcFRyYW5zYWN0aW9uIiwidGltZXIiLCJUSU1FT1VUIiwidW5yZWYiLCJjbGVhclRpbWVvdXQiLCJnZXRHYXNQcmljZSIsIm1ldGhvZCIsImdldEJhbGFuY2UiLCJhZGRyZXNzT3JOYW1lIiwiYmxvY2tUYWciLCJwYXJhbXMiLCJfZ2V0QmxvY2tUYWciLCJnZXRDb2RlIiwiZ2V0U3RvcmFnZUF0IiwicG9zaXRpb24iLCJwIiwiZXhwZWN0ZWRIYXNoIiwicmV0dXJuZWRIYXNoIiwid2FpdCIsImNvbmZpcm1zIiwic2VuZFRyYW5zYWN0aW9uIiwic2lnbmVkVHJhbnNhY3Rpb24iLCJoZXhUeCIsInQiLCJfZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0IiwidmFsdWVzIiwidiIsImFjY2Vzc0xpc3QiLCJ0cmFuc2FjdGlvblJlcXVlc3QiLCJfZ2V0RmlsdGVyIiwiX2NhbGwiLCJhdHRlbXB0IiwicmVkaXJlY3RzIiwidHhTZW5kZXIiLCJzaWduYXR1cmUiLCJ1cmxzT2Zmc2V0IiwidXJsc0xlbmd0aCIsInVybHNEYXRhIiwidSIsImNhbGxiYWNrU2VsZWN0b3IiLCJleHRyYURhdGEiLCJjY2lwUmVzdWx0IiwicmVzb2x2ZWQiLCJlc3RpbWF0ZUdhcyIsInJlc29sdmVOYW1lIiwiX2dldEJsb2NrIiwiYmxvY2tIYXNoT3JCbG9ja1RhZyIsImluY2x1ZGVUcmFuc2FjdGlvbnMiLCJibG9ja1dpdGhUeHMiLCJibG9ja1dpdGhUcmFuc2FjdGlvbnMiLCJvbmNlUG9sbCIsImdldEJsb2NrIiwidHJhbnNhY3Rpb25SZXNwb25zZSIsInJlbW92ZWQiLCJhcnJheU9mIiwiZmlsdGVyTG9nIiwiYmluZCIsImdldEV0aGVyUHJpY2UiLCJnZXRSZXNvbHZlciIsImN1cnJlbnROYW1lIiwiX2dldFJlc29sdmVyIiwicmVzb2x2ZXIiLCJlbnNBZGRyZXNzIiwiYWRkckRhdGEiLCJsb29rdXBBZGRyZXNzIiwibm9kZSIsInJlc29sdmVyQWRkciIsIm5hbWVPckFkZHJlc3MiLCJyZXNvbHZlckFkZHJlc3MiLCJOT1RfSU1QTEVNRU5URUQiLCJfc3RhcnRFdmVudCIsIl9zdG9wRXZlbnQiLCJfYWRkRXZlbnRMaXN0ZW5lciIsImFyZ3MiLCJzdG9wcGVkIiwiZXZlbnRUYWciLCJsaXN0ZW5lckNvdW50IiwibGlzdGVuZXJzIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZm91bmQiLCJrbm93bk5ldHdvcmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloudflareProvider: function() { return /* binding */ CloudflareProvider; }\n/* harmony export */ });\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nclass CloudflareProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch(network.name){\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: {\n                get: ()=>super.perform\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            // The Cloudflare provider does not support eth_blockNumber,\n            // so we get the latest block and pull it from that\n            if (method === \"getBlockNumber\") {\n                const block = yield _super.perform.call(this, \"getBlock\", {\n                    blockTag: \"latest\"\n                });\n                return block.number;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n} //# sourceMappingURL=cloudflare-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9jbG91ZGZsYXJlLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUM2RDtBQUNkO0FBQ1Y7QUFDckMsTUFBTVUsU0FBUyxJQUFJRix5REFBTUEsQ0FBQ0MsNkNBQU9BO0FBQzFCLE1BQU1FLDJCQUEyQkosc0VBQWtCQTtJQUN0RCxPQUFPSyxVQUFVQyxNQUFNLEVBQUU7UUFDckIsSUFBSUEsVUFBVSxNQUFNO1lBQ2hCSCxPQUFPSSxrQkFBa0IsQ0FBQyx1Q0FBdUMsVUFBVUQ7UUFDL0U7UUFDQSxPQUFPO0lBQ1g7SUFDQSxPQUFPRSxPQUFPQyxPQUFPLEVBQUVILE1BQU0sRUFBRTtRQUMzQixJQUFJSSxPQUFPO1FBQ1gsT0FBUUQsUUFBUUUsSUFBSTtZQUNoQixLQUFLO2dCQUNERCxPQUFPO2dCQUNQO1lBQ0o7Z0JBQ0lQLE9BQU9JLGtCQUFrQixDQUFDLHVCQUF1QixXQUFXSyxTQUFTLENBQUMsRUFBRTtRQUNoRjtRQUNBLE9BQU9GO0lBQ1g7SUFDQUcsUUFBUUMsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDcEIsTUFBTUMsU0FBU0MsT0FBT0MsTUFBTSxDQUFDLE1BQU07WUFDL0JMLFNBQVM7Z0JBQUVNLEtBQUssSUFBTSxLQUFLLENBQUNOO1lBQVE7UUFDeEM7UUFDQSxPQUFPaEMsVUFBVSxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUNuQyw0REFBNEQ7WUFDNUQsbURBQW1EO1lBQ25ELElBQUlpQyxXQUFXLGtCQUFrQjtnQkFDN0IsTUFBTU0sUUFBUSxNQUFNSixPQUFPSCxPQUFPLENBQUNRLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWTtvQkFBRUMsVUFBVTtnQkFBUztnQkFDL0UsT0FBT0YsTUFBTUcsTUFBTTtZQUN2QjtZQUNBLE9BQU9QLE9BQU9ILE9BQU8sQ0FBQ1EsSUFBSSxDQUFDLElBQUksRUFBRVAsUUFBUUM7UUFDN0M7SUFDSjtBQUNKLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9jbG91ZGZsYXJlLXByb3ZpZGVyLmpzPzc0NGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuZXhwb3J0IGNsYXNzIENsb3VkZmxhcmVQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlciB7XG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiYXBpS2V5IG5vdCBzdXBwb3J0ZWQgZm9yIGNsb3VkZmxhcmVcIiwgXCJhcGlLZXlcIiwgYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgbGV0IGhvc3QgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG5ldHdvcmsubmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcImhvbWVzdGVhZFwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vY2xvdWRmbGFyZS1ldGguY29tL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG9zdDtcbiAgICB9XG4gICAgcGVyZm9ybShtZXRob2QsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBfc3VwZXIgPSBPYmplY3QuY3JlYXRlKG51bGwsIHtcbiAgICAgICAgICAgIHBlcmZvcm06IHsgZ2V0OiAoKSA9PiBzdXBlci5wZXJmb3JtIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyBUaGUgQ2xvdWRmbGFyZSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IGV0aF9ibG9ja051bWJlcixcbiAgICAgICAgICAgIC8vIHNvIHdlIGdldCB0aGUgbGF0ZXN0IGJsb2NrIGFuZCBwdWxsIGl0IGZyb20gdGhhdFxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJnZXRCbG9ja051bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB5aWVsZCBfc3VwZXIucGVyZm9ybS5jYWxsKHRoaXMsIFwiZ2V0QmxvY2tcIiwgeyBibG9ja1RhZzogXCJsYXRlc3RcIiB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2subnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlci5wZXJmb3JtLmNhbGwodGhpcywgbWV0aG9kLCBwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbG91ZGZsYXJlLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJhZG9wdCIsInZhbHVlIiwicmVzb2x2ZSIsIlByb21pc2UiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJVcmxKc29uUnBjUHJvdmlkZXIiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwiZ2V0QXBpS2V5IiwiYXBpS2V5IiwidGhyb3dBcmd1bWVudEVycm9yIiwiZ2V0VXJsIiwibmV0d29yayIsImhvc3QiLCJuYW1lIiwiYXJndW1lbnRzIiwicGVyZm9ybSIsIm1ldGhvZCIsInBhcmFtcyIsIl9zdXBlciIsIk9iamVjdCIsImNyZWF0ZSIsImdldCIsImJsb2NrIiwiY2FsbCIsImJsb2NrVGFnIiwibnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EtherscanProvider: function() { return /* binding */ EtherscanProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _base_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for(let key in transaction){\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if (({\n            type: true,\n            gasLimit: true,\n            gasPrice: true,\n            maxFeePerGs: true,\n            maxPriorityFeePerGas: true,\n            nonce: true,\n            value: true\n        })[key]) {\n            value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexValue)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__.accessListify)(value).map((set)=>{\n                return '{address:\"'.concat(set.address, '\",storageKeys:[\"').concat(set.storageKeys.join('\",\"'), '\"]}');\n            }).join(\",\") + \"]\";\n        } else {\n            value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION, {\n                error,\n                data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof error.error.message === \"string\") {\n            message = error.error.message;\n        } else if (typeof error.body === \"string\") {\n            message = error.body;\n        } else if (typeof error.responseText === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error,\n            method,\n            transaction\n        });\n    }\n    throw error;\n}\nclass EtherscanProvider extends _base_provider__WEBPACK_IMPORTED_MODULE_4__.BaseProvider {\n    getBaseUrl() {\n        switch(this.network ? this.network.name : \"invalid\"){\n            case \"homestead\":\n                return \"https://api.etherscan.io\";\n            case \"goerli\":\n                return \"https://api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https://api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https://api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https://api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https://api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https://api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https://api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https://api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key)=>{\n            const value = params[key];\n            if (value != null) {\n                accum += \"&\".concat(key, \"=\").concat(value);\n            }\n            return accum;\n        }, \"\");\n        const apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n        return \"\".concat(this.baseUrl, \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n    getPostUrl() {\n        return \"\".concat(this.baseUrl, \"/api\");\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const url = post ? this.getPostUrl() : this.getUrl(module, params);\n            const payload = post ? this.getPostData(module, params) : null;\n            const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url)=>{\n                    if (this.isCommunityResource()) {\n                        (0,_formatter__WEBPACK_IMPORTED_MODULE_5__.showThrottleMessage)();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = {\n                    \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                };\n                payloadStr = Object.keys(payload).map((key)=>{\n                    return \"\".concat(key, \"=\").concat(payload[key]);\n                }).join(\"&\");\n            }\n            const result = yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_6__.fetchJson)(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.deepCopy)(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: {\n                get: ()=>super.perform\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            switch(method){\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_blockNumber\"\n                    });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_gasPrice\"\n                    });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error)=>{\n                        return checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: params.includeTransactions ? \"true\" : \"false\"\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\":\n                    {\n                        if (params.blockTag !== \"latest\") {\n                            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                        }\n                        const postData = getTransactionPostData(params.transaction);\n                        postData.module = \"proxy\";\n                        postData.action = \"eth_call\";\n                        try {\n                            return yield this.fetch(\"proxy\", postData, true);\n                        } catch (error) {\n                            return checkError(\"call\", error, params.transaction);\n                        }\n                    }\n                case \"estimateGas\":\n                    {\n                        const postData = getTransactionPostData(params.transaction);\n                        postData.module = \"proxy\";\n                        postData.action = \"eth_estimateGas\";\n                        try {\n                            return yield this.fetch(\"proxy\", postData, true);\n                        } catch (error) {\n                            return checkError(\"estimateGas\", error, params.transaction);\n                        }\n                    }\n                case \"getLogs\":\n                    {\n                        const args = {\n                            action: \"getLogs\"\n                        };\n                        if (params.filter.fromBlock) {\n                            args.fromBlock = checkLogTag(params.filter.fromBlock);\n                        }\n                        if (params.filter.toBlock) {\n                            args.toBlock = checkLogTag(params.filter.toBlock);\n                        }\n                        if (params.filter.address) {\n                            args.address = params.filter.address;\n                        }\n                        // @TODO: We can handle slightly more complicated logs using the logs API\n                        if (params.filter.topics && params.filter.topics.length > 0) {\n                            if (params.filter.topics.length > 1) {\n                                logger.throwError(\"unsupported topic count\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                                    topics: params.filter.topics\n                                });\n                            }\n                            if (params.filter.topics.length === 1) {\n                                const topic0 = params.filter.topics[0];\n                                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                                    logger.throwError(\"unsupported topic format\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                                        topic0: topic0\n                                    });\n                                }\n                                args.topic0 = topic0;\n                            }\n                        }\n                        const logs = yield this.fetch(\"logs\", args);\n                        // Cache txHash => blockHash\n                        let blocks = {};\n                        // Add any missing blockHash to the logs\n                        for(let i = 0; i < logs.length; i++){\n                            const log = logs[i];\n                            if (log.blockHash != null) {\n                                continue;\n                            }\n                            if (blocks[log.blockNumber] == null) {\n                                const block = yield this.getBlock(log.blockNumber);\n                                if (block) {\n                                    blocks[log.blockNumber] = block.hash;\n                                }\n                            }\n                            log.blockHash = blocks[log.blockNumber];\n                        }\n                        return logs;\n                    }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", {\n                        action: \"ethprice\"\n                    })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const params = {\n                action: \"txlist\",\n                address: yield this.resolveName(addressOrName),\n                startblock: startBlock == null ? 0 : startBlock,\n                endblock: endBlock == null ? 99999999 : endBlock,\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx)=>{\n                [\n                    \"contractAddress\",\n                    \"to\"\n                ].forEach(function(key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return this.apiKey == null;\n    }\n    constructor(network, apiKey){\n        super(network);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"baseUrl\", this.getBaseUrl());\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_7__.defineReadOnly)(this, \"apiKey\", apiKey || null);\n    }\n} //# sourceMappingURL=etherscan-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackProvider: function() { return /* binding */ FallbackProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/random */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/shuffle.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _base_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction now() {\n    return new Date().getTime();\n}\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    let result = null;\n    for(let i = 0; i < networks.length; i++){\n        const network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        } else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof value === \"string\") {\n        return value;\n    } else if (_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i)=>serialize(i)));\n    } else if (typeof value === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key)=>{\n            let v = value[key];\n            if (typeof v === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof value);\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n    let cancel = null;\n    let timer = null;\n    let promise = new Promise((resolve)=>{\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    });\n    const wait = (func)=>{\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return {\n        cancel,\n        getPromise,\n        wait\n    };\n}\nconst ForwardErrors = [\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED,\n    _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\"\n];\n;\nfunction exposeDebugConfig(config, now) {\n    const result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", {\n        get: ()=>config.provider\n    });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = now - config.start;\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function(configs) {\n        // Count the votes for each result\n        const tally = {};\n        configs.forEach((c)=>{\n            const value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = {\n                    count: 0,\n                    result: c.result\n                };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for(let i = 0; i < keys.length; i++){\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    let normalize = serialize;\n    switch(method){\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs) {\n                const values = configs.map((c)=>c.result);\n                // Get the median block number\n                let blockNumber = median(configs.map((c)=>c.result), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs) {\n                const values = configs.map((c)=>c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs) {\n                return median(configs.map((c)=>c.result));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(block);\n                    block.transactions = block.transactions.map((tx)=>{\n                        tx = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return __awaiter(this, void 0, void 0, function*() {\n        const provider = config.provider;\n        if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n            return provider;\n        }\n        return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_4__.poll)(()=>{\n            return new Promise((resolve, reject)=>{\n                setTimeout(function() {\n                    // We are synced\n                    if (provider.blockNumber >= blockNumber) {\n                        return resolve(provider);\n                    }\n                    // We're done; just quit\n                    if (config.cancelled) {\n                        return resolve(null);\n                    }\n                    // Try again, next block\n                    return resolve(undefined);\n                }, 0);\n            });\n        }, {\n            oncePoll: provider\n        });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return __awaiter(this, void 0, void 0, function*() {\n        let provider = config.provider;\n        switch(method){\n            case \"getBlockNumber\":\n            case \"getGasPrice\":\n                return provider[method]();\n            case \"getEtherPrice\":\n                if (provider.getEtherPrice) {\n                    return provider.getEtherPrice();\n                }\n                break;\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n                if (params.blockTag && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.address, params.blockTag || \"latest\");\n            case \"getStorageAt\":\n                if (params.blockTag && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n            case \"getBlock\":\n                if (params.blockTag && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash);\n            case \"call\":\n            case \"estimateGas\":\n                if (params.blockTag && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                if (method === \"call\" && params.blockTag) {\n                    return provider[method](params.transaction, params.blockTag);\n                }\n                return provider[method](params.transaction);\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n                return provider[method](params.transactionHash);\n            case \"getLogs\":\n                {\n                    let filter = params.filter;\n                    if (filter.fromBlock && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(filter.fromBlock) || filter.toBlock && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(filter.toBlock)) {\n                        provider = yield waitForSync(config, currentBlockNumber);\n                    }\n                    return provider.getLogs(filter);\n                }\n        }\n        return logger.throwError(\"unknown method error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n        });\n    });\n}\nclass FallbackProvider extends _base_provider__WEBPACK_IMPORTED_MODULE_6__.BaseProvider {\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            const networks = yield Promise.all(this.providerConfigs.map((c)=>c.provider.getNetwork()));\n            return checkNetworks(networks);\n        });\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Sending transactions is special; always broadcast it to all backends\n            if (method === \"sendTransaction\") {\n                const results = yield Promise.all(this.providerConfigs.map((c)=>{\n                    return c.provider.sendTransaction(params.signedTransaction).then((result)=>{\n                        return result.hash;\n                    }, (error)=>{\n                        return error;\n                    });\n                }));\n                // Any success is good enough (other errors are likely \"already seen\" errors\n                for(let i = 0; i < results.length; i++){\n                    const result = results[i];\n                    if (typeof result === \"string\") {\n                        return result;\n                    }\n                }\n                // They were all an error; pick the first error\n                throw results[0];\n            }\n            // We need to make sure we are in sync with our backends, so we need\n            // to know this before we can make a lot of calls\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n                yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            // Shuffle the providers and then sort them by their priority; we\n            // shallowCopy them since we will store the result in them too\n            const configs = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_7__.shuffled)(this.providerConfigs.map(_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy));\n            configs.sort((a, b)=>a.priority - b.priority);\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while(true){\n                const t0 = now();\n                // Compute the inflight weight (exclude anything past)\n                let inflightWeight = configs.filter((c)=>c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c)=>accum + c.weight, 0);\n                // Start running enough to meet quorum\n                while(inflightWeight < this.quorum && i < configs.length){\n                    const config = configs[i++];\n                    const rid = nextRid++;\n                    config.start = now();\n                    config.staller = stall(config.stallTimeout);\n                    config.staller.wait(()=>{\n                        config.staller = null;\n                    });\n                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result)=>{\n                        config.done = true;\n                        config.result = result;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: {\n                                    method: method,\n                                    params: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.deepCopy)(params)\n                                },\n                                provider: this\n                            });\n                        }\n                    }, (error)=>{\n                        config.done = true;\n                        config.error = error;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: {\n                                    method: method,\n                                    params: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.deepCopy)(params)\n                                },\n                                provider: this\n                            });\n                        }\n                    });\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, null),\n                            request: {\n                                method: method,\n                                params: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.deepCopy)(params)\n                            },\n                            provider: this\n                        });\n                    }\n                    inflightWeight += config.weight;\n                }\n                // Wait for anything meaningful to finish or stall out\n                const waiting = [];\n                configs.forEach((c)=>{\n                    if (c.done || !c.runner) {\n                        return;\n                    }\n                    waiting.push(c.runner);\n                    if (c.staller) {\n                        waiting.push(c.staller.getPromise());\n                    }\n                });\n                if (waiting.length) {\n                    yield Promise.race(waiting);\n                }\n                // Check the quorum and process the results; the process function\n                // may additionally decide the quorum is not met\n                const results = configs.filter((c)=>c.done && c.error == null);\n                if (results.length >= this.quorum) {\n                    const result = processFunc(results);\n                    if (result !== undefined) {\n                        // Shut down any stallers\n                        configs.forEach((c)=>{\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return result;\n                    }\n                    if (!first) {\n                        yield stall(100).getPromise();\n                    }\n                    first = false;\n                }\n                // No result, check for errors that should be forwarded\n                const errors = configs.reduce((accum, c)=>{\n                    if (!c.done || c.error == null) {\n                        return accum;\n                    }\n                    const code = c.error.code;\n                    if (ForwardErrors.indexOf(code) >= 0) {\n                        if (!accum[code]) {\n                            accum[code] = {\n                                error: c.error,\n                                weight: 0\n                            };\n                        }\n                        accum[code].weight += c.weight;\n                    }\n                    return accum;\n                }, {});\n                Object.keys(errors).forEach((errorCode)=>{\n                    const tally = errors[errorCode];\n                    if (tally.weight < this.quorum) {\n                        return;\n                    }\n                    // Shut down any stallers\n                    configs.forEach((c)=>{\n                        if (c.staller) {\n                            c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                    });\n                    const e = tally.error;\n                    const props = {};\n                    ForwardProperties.forEach((name)=>{\n                        if (e[name] == null) {\n                            return;\n                        }\n                        props[name] = e[name];\n                    });\n                    logger.throwError(e.reason || e.message, errorCode, props);\n                });\n                // All configs have run to completion; we will never get more data\n                if (configs.filter((c)=>!c.done).length === 0) {\n                    break;\n                }\n            }\n            // Shut down any stallers; shouldn't be any\n            configs.forEach((c)=>{\n                if (c.staller) {\n                    c.staller.cancel();\n                }\n                c.cancelled = true;\n            });\n            return logger.throwError(\"failed to meet quorum\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map((c)=>exposeDebugConfig(c)),\n                provider: this\n            });\n        });\n    }\n    constructor(providers, quorum){\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        const providerConfigs = providers.map((configOrProvider, index)=>{\n            if (_ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_8__.Provider.isProvider(configOrProvider)) {\n                const stallTimeout = (0,_formatter__WEBPACK_IMPORTED_MODULE_9__.isCommunityResource)(configOrProvider) ? 2000 : 750;\n                const priority = 1;\n                return Object.freeze({\n                    provider: configOrProvider,\n                    weight: 1,\n                    stallTimeout,\n                    priority\n                });\n            }\n            const config = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.shallowCopy)(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = (0,_formatter__WEBPACK_IMPORTED_MODULE_9__.isCommunityResource)(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\".concat(index, \"].weight\"), weight);\n            }\n            return Object.freeze(config);\n        });\n        const total = providerConfigs.reduce((accum, c)=>accum + c.weight, 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        let networkOrReady = checkNetworks(providerConfigs.map((c)=>c.provider.network));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject)=>{\n                setTimeout(()=>{\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Preserve a copy, so we do not get mutated\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"quorum\", quorum);\n        this._highestBlockNumber = -1;\n    }\n} //# sourceMappingURL=fallback-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/formatter.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Formatter: function() { return /* binding */ Formatter; },\n/* harmony export */   isCommunityResourcable: function() { return /* binding */ isCommunityResourcable; },\n/* harmony export */   isCommunityResource: function() { return /* binding */ isCommunityResource; },\n/* harmony export */   showThrottleMessage: function() { return /* binding */ showThrottleMessage; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nclass Formatter {\n    getDefaultFormats() {\n        const formats = {};\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v)=>{\n            return this.data(v, true);\n        };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data)\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null)\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.shallowCopy)(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined)\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__.accessListify)(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof value === \"boolean\") {\n            return value;\n        }\n        if (typeof value === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof value === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if (result.length % 2 !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getAddress)(value);\n    }\n    callAddress(value) {\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value, 32)) {\n            return null;\n        }\n        const address = (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getAddress)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexDataSlice)(value, 12));\n        return address === _ethersproject_constants__WEBPACK_IMPORTED_MODULE_7__.AddressZero ? null : address;\n    }\n    contractAddress(value) {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_6__.getContractAddress)(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch(blockTag){\n            case \"earliest\":\n                return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof blockTag === \"number\" || (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(blockTag)) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexValue)(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexDataLength)(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n        try {\n            return v.toNumber();\n        } catch (error) {}\n        return null;\n    }\n    uint256(value) {\n        if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.hexZeroPad)(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = difficulty == null ? null : _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(difficulty);\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(chainId)) {\n                chainId = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        } else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_5__.isHexString)(chainId)) {\n                chainId = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(chainId).toNumber();\n            }\n            if (typeof chainId !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof chainId !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_3__.parse)(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && result.status !== value) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                            root: result.root,\n                            status: result.status\n                        });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v)=>this.topics(v));\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for(const key in format){\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return function(value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        };\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return function(value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        };\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return function(array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n            return result;\n        };\n    }\n    constructor(){\n        this.formats = this.getDefaultFormats();\n    }\n}\nfunction isCommunityResourcable(value) {\n    return value && typeof value.isCommunityResource === \"function\";\n}\nfunction isCommunityResource(value) {\n    return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nfunction showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https://docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n} //# sourceMappingURL=formatter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlchemyProvider: function() { return /* reexport safe */ _alchemy_provider__WEBPACK_IMPORTED_MODULE_6__.AlchemyProvider; },\n/* harmony export */   AlchemyWebSocketProvider: function() { return /* reexport safe */ _alchemy_provider__WEBPACK_IMPORTED_MODULE_6__.AlchemyWebSocketProvider; },\n/* harmony export */   AnkrProvider: function() { return /* reexport safe */ _ankr_provider__WEBPACK_IMPORTED_MODULE_7__.AnkrProvider; },\n/* harmony export */   BaseProvider: function() { return /* reexport safe */ _base_provider__WEBPACK_IMPORTED_MODULE_16__.BaseProvider; },\n/* harmony export */   CloudflareProvider: function() { return /* reexport safe */ _cloudflare_provider__WEBPACK_IMPORTED_MODULE_8__.CloudflareProvider; },\n/* harmony export */   EtherscanProvider: function() { return /* reexport safe */ _etherscan_provider__WEBPACK_IMPORTED_MODULE_9__.EtherscanProvider; },\n/* harmony export */   FallbackProvider: function() { return /* reexport safe */ _fallback_provider__WEBPACK_IMPORTED_MODULE_5__.FallbackProvider; },\n/* harmony export */   Formatter: function() { return /* reexport safe */ _formatter__WEBPACK_IMPORTED_MODULE_19__.Formatter; },\n/* harmony export */   InfuraProvider: function() { return /* reexport safe */ _infura_provider__WEBPACK_IMPORTED_MODULE_10__.InfuraProvider; },\n/* harmony export */   InfuraWebSocketProvider: function() { return /* reexport safe */ _infura_provider__WEBPACK_IMPORTED_MODULE_10__.InfuraWebSocketProvider; },\n/* harmony export */   IpcProvider: function() { return /* reexport safe */ _ipc_provider__WEBPACK_IMPORTED_MODULE_14__.IpcProvider; },\n/* harmony export */   JsonRpcBatchProvider: function() { return /* reexport safe */ _json_rpc_batch_provider__WEBPACK_IMPORTED_MODULE_18__.JsonRpcBatchProvider; },\n/* harmony export */   JsonRpcProvider: function() { return /* reexport safe */ _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider; },\n/* harmony export */   JsonRpcSigner: function() { return /* reexport safe */ _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcSigner; },\n/* harmony export */   NodesmithProvider: function() { return /* reexport safe */ _nodesmith_provider__WEBPACK_IMPORTED_MODULE_11__.NodesmithProvider; },\n/* harmony export */   PocketProvider: function() { return /* reexport safe */ _pocket_provider__WEBPACK_IMPORTED_MODULE_12__.PocketProvider; },\n/* harmony export */   Provider: function() { return /* reexport safe */ _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_15__.Provider; },\n/* harmony export */   Resolver: function() { return /* reexport safe */ _base_provider__WEBPACK_IMPORTED_MODULE_16__.Resolver; },\n/* harmony export */   StaticJsonRpcProvider: function() { return /* reexport safe */ _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_17__.StaticJsonRpcProvider; },\n/* harmony export */   UrlJsonRpcProvider: function() { return /* reexport safe */ _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_17__.UrlJsonRpcProvider; },\n/* harmony export */   Web3Provider: function() { return /* reexport safe */ _web3_provider__WEBPACK_IMPORTED_MODULE_13__.Web3Provider; },\n/* harmony export */   WebSocketProvider: function() { return /* reexport safe */ _websocket_provider__WEBPACK_IMPORTED_MODULE_3__.WebSocketProvider; },\n/* harmony export */   getDefaultProvider: function() { return /* binding */ getDefaultProvider; },\n/* harmony export */   getNetwork: function() { return /* reexport safe */ _ethersproject_networks__WEBPACK_IMPORTED_MODULE_4__.getNetwork; },\n/* harmony export */   isCommunityResourcable: function() { return /* reexport safe */ _formatter__WEBPACK_IMPORTED_MODULE_19__.isCommunityResourcable; },\n/* harmony export */   isCommunityResource: function() { return /* reexport safe */ _formatter__WEBPACK_IMPORTED_MODULE_19__.isCommunityResource; },\n/* harmony export */   showThrottleMessage: function() { return /* reexport safe */ _formatter__WEBPACK_IMPORTED_MODULE_19__.showThrottleMessage; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_networks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/networks */ \"(app-pages-browser)/./node_modules/@ethersproject/networks/lib.esm/index.js\");\n/* harmony import */ var _base_provider__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./base-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n/* harmony import */ var _alchemy_provider__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./alchemy-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js\");\n/* harmony import */ var _ankr_provider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ankr-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ankr-provider.js\");\n/* harmony import */ var _cloudflare_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cloudflare-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js\");\n/* harmony import */ var _etherscan_provider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./etherscan-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js\");\n/* harmony import */ var _fallback_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fallback-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\");\n/* harmony import */ var _ipc_provider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ipc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ipc-provider.js\");\n/* harmony import */ var _infura_provider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./infura-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/infura-provider.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var _json_rpc_batch_provider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./json-rpc-batch-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js\");\n/* harmony import */ var _nodesmith_provider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./nodesmith-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js\");\n/* harmony import */ var _pocket_provider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pocket-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/pocket-provider.js\");\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n/* harmony import */ var _web3_provider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./web3-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var _websocket_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./websocket-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof network === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch(match[1].toLowerCase()){\n                case \"http\":\n                case \"https\":\n                    return new _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(network);\n                case \"ws\":\n                case \"wss\":\n                    return new _websocket_provider__WEBPACK_IMPORTED_MODULE_3__.WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n    const n = (0,_ethersproject_networks__WEBPACK_IMPORTED_MODULE_4__.getNetwork)(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider: _fallback_provider__WEBPACK_IMPORTED_MODULE_5__.FallbackProvider,\n        AlchemyProvider: _alchemy_provider__WEBPACK_IMPORTED_MODULE_6__.AlchemyProvider,\n        AnkrProvider: _ankr_provider__WEBPACK_IMPORTED_MODULE_7__.AnkrProvider,\n        CloudflareProvider: _cloudflare_provider__WEBPACK_IMPORTED_MODULE_8__.CloudflareProvider,\n        EtherscanProvider: _etherscan_provider__WEBPACK_IMPORTED_MODULE_9__.EtherscanProvider,\n        InfuraProvider: _infura_provider__WEBPACK_IMPORTED_MODULE_10__.InfuraProvider,\n        JsonRpcProvider: _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider,\n        NodesmithProvider: _nodesmith_provider__WEBPACK_IMPORTED_MODULE_11__.NodesmithProvider,\n        PocketProvider: _pocket_provider__WEBPACK_IMPORTED_MODULE_12__.PocketProvider,\n        Web3Provider: _web3_provider__WEBPACK_IMPORTED_MODULE_13__.Web3Provider,\n        IpcProvider: _ipc_provider__WEBPACK_IMPORTED_MODULE_14__.IpcProvider\n    }, options);\n}\n////////////////////////\n// Exports\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQytDO0FBQ1A7QUFDSTtBQUNzQjtBQUNoQztBQUNZO0FBQ0Y7QUFDRjtBQUNWO0FBQytCO0FBQ1A7QUFDSjtBQUNSO0FBQ047QUFDaUM7QUFDckM7QUFDVTtBQUNpRDtBQUMzRDtBQUNWO0FBQ3JDLE1BQU00QixTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDakMsd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQixTQUFTRSxtQkFBbUJDLE9BQU8sRUFBRUMsT0FBTztJQUN4QyxJQUFJRCxXQUFXLE1BQU07UUFDakJBLFVBQVU7SUFDZDtJQUNBLDZFQUE2RTtJQUM3RSxJQUFJLE9BQVFBLFlBQWEsVUFBVTtRQUMvQixrRUFBa0U7UUFDbEUsaURBQWlEO1FBQ2pELE1BQU1FLFFBQVFGLFFBQVFFLEtBQUssQ0FBQztRQUM1QixJQUFJQSxPQUFPO1lBQ1AsT0FBUUEsS0FBSyxDQUFDLEVBQUUsQ0FBQ0MsV0FBVztnQkFDeEIsS0FBSztnQkFDTCxLQUFLO29CQUNELE9BQU8sSUFBSXBCLCtEQUFlQSxDQUFDaUI7Z0JBQy9CLEtBQUs7Z0JBQ0wsS0FBSztvQkFDRCxPQUFPLElBQUlULGtFQUFpQkEsQ0FBQ1M7Z0JBQ2pDO29CQUNJRixPQUFPTSxrQkFBa0IsQ0FBQywwQkFBMEIsV0FBV0o7WUFDdkU7UUFDSjtJQUNKO0lBQ0EsTUFBTUssSUFBSWxDLG1FQUFVQSxDQUFDNkI7SUFDckIsSUFBSSxDQUFDSyxLQUFLLENBQUNBLEVBQUVDLGdCQUFnQixFQUFFO1FBQzNCUixPQUFPUyxVQUFVLENBQUMsMENBQTBDWCx5REFBTUEsQ0FBQ1ksTUFBTSxDQUFDQyxhQUFhLEVBQUU7WUFDckZDLFdBQVc7WUFDWFYsU0FBU0E7UUFDYjtJQUNKO0lBQ0EsT0FBT0ssRUFBRUMsZ0JBQWdCLENBQUM7UUFDdEIzQixnQkFBZ0JBLGtFQUFBQTtRQUNoQkwsZUFBZUEsZ0VBQUFBO1FBQ2ZFLFlBQVlBLDBEQUFBQTtRQUNaQyxrQkFBa0JBLHNFQUFBQTtRQUNsQkMsaUJBQWlCQSxvRUFBQUE7UUFDakJHLGNBQWNBLCtEQUFBQTtRQUNkRSxlQUFlQSxpRUFBQUE7UUFDZkcsaUJBQWlCQSxxRUFBQUE7UUFDakJDLGNBQWNBLCtEQUFBQTtRQUNkRyxZQUFZQSwyREFBQUE7UUFDWlYsV0FBV0EseURBQUFBO0lBQ2YsR0FBR3FCO0FBQ1A7QUFDQSx3QkFBd0I7QUFDeEIsVUFBVTtBQWVFLENBQ1osaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9pbmRleC5qcz8xYjJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXJcIjtcbmltcG9ydCB7IGdldE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IEJhc2VQcm92aWRlciwgUmVzb2x2ZXIgfSBmcm9tIFwiLi9iYXNlLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBBbGNoZW15UHJvdmlkZXIsIEFsY2hlbXlXZWJTb2NrZXRQcm92aWRlciB9IGZyb20gXCIuL2FsY2hlbXktcHJvdmlkZXJcIjtcbmltcG9ydCB7IEFua3JQcm92aWRlciB9IGZyb20gXCIuL2Fua3ItcHJvdmlkZXJcIjtcbmltcG9ydCB7IENsb3VkZmxhcmVQcm92aWRlciB9IGZyb20gXCIuL2Nsb3VkZmxhcmUtcHJvdmlkZXJcIjtcbmltcG9ydCB7IEV0aGVyc2NhblByb3ZpZGVyIH0gZnJvbSBcIi4vZXRoZXJzY2FuLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBGYWxsYmFja1Byb3ZpZGVyIH0gZnJvbSBcIi4vZmFsbGJhY2stcHJvdmlkZXJcIjtcbmltcG9ydCB7IElwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vaXBjLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBJbmZ1cmFQcm92aWRlciwgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9pbmZ1cmEtcHJvdmlkZXJcIjtcbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciwgSnNvblJwY1NpZ25lciB9IGZyb20gXCIuL2pzb24tcnBjLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBKc29uUnBjQmF0Y2hQcm92aWRlciB9IGZyb20gXCIuL2pzb24tcnBjLWJhdGNoLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBOb2Rlc21pdGhQcm92aWRlciB9IGZyb20gXCIuL25vZGVzbWl0aC1wcm92aWRlclwiO1xuaW1wb3J0IHsgUG9ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi9wb2NrZXQtcHJvdmlkZXJcIjtcbmltcG9ydCB7IFN0YXRpY0pzb25ScGNQcm92aWRlciwgVXJsSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vdXJsLWpzb24tcnBjLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBXZWIzUHJvdmlkZXIgfSBmcm9tIFwiLi93ZWIzLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBXZWJTb2NrZXRQcm92aWRlciB9IGZyb20gXCIuL3dlYnNvY2tldC1wcm92aWRlclwiO1xuaW1wb3J0IHsgRm9ybWF0dGVyLCBpc0NvbW11bml0eVJlc291cmNhYmxlLCBpc0NvbW11bml0eVJlc291cmNlLCBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhlbHBlciBGdW5jdGlvbnNcbmZ1bmN0aW9uIGdldERlZmF1bHRQcm92aWRlcihuZXR3b3JrLCBvcHRpb25zKSB7XG4gICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICBuZXR3b3JrID0gXCJob21lc3RlYWRcIjtcbiAgICB9XG4gICAgLy8gSWYgcGFzc2VkIGEgVVJMLCBmaWd1cmUgb3V0IHRoZSByaWdodCB0eXBlIG9mIHByb3ZpZGVyIGJhc2VkIG9uIHRoZSBzY2hlbWVcbiAgICBpZiAodHlwZW9mIChuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAvLyBAVE9ETzogQWRkIHN1cHBvcnQgZm9yIElwY1Byb3ZpZGVyOyBtYXliZSBpZiBpdCBlbmRzIGluIFwiLmlwY1wiP1xuICAgICAgICAvLyBIYW5kbGUgaHR0cCBhbmQgd3MgKGFuZCB0aGVpciBzZWN1cmUgdmFyaWFudHMpXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbmV0d29yay5tYXRjaCgvXih3c3xodHRwKXM/Oi9pKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiaHR0cFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJodHRwc1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpzb25ScGNQcm92aWRlcihuZXR3b3JrKTtcbiAgICAgICAgICAgICAgICBjYXNlIFwid3NcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwid3NzXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2ViU29ja2V0UHJvdmlkZXIobmV0d29yayk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIFVSTCBzY2hlbWVcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG4gPSBnZXROZXR3b3JrKG5ldHdvcmspO1xuICAgIGlmICghbiB8fCAhbi5fZGVmYXVsdFByb3ZpZGVyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgZ2V0RGVmYXVsdFByb3ZpZGVyIG5ldHdvcmtcIiwgTG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0RGVmYXVsdFByb3ZpZGVyXCIsXG4gICAgICAgICAgICBuZXR3b3JrOiBuZXR3b3JrXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbi5fZGVmYXVsdFByb3ZpZGVyKHtcbiAgICAgICAgRmFsbGJhY2tQcm92aWRlcixcbiAgICAgICAgQWxjaGVteVByb3ZpZGVyLFxuICAgICAgICBBbmtyUHJvdmlkZXIsXG4gICAgICAgIENsb3VkZmxhcmVQcm92aWRlcixcbiAgICAgICAgRXRoZXJzY2FuUHJvdmlkZXIsXG4gICAgICAgIEluZnVyYVByb3ZpZGVyLFxuICAgICAgICBKc29uUnBjUHJvdmlkZXIsXG4gICAgICAgIE5vZGVzbWl0aFByb3ZpZGVyLFxuICAgICAgICBQb2NrZXRQcm92aWRlcixcbiAgICAgICAgV2ViM1Byb3ZpZGVyLFxuICAgICAgICBJcGNQcm92aWRlcixcbiAgICB9LCBvcHRpb25zKTtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRXhwb3J0c1xuZXhwb3J0IHsgXG4vLyBBYnN0cmFjdCBQcm92aWRlcnMgKG9yIEFic3RyYWN0LWlzaClcblByb3ZpZGVyLCBCYXNlUHJvdmlkZXIsIFJlc29sdmVyLCBVcmxKc29uUnBjUHJvdmlkZXIsIFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENvbmNyZXRlIFByb3ZpZGVyc1xuRmFsbGJhY2tQcm92aWRlciwgQWxjaGVteVByb3ZpZGVyLCBBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIsIEFua3JQcm92aWRlciwgQ2xvdWRmbGFyZVByb3ZpZGVyLCBFdGhlcnNjYW5Qcm92aWRlciwgSW5mdXJhUHJvdmlkZXIsIEluZnVyYVdlYlNvY2tldFByb3ZpZGVyLCBKc29uUnBjUHJvdmlkZXIsIEpzb25ScGNCYXRjaFByb3ZpZGVyLCBOb2Rlc21pdGhQcm92aWRlciwgUG9ja2V0UHJvdmlkZXIsIFN0YXRpY0pzb25ScGNQcm92aWRlciwgV2ViM1Byb3ZpZGVyLCBXZWJTb2NrZXRQcm92aWRlciwgSXBjUHJvdmlkZXIsIFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFNpZ25lclxuSnNvblJwY1NpZ25lciwgXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zXG5nZXREZWZhdWx0UHJvdmlkZXIsIGdldE5ldHdvcmssIGlzQ29tbXVuaXR5UmVzb3VyY2UsIGlzQ29tbXVuaXR5UmVzb3VyY2FibGUsIHNob3dUaHJvdHRsZU1lc3NhZ2UsIFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIE9iamVjdHNcbkZvcm1hdHRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIlByb3ZpZGVyIiwiZ2V0TmV0d29yayIsIkJhc2VQcm92aWRlciIsIlJlc29sdmVyIiwiQWxjaGVteVByb3ZpZGVyIiwiQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIiwiQW5rclByb3ZpZGVyIiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwiRXRoZXJzY2FuUHJvdmlkZXIiLCJGYWxsYmFja1Byb3ZpZGVyIiwiSXBjUHJvdmlkZXIiLCJJbmZ1cmFQcm92aWRlciIsIkluZnVyYVdlYlNvY2tldFByb3ZpZGVyIiwiSnNvblJwY1Byb3ZpZGVyIiwiSnNvblJwY1NpZ25lciIsIkpzb25ScGNCYXRjaFByb3ZpZGVyIiwiTm9kZXNtaXRoUHJvdmlkZXIiLCJQb2NrZXRQcm92aWRlciIsIlN0YXRpY0pzb25ScGNQcm92aWRlciIsIlVybEpzb25ScGNQcm92aWRlciIsIldlYjNQcm92aWRlciIsIldlYlNvY2tldFByb3ZpZGVyIiwiRm9ybWF0dGVyIiwiaXNDb21tdW5pdHlSZXNvdXJjYWJsZSIsImlzQ29tbXVuaXR5UmVzb3VyY2UiLCJzaG93VGhyb3R0bGVNZXNzYWdlIiwiTG9nZ2VyIiwidmVyc2lvbiIsImxvZ2dlciIsImdldERlZmF1bHRQcm92aWRlciIsIm5ldHdvcmsiLCJvcHRpb25zIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsInRocm93QXJndW1lbnRFcnJvciIsIm4iLCJfZGVmYXVsdFByb3ZpZGVyIiwidGhyb3dFcnJvciIsImVycm9ycyIsIk5FVFdPUktfRVJST1IiLCJvcGVyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/infura-provider.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/infura-provider.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfuraProvider: function() { return /* binding */ InfuraProvider; },\n/* harmony export */   InfuraWebSocketProvider: function() { return /* binding */ InfuraWebSocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _websocket_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websocket-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\");\n/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/formatter.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nclass InfuraWebSocketProvider extends _websocket_provider__WEBPACK_IMPORTED_MODULE_2__.WebSocketProvider {\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n    constructor(network, apiKey){\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"apiKey\", provider.projectId);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"projectId\", provider.projectId);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"projectSecret\", provider.projectSecret);\n    }\n}\nclass InfuraProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_4__.UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof apiKey === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch(network ? network.name : \"unknown\"){\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n            throttleCallback: (attempt, url)=>{\n                if (apiKey.projectId === defaultProjectId) {\n                    (0,_formatter__WEBPACK_IMPORTED_MODULE_5__.showThrottleMessage)();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return this.projectId === defaultProjectId;\n    }\n} //# sourceMappingURL=infura-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/infura-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ipc-provider.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/ipc-provider.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpcProvider: function() { return /* binding */ IpcProvider; }\n/* harmony export */ });\n\nconst IpcProvider = null;\n //# sourceMappingURL=ipc-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9pcGMtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ2IsTUFBTUEsY0FBYztBQUNHLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi5lc20vaXBjLXByb3ZpZGVyLmpzPzU5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBJcGNQcm92aWRlciA9IG51bGw7XG5leHBvcnQgeyBJcGNQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXBjLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJJcGNQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ipc-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcBatchProvider: function() { return /* binding */ JsonRpcBatchProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n\n\n\n// Experimental\nclass JsonRpcBatchProvider extends _json_rpc_provider__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = {\n            request,\n            resolve: null,\n            reject: null\n        };\n        const promise = new Promise((resolve, reject)=>{\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(()=>{\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight)=>inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_1__.deepCopy)(request),\n                    provider: this\n                });\n                return (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_2__.fetchJson)(this.connection, JSON.stringify(request)).then((result)=>{\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index)=>{\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error)=>{\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest)=>{\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n} //# sourceMappingURL=json-rpc-batch-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9qc29uLXJwYy1iYXRjaC1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBQ047QUFDTztBQUN0RCxlQUFlO0FBQ1IsTUFBTUcsNkJBQTZCRCwrREFBZUE7SUFDckRFLEtBQUtDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO1FBQ2pCLE1BQU1DLFVBQVU7WUFDWkYsUUFBUUE7WUFDUkMsUUFBUUE7WUFDUkUsSUFBSyxJQUFJLENBQUNDLE9BQU87WUFDakJDLFNBQVM7UUFDYjtRQUNBLElBQUksSUFBSSxDQUFDQyxhQUFhLElBQUksTUFBTTtZQUM1QixJQUFJLENBQUNBLGFBQWEsR0FBRyxFQUFFO1FBQzNCO1FBQ0EsTUFBTUMsa0JBQWtCO1lBQUVMO1lBQVNNLFNBQVM7WUFBTUMsUUFBUTtRQUFLO1FBQy9ELE1BQU1DLFVBQVUsSUFBSUMsUUFBUSxDQUFDSCxTQUFTQztZQUNsQ0YsZ0JBQWdCQyxPQUFPLEdBQUdBO1lBQzFCRCxnQkFBZ0JFLE1BQU0sR0FBR0E7UUFDN0I7UUFDQSxJQUFJLENBQUNILGFBQWEsQ0FBQ00sSUFBSSxDQUFDTDtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDTSx1QkFBdUIsRUFBRTtZQUMvQixzREFBc0Q7WUFDdEQsSUFBSSxDQUFDQSx1QkFBdUIsR0FBR0MsV0FBVztnQkFDdEMsc0RBQXNEO2dCQUN0RCx5QkFBeUI7Z0JBQ3pCLE1BQU1DLFFBQVEsSUFBSSxDQUFDVCxhQUFhO2dCQUNoQyxJQUFJLENBQUNBLGFBQWEsR0FBRztnQkFDckIsSUFBSSxDQUFDTyx1QkFBdUIsR0FBRztnQkFDL0IsMENBQTBDO2dCQUMxQyxNQUFNWCxVQUFVYSxNQUFNQyxHQUFHLENBQUMsQ0FBQ0MsV0FBYUEsU0FBU2YsT0FBTztnQkFDeEQsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDLFNBQVM7b0JBQ2ZDLFFBQVE7b0JBQ1JqQixTQUFTUCxtRUFBUUEsQ0FBQ087b0JBQ2xCa0IsVUFBVSxJQUFJO2dCQUNsQjtnQkFDQSxPQUFPeEIsNkRBQVNBLENBQUMsSUFBSSxDQUFDeUIsVUFBVSxFQUFFQyxLQUFLQyxTQUFTLENBQUNyQixVQUFVc0IsSUFBSSxDQUFDLENBQUNDO29CQUM3RCxJQUFJLENBQUNQLElBQUksQ0FBQyxTQUFTO3dCQUNmQyxRQUFRO3dCQUNSakIsU0FBU0E7d0JBQ1R3QixVQUFVRDt3QkFDVkwsVUFBVSxJQUFJO29CQUNsQjtvQkFDQSw2REFBNkQ7b0JBQzdELHVDQUF1QztvQkFDdkNMLE1BQU1ZLE9BQU8sQ0FBQyxDQUFDcEIsaUJBQWlCcUI7d0JBQzVCLE1BQU1DLFVBQVVKLE1BQU0sQ0FBQ0csTUFBTTt3QkFDN0IsSUFBSUMsUUFBUUMsS0FBSyxFQUFFOzRCQUNmLE1BQU1BLFFBQVEsSUFBSUMsTUFBTUYsUUFBUUMsS0FBSyxDQUFDRSxPQUFPOzRCQUM3Q0YsTUFBTUcsSUFBSSxHQUFHSixRQUFRQyxLQUFLLENBQUNHLElBQUk7NEJBQy9CSCxNQUFNSSxJQUFJLEdBQUdMLFFBQVFDLEtBQUssQ0FBQ0ksSUFBSTs0QkFDL0IzQixnQkFBZ0JFLE1BQU0sQ0FBQ3FCO3dCQUMzQixPQUNLOzRCQUNEdkIsZ0JBQWdCQyxPQUFPLENBQUNxQixRQUFRSixNQUFNO3dCQUMxQztvQkFDSjtnQkFDSixHQUFHLENBQUNLO29CQUNBLElBQUksQ0FBQ1osSUFBSSxDQUFDLFNBQVM7d0JBQ2ZDLFFBQVE7d0JBQ1JXLE9BQU9BO3dCQUNQNUIsU0FBU0E7d0JBQ1RrQixVQUFVLElBQUk7b0JBQ2xCO29CQUNBTCxNQUFNWSxPQUFPLENBQUMsQ0FBQ3BCO3dCQUNYQSxnQkFBZ0JFLE1BQU0sQ0FBQ3FCO29CQUMzQjtnQkFDSjtZQUNKLEdBQUc7UUFDUDtRQUNBLE9BQU9wQjtJQUNYO0FBQ0osRUFDQSxtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9saWIuZXNtL2pzb24tcnBjLWJhdGNoLXByb3ZpZGVyLmpzPzk3MTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVlcENvcHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZmV0Y2hKc29uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vanNvbi1ycGMtcHJvdmlkZXJcIjtcbi8vIEV4cGVyaW1lbnRhbFxuZXhwb3J0IGNsYXNzIEpzb25ScGNCYXRjaFByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBzZW5kKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6ICh0aGlzLl9uZXh0SWQrKyksXG4gICAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nQmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0JhdGNoID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5mbGlnaHRSZXF1ZXN0ID0geyByZXF1ZXN0LCByZXNvbHZlOiBudWxsLCByZWplY3Q6IG51bGwgfTtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2gucHVzaChpbmZsaWdodFJlcXVlc3QpO1xuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdCYXRjaEFnZ3JlZ2F0b3IpIHtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGJhdGNoIGZvciBuZXh0IGV2ZW50IGxvb3AgKyBzaG9ydCBkdXJhdGlvblxuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0ZWggY3VycmVudCBiYXRjaCBhbmQgY2xlYXIgaXQsIHNvIG5ldyByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIC8vIGdvIGludG8gdGhlIG5leHQgYmF0Y2hcbiAgICAgICAgICAgICAgICBjb25zdCBiYXRjaCA9IHRoaXMuX3BlbmRpbmdCYXRjaDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2ggPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdCYXRjaEFnZ3JlZ2F0b3IgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcmVxdWVzdCBhcyBhbiBhcnJheSBvZiByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBiYXRjaC5tYXAoKGluZmxpZ2h0KSA9PiBpbmZsaWdodC5yZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0QmF0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogZGVlcENvcHkocmVxdWVzdCksXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoSnNvbih0aGlzLmNvbm5lY3Rpb24sIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCByZXN1bHQsIGZlZWQgaXQgdG8gdGhlIGNvcnJlY3QgUHJvbWlzZSwgZGVwZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHdoZXRoZXIgaXQgd2FzIGEgc3VjY2VzcyBvciBlcnJvclxuICAgICAgICAgICAgICAgICAgICBiYXRjaC5mb3JFYWNoKChpbmZsaWdodFJlcXVlc3QsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gcmVzdWx0W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gcGF5bG9hZC5lcnJvci5jb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmRhdGEgPSBwYXlsb2FkLmVycm9yLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRSZXF1ZXN0LnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVzb2x2ZShwYXlsb2FkLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYmF0Y2guZm9yRWFjaCgoaW5mbGlnaHRSZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNvbi1ycGMtYmF0Y2gtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbImRlZXBDb3B5IiwiZmV0Y2hKc29uIiwiSnNvblJwY1Byb3ZpZGVyIiwiSnNvblJwY0JhdGNoUHJvdmlkZXIiLCJzZW5kIiwibWV0aG9kIiwicGFyYW1zIiwicmVxdWVzdCIsImlkIiwiX25leHRJZCIsImpzb25ycGMiLCJfcGVuZGluZ0JhdGNoIiwiaW5mbGlnaHRSZXF1ZXN0IiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCJQcm9taXNlIiwicHVzaCIsIl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yIiwic2V0VGltZW91dCIsImJhdGNoIiwibWFwIiwiaW5mbGlnaHQiLCJlbWl0IiwiYWN0aW9uIiwicHJvdmlkZXIiLCJjb25uZWN0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXN1bHQiLCJyZXNwb25zZSIsImZvckVhY2giLCJpbmRleCIsInBheWxvYWQiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImNvZGUiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ JsonRpcProvider; },\n/* harmony export */   JsonRpcSigner: function() { return /* binding */ JsonRpcSigner; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _base_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/base-provider.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst errorGas = [\n    \"call\",\n    \"estimateGas\"\n];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n        const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return {\n                message: value.message,\n                data\n            };\n        }\n    }\n    // Spelunk further...\n    if (typeof value === \"object\") {\n        for(const key in value){\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof value === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) {}\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\",\n            transaction,\n            error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message,\n                method,\n                transaction,\n                error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n        message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n        message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INSUFFICIENT_FUNDS, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NONCE_EXPIRED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error,\n            method,\n            transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            error,\n            method,\n            transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error,\n            method,\n            transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nclass JsonRpcSigner extends _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__.Signer {\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts)=>{\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(transaction);\n        const fromAddress = this.getAddress().then((address)=>{\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to)=>__awaiter(this, void 0, void 0, function*() {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.provider.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n        }\n        return (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.resolveProperties)({\n            tx: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.resolveProperties)(transaction),\n            sender: fromAddress\n        }).then((param)=>{\n            let { tx, sender } = param;\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n                from: true\n            });\n            return this.provider.send(\"eth_sendTransaction\", [\n                hexTx\n            ]).then((hash)=>{\n                return hash;\n            }, (error)=>{\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.poll)(()=>__awaiter(this, void 0, void 0, function*() {\n                        const tx = yield this.provider.getTransaction(hash);\n                        if (tx === null) {\n                            return undefined;\n                        }\n                        return this.provider._wrapTransaction(tx, hash, blockNumber);\n                    }), {\n                    oncePoll: this.provider\n                });\n            } catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = typeof message === \"string\" ? (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(message) : message;\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data),\n                    address.toLowerCase()\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = typeof message === \"string\" ? (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_6__.toUtf8Bytes)(message) : message;\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [\n                    address.toLowerCase(),\n                    (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data)\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Populate any ENS names (in-place)\n            const populated = yield _ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__.TypedDataEncoder.resolveNames(domain, types, value, (name)=>{\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_ethersproject_hash__WEBPACK_IMPORTED_MODULE_7__.TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            } catch (error) {\n                if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: {\n                            domain: populated.domain,\n                            types,\n                            value: populated.value\n                        }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [\n                address.toLowerCase(),\n                password,\n                null\n            ]);\n        });\n    }\n    constructor(constructorGuard, provider, addressOrIndex){\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof addressOrIndex === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_index\", null);\n        } else if (typeof addressOrIndex === \"number\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_index\", addressOrIndex);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_address\", null);\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash)=>{\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations)=>{\n                    return this.provider.waitForTransaction(hash, confirmations);\n                }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true,\n    data: true,\n    gasLimit: true,\n    gasPrice: true,\n    nonce: true,\n    to: true,\n    value: true,\n    type: true,\n    accessList: true,\n    maxFeePerGas: true,\n    maxPriorityFeePerGas: true\n};\nclass JsonRpcProvider extends _base_provider__WEBPACK_IMPORTED_MODULE_8__.BaseProvider {\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http://localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(()=>{\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            } catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                } catch (error) {}\n            }\n            if (chainId != null) {\n                const getNetwork = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(chainId).toNumber());\n                } catch (error) {\n                    return logger.throwError(\"could not detect network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts)=>{\n            return accounts.map((a)=>this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: this._nextId++,\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.deepCopy)(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = [\n            \"eth_chainId\",\n            \"eth_blockNumber\"\n        ].indexOf(method) >= 0;\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = (0,_ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.fetchJson)(this.connection, JSON.stringify(request), getResult).then((result)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(()=>{\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch(method){\n            case \"getBlockNumber\":\n                return [\n                    \"eth_blockNumber\",\n                    []\n                ];\n            case \"getGasPrice\":\n                return [\n                    \"eth_gasPrice\",\n                    []\n                ];\n            case \"getBalance\":\n                return [\n                    \"eth_getBalance\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getTransactionCount\":\n                return [\n                    \"eth_getTransactionCount\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getCode\":\n                return [\n                    \"eth_getCode\",\n                    [\n                        getLowerCase(params.address),\n                        params.blockTag\n                    ]\n                ];\n            case \"getStorageAt\":\n                return [\n                    \"eth_getStorageAt\",\n                    [\n                        getLowerCase(params.address),\n                        (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexZeroPad)(params.position, 32),\n                        params.blockTag\n                    ]\n                ];\n            case \"sendTransaction\":\n                return [\n                    \"eth_sendRawTransaction\",\n                    [\n                        params.signedTransaction\n                    ]\n                ];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\n                        \"eth_getBlockByNumber\",\n                        [\n                            params.blockTag,\n                            !!params.includeTransactions\n                        ]\n                    ];\n                } else if (params.blockHash) {\n                    return [\n                        \"eth_getBlockByHash\",\n                        [\n                            params.blockHash,\n                            !!params.includeTransactions\n                        ]\n                    ];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\n                    \"eth_getTransactionByHash\",\n                    [\n                        params.transactionHash\n                    ]\n                ];\n            case \"getTransactionReceipt\":\n                return [\n                    \"eth_getTransactionReceipt\",\n                    [\n                        params.transactionHash\n                    ]\n                ];\n            case \"call\":\n                {\n                    const hexlifyTransaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"hexlifyTransaction\");\n                    return [\n                        \"eth_call\",\n                        [\n                            hexlifyTransaction(params.transaction, {\n                                from: true\n                            }),\n                            params.blockTag\n                        ]\n                    ];\n                }\n            case \"estimateGas\":\n                {\n                    const hexlifyTransaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"hexlifyTransaction\");\n                    return [\n                        \"eth_estimateGas\",\n                        [\n                            hexlifyTransaction(params.transaction, {\n                                from: true\n                            })\n                        ]\n                    ];\n                }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\n                    \"eth_getLogs\",\n                    [\n                        params.filter\n                    ]\n                ];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(params);\n                            params.transaction = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            } catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [\n                    filterId\n                ]).then(function(hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [\n                            filterId\n                        ]);\n                        return;\n                    }\n                    setTimeout(function() {\n                        poll();\n                    }, 0);\n                    return null;\n                }).catch((error)=>{});\n            }\n            poll();\n            return filterId;\n        }).catch((error)=>{});\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(allowedTransactionKeys);\n        if (allowExtra) {\n            for(const key in allowExtra){\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.checkProperties)(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\n            \"chainId\",\n            \"gasLimit\",\n            \"gasPrice\",\n            \"type\",\n            \"maxFeePerGas\",\n            \"maxPriorityFeePerGas\",\n            \"nonce\",\n            \"value\"\n        ].forEach(function(key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexValue)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\n            \"from\",\n            \"to\",\n            \"data\"\n        ].forEach(function(key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_10__.accessListify)(transaction.accessList);\n        }\n        return result;\n    }\n    constructor(url, network){\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject)=>{\n                setTimeout(()=>{\n                    this.detectNetwork().then((network)=>{\n                        resolve(network);\n                    }, (error)=>{\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.getStatic)(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof url === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        } else {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"connection\", Object.freeze((0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.shallowCopy)(url)));\n        }\n        this._nextId = 42;\n    }\n} //# sourceMappingURL=json-rpc-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodesmithProvider: function() { return /* binding */ NodesmithProvider; }\n/* harmony export */ });\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* istanbul ignore file */ \n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\nclass NodesmithProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey && typeof apiKey !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n    static getUrl(network, apiKey) {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n        let host = null;\n        switch(network.name){\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host + \"?apiKey=\" + apiKey;\n    }\n} //# sourceMappingURL=nodesmith-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9ub2Rlc21pdGgtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHdCQUF3QixHQUNYO0FBQ2dEO0FBQ2Q7QUFDVjtBQUNyQyxNQUFNRyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDakMsc0RBQXNEO0FBQ3RELE1BQU1FLGdCQUFnQjtBQUNmLE1BQU1DLDBCQUEwQkwsc0VBQWtCQTtJQUNyRCxPQUFPTSxVQUFVQyxNQUFNLEVBQUU7UUFDckIsSUFBSUEsVUFBVSxPQUFRQSxXQUFZLFVBQVU7WUFDeENKLE9BQU9LLGtCQUFrQixDQUFDLGtCQUFrQixVQUFVRDtRQUMxRDtRQUNBLE9BQU9BLFVBQVVIO0lBQ3JCO0lBQ0EsT0FBT0ssT0FBT0MsT0FBTyxFQUFFSCxNQUFNLEVBQUU7UUFDM0JKLE9BQU9RLElBQUksQ0FBQztRQUNaLElBQUlDLE9BQU87UUFDWCxPQUFRRixRQUFRRyxJQUFJO1lBQ2hCLEtBQUs7Z0JBQ0RELE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKLEtBQUs7Z0JBQ0RBLE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0o7Z0JBQ0lULE9BQU9LLGtCQUFrQixDQUFDLHVCQUF1QixXQUFXTSxTQUFTLENBQUMsRUFBRTtRQUNoRjtRQUNBLE9BQVFGLE9BQU8sYUFBYUw7SUFDaEM7QUFDSixFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi5lc20vbm9kZXNtaXRoLXByb3ZpZGVyLmpzPzFlYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgVXJsSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vdXJsLWpzb24tcnBjLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLyBTcGVjaWFsIEFQSSBrZXkgcHJvdmlkZWQgYnkgTm9kZXNtaXRoIGZvciBldGhlcnMuanNcbmNvbnN0IGRlZmF1bHRBcGlLZXkgPSBcIkVUSEVSU19KU19TSEFSRURcIjtcbmV4cG9ydCBjbGFzcyBOb2Rlc21pdGhQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlciB7XG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXkpIHtcbiAgICAgICAgaWYgKGFwaUtleSAmJiB0eXBlb2YgKGFwaUtleSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFwaUtleVwiLCBcImFwaUtleVwiLCBhcGlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGlLZXkgfHwgZGVmYXVsdEFwaUtleTtcbiAgICB9XG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oXCJOb2RlU21pdGggd2lsbCBiZSBkaXNjb250aW51ZWQgb24gMjAxOS0xMi0yMDsgcGxlYXNlIG1pZ3JhdGUgdG8gYW5vdGhlciBwbGF0Zm9ybS5cIik7XG4gICAgICAgIGxldCBob3N0ID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChuZXR3b3JrLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvbWFpbm5ldC9qc29ucnBjXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9yb3BzdGVuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyaW5rZWJ5XCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL3JpbmtlYnkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9nb2VybGkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL2tvdmFuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChob3N0ICsgXCI/YXBpS2V5PVwiICsgYXBpS2V5KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2Rlc21pdGgtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIlVybEpzb25ScGNQcm92aWRlciIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJkZWZhdWx0QXBpS2V5IiwiTm9kZXNtaXRoUHJvdmlkZXIiLCJnZXRBcGlLZXkiLCJhcGlLZXkiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJnZXRVcmwiLCJuZXR3b3JrIiwid2FybiIsImhvc3QiLCJuYW1lIiwiYXJndW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/pocket-provider.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/pocket-provider.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PocketProvider: function() { return /* binding */ PocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nclass PocketProvider extends _url_json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n        } else if (typeof apiKey === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch(network ? network.name : \"unknown\"){\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n        const connection = {\n            headers: {},\n            url\n        };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return this.applicationId === defaultApplicationId;\n    }\n} //# sourceMappingURL=pocket-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9wb2NrZXQtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhO0FBQ2tDO0FBQ1Y7QUFDckMsTUFBTUUsU0FBUyxJQUFJRix5REFBTUEsQ0FBQ0MsNkNBQU9BO0FBQzRCO0FBQzdELE1BQU1HLHVCQUF1QjtBQUN0QixNQUFNQyx1QkFBdUJGLHNFQUFrQkE7SUFDbEQsT0FBT0csVUFBVUMsTUFBTSxFQUFFO1FBQ3JCLE1BQU1DLFlBQVk7WUFDZEMsZUFBZTtZQUNmQyxjQUFjO1lBQ2RDLHNCQUFzQjtRQUMxQjtRQUNBLCtDQUErQztRQUMvQyxJQUFJSixVQUFVLE1BQU07WUFDaEJDLFVBQVVDLGFBQWEsR0FBR0w7UUFDOUIsT0FDSyxJQUFJLE9BQVFHLFdBQVksVUFBVTtZQUNuQ0MsVUFBVUMsYUFBYSxHQUFHRjtRQUM5QixPQUNLLElBQUlBLE9BQU9JLG9CQUFvQixJQUFJLE1BQU07WUFDMUNILFVBQVVDLGFBQWEsR0FBR0YsT0FBT0UsYUFBYTtZQUM5Q0QsVUFBVUcsb0JBQW9CLEdBQUdKLE9BQU9JLG9CQUFvQjtRQUNoRSxPQUNLLElBQUlKLE9BQU9FLGFBQWEsRUFBRTtZQUMzQkQsVUFBVUMsYUFBYSxHQUFHRixPQUFPRSxhQUFhO1FBQ2xELE9BQ0s7WUFDRFAsT0FBT1Usa0JBQWtCLENBQUMscUNBQXFDLFVBQVVMO1FBQzdFO1FBQ0EsT0FBT0M7SUFDWDtJQUNBLE9BQU9LLE9BQU9DLE9BQU8sRUFBRVAsTUFBTSxFQUFFO1FBQzNCLElBQUlRLE9BQU87UUFDWCxPQUFRRCxVQUFVQSxRQUFRRSxJQUFJLEdBQUc7WUFDN0IsS0FBSztnQkFDREQsT0FBTztnQkFDUDtZQUNKLEtBQUs7Z0JBQ0RBLE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKLEtBQUs7Z0JBQ0RBLE9BQU87Z0JBQ1A7WUFDSixLQUFLO2dCQUNEQSxPQUFPO2dCQUNQO1lBQ0osS0FBSztnQkFDREEsT0FBTztnQkFDUDtZQUNKO2dCQUNJYixPQUFPZSxVQUFVLENBQUMsdUJBQXVCakIseURBQU1BLENBQUNrQixNQUFNLENBQUNDLGdCQUFnQixFQUFFO29CQUNyRUMsVUFBVTtvQkFDVkMsT0FBT1A7Z0JBQ1g7UUFDUjtRQUNBLE1BQU1RLE1BQU0sV0FBMEJmLE9BQWRRLE1BQUssV0FBOEIsT0FBckJSLE9BQU9FLGFBQWE7UUFDMUQsTUFBTWMsYUFBYTtZQUFFQyxTQUFTLENBQUM7WUFBR0Y7UUFBSTtRQUN0QyxJQUFJZixPQUFPSSxvQkFBb0IsSUFBSSxNQUFNO1lBQ3JDWSxXQUFXRSxJQUFJLEdBQUc7WUFDbEJGLFdBQVdHLFFBQVEsR0FBR25CLE9BQU9JLG9CQUFvQjtRQUNyRDtRQUNBLE9BQU9ZO0lBQ1g7SUFDQUksc0JBQXNCO1FBQ2xCLE9BQVEsSUFBSSxDQUFDbEIsYUFBYSxLQUFLTDtJQUNuQztBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS9wb2NrZXQtcHJvdmlkZXIuanM/YjE2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuY29uc3QgZGVmYXVsdEFwcGxpY2F0aW9uSWQgPSBcIjYyZTFhZDUxYjM3YjhlMDAzOTRiZGEzYlwiO1xuZXhwb3J0IGNsYXNzIFBvY2tldFByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBzdGF0aWMgZ2V0QXBpS2V5KGFwaUtleSkge1xuICAgICAgICBjb25zdCBhcGlLZXlPYmogPSB7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbklkOiBudWxsLFxuICAgICAgICAgICAgbG9hZEJhbGFuY2VyOiB0cnVlLFxuICAgICAgICAgICAgYXBwbGljYXRpb25TZWNyZXRLZXk6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUGFyc2UgYXBwbGljYXRpb25JZCBhbmQgYXBwbGljYXRpb25TZWNyZXRLZXlcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhcGlLZXlPYmouYXBwbGljYXRpb25JZCA9IGRlZmF1bHRBcHBsaWNhdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiAoYXBpS2V5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQgPSBhcGlLZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gYXBpS2V5LmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICBhcGlLZXlPYmouYXBwbGljYXRpb25TZWNyZXRLZXkgPSBhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXBpS2V5LmFwcGxpY2F0aW9uSWQpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gYXBpS2V5LmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgUG9ja2V0UHJvdmlkZXIgYXBpS2V5XCIsIFwiYXBpS2V5XCIsIGFwaUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwaUtleU9iajtcbiAgICB9XG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrLCBhcGlLZXkpIHtcbiAgICAgICAgbGV0IGhvc3QgPSBudWxsO1xuICAgICAgICBzd2l0Y2ggKG5ldHdvcmsgPyBuZXR3b3JrLm5hbWUgOiBcInVua25vd25cIikge1xuICAgICAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1nb2VybGkuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtbWFpbm5ldC5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9hLWtvdmFuLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWF0aWNcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJwb2x5LW1haW5uZXQuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtYXRpY211bVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcInBvbHlnb24tbXVtYmFpLXJwYy5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJpbmtlYnlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtcmlua2VieS5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJvcHN0ZW5cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtcm9wc3Rlbi5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcIm5ldHdvcmtcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldHdvcmtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6L1xcLyR7aG9zdH0vdjEvbGIvJHthcGlLZXkuYXBwbGljYXRpb25JZH1gO1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0geyBoZWFkZXJzOiB7fSwgdXJsIH07XG4gICAgICAgIGlmIChhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi51c2VyID0gXCJcIjtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucGFzc3dvcmQgPSBhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfVxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcHBsaWNhdGlvbklkID09PSBkZWZhdWx0QXBwbGljYXRpb25JZCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9ja2V0LXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiVXJsSnNvblJwY1Byb3ZpZGVyIiwiZGVmYXVsdEFwcGxpY2F0aW9uSWQiLCJQb2NrZXRQcm92aWRlciIsImdldEFwaUtleSIsImFwaUtleSIsImFwaUtleU9iaiIsImFwcGxpY2F0aW9uSWQiLCJsb2FkQmFsYW5jZXIiLCJhcHBsaWNhdGlvblNlY3JldEtleSIsInRocm93QXJndW1lbnRFcnJvciIsImdldFVybCIsIm5ldHdvcmsiLCJob3N0IiwibmFtZSIsInRocm93RXJyb3IiLCJlcnJvcnMiLCJJTlZBTElEX0FSR1VNRU5UIiwiYXJndW1lbnQiLCJ2YWx1ZSIsInVybCIsImNvbm5lY3Rpb24iLCJoZWFkZXJzIiwidXNlciIsInBhc3N3b3JkIiwiaXNDb21tdW5pdHlSZXNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/pocket-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StaticJsonRpcProvider: function() { return /* binding */ StaticJsonRpcProvider; },\n/* harmony export */   UrlJsonRpcProvider: function() { return /* binding */ UrlJsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nclass StaticJsonRpcProvider extends _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: {\n                get: ()=>super.detectNetwork\n            }\n        });\n        return __awaiter(this, void 0, void 0, function*() {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    logger.throwError(\"no network detected\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nclass UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    _startPending() {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return logger.throwError(\"API provider does not support signing\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getSigner\"\n        });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n    constructor(network, apiKey){\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getNetwork\")(network);\n        apiKey = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getApiKey\")(apiKey);\n        const connection = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.getStatic)(new.target, \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof apiKey === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key)=>{\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, key, apiKey[key]);\n            });\n        }\n    }\n} //# sourceMappingURL=url-json-rpc-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/web3-provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Provider: function() { return /* binding */ Web3Provider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: _nextId++,\n            jsonrpc: \"2.0\"\n        };\n        return new Promise((resolve, reject)=>{\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(request),\n                provider: this\n            });\n            sendFunc(request, (error, response)=>{\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n                    return reject(error);\n                }\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    error.code = response.error.code;\n                    error.data = response.error.data;\n                    return reject(error);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function(method, params) {\n        if (params == null) {\n            params = [];\n        }\n        const request = {\n            method,\n            params\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(request),\n            provider: this\n        });\n        return provider.request(request).then((response)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n            return response;\n        }, (error)=>{\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n            throw error;\n        });\n    };\n}\nclass Web3Provider extends _json_rpc_provider__WEBPACK_IMPORTED_MODULE_3__.JsonRpcProvider {\n    send(method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n    constructor(provider, network){\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        let path = null;\n        let jsonRpcFetchFunc = null;\n        let subprovider = null;\n        if (typeof provider === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        super(path, network);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_2__.defineReadOnly)(this, \"provider\", subprovider);\n    }\n} //# sourceMappingURL=web3-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketProvider: function() { return /* binding */ WebSocketProvider; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json-rpc-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var _ws__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ws */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ws.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */ let NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nclass WebSocketProvider extends _json_rpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider {\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket() {\n        return this._websocket;\n    }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function*() {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject)=>{\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = {\n                callback,\n                payload\n            };\n            if (this._wsReady) {\n                this.websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws://localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param)=>{\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = {\n                tag,\n                processFunc\n            };\n        });\n    }\n    _startEvent(event) {\n        switch(event.type){\n            case \"block\":\n                this._subscribe(\"block\", [\n                    \"newHeads\"\n                ], (result)=>{\n                    const blockNumber = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_3__.BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\n                    \"newPendingTransactions\"\n                ], (result)=>{\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\n                    \"logs\",\n                    this._getFilter(event.filter)\n                ], (result)=>{\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\":\n                {\n                    const emitReceipt = (event)=>{\n                        const hash = event.hash;\n                        this.getTransactionReceipt(hash).then((receipt)=>{\n                            if (!receipt) {\n                                return;\n                            }\n                            this.emit(hash, receipt);\n                        });\n                    };\n                    // In case it is already mined\n                    emitReceipt(event);\n                    // To keep things simple, we start up a single newHeads subscription\n                    // to keep an eye out for transactions we are watching for.\n                    // Starting a subscription for an event (i.e. \"tx\") that is already\n                    // running is (basically) a nop.\n                    this._subscribe(\"tx\", [\n                        \"newHeads\"\n                    ], (result)=>{\n                        this._events.filter((e)=>e.type === \"tx\").forEach(emitReceipt);\n                    });\n                    break;\n                }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e)=>e.type === \"tx\").length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId)=>{\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [\n                subId\n            ]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Wait until we have connected before trying to disconnect\n            if (this.websocket.readyState === _ws__WEBPACK_IMPORTED_MODULE_4__.WebSocket.CONNECTING) {\n                yield new Promise((resolve)=>{\n                    this.websocket.onopen = function() {\n                        resolve(true);\n                    };\n                    this.websocket.onerror = function() {\n                        resolve(false);\n                    };\n                });\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this.websocket.close(1000);\n        });\n    }\n    constructor(url, network){\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        if (typeof url === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        if (typeof url === \"string\") {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_websocket\", new _ws__WEBPACK_IMPORTED_MODULE_4__.WebSocket(this.connection.url));\n        } else {\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_websocket\", url);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_requests\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_subs\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_subIds\", {});\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = ()=>{\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id)=>{\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n        this.websocket.onmessage = (messageEvent)=>{\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                } else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(error, \"code\", result.error.code || null);\n                        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.defineReadOnly)(error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(()=>{\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n} //# sourceMappingURL=websocket-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ws.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/providers/lib.esm/ws.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocket: function() { return /* binding */ WS; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/_version.js\");\n\n\n\nlet WS = null;\ntry {\n    WS = WebSocket;\n    if (WS == null) {\n        throw new Error(\"inject please\");\n    }\n} catch (error) {\n    const logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    };\n}\n//export default WS;\n//module.exports = WS;\n //# sourceMappingURL=ws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvbGliLmVzbS93cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTtBQUNrQztBQUNWO0FBQ3JDLElBQUlFLEtBQUs7QUFDVCxJQUFJO0lBQ0FBLEtBQUtDO0lBQ0wsSUFBSUQsTUFBTSxNQUFNO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0FBQ0osRUFDQSxPQUFPQyxPQUFPO0lBQ1YsTUFBTUMsU0FBUyxJQUFJTix5REFBTUEsQ0FBQ0MsNkNBQU9BO0lBQ2pDQyxLQUFLO1FBQ0RJLE9BQU9DLFVBQVUsQ0FBQyxnREFBZ0RQLHlEQUFNQSxDQUFDUSxNQUFNLENBQUNDLHFCQUFxQixFQUFFO1lBQ25HQyxXQUFXO1FBQ2Y7SUFDSjtBQUNKO0FBQ0Esb0JBQW9CO0FBQ3BCLHNCQUFzQjtBQUNLLENBQzNCLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL2xpYi5lc20vd3MuanM/NGJjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xubGV0IFdTID0gbnVsbDtcbnRyeSB7XG4gICAgV1MgPSBXZWJTb2NrZXQ7XG4gICAgaWYgKFdTID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5qZWN0IHBsZWFzZVwiKTtcbiAgICB9XG59XG5jYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuICAgIFdTID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIldlYlNvY2tldHMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50XCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwibmV3IFdlYlNvY2tldCgpXCJcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8vZXhwb3J0IGRlZmF1bHQgV1M7XG4vL21vZHVsZS5leHBvcnRzID0gV1M7XG5leHBvcnQgeyBXUyBhcyBXZWJTb2NrZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdzLmpzLm1hcCJdLCJuYW1lcyI6WyJMb2dnZXIiLCJ2ZXJzaW9uIiwiV1MiLCJXZWJTb2NrZXQiLCJFcnJvciIsImVycm9yIiwibG9nZ2VyIiwidGhyb3dFcnJvciIsImVycm9ycyIsIlVOU1VQUE9SVEVEX09QRVJBVElPTiIsIm9wZXJhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/ws.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/_version.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/random/lib.esm/_version.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"random/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxlQUFlLENBQ3RDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmFuZG9tL2xpYi5lc20vX3ZlcnNpb24uanM/YWQ0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicmFuZG9tLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/random.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/random/lib.esm/random.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomBytes: function() { return /* binding */ randomBytes; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/_version.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\nfunction getGlobal() {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (true) {\n        return window;\n    }\n    if (typeof __webpack_require__.g !== \"undefined\") {\n        return __webpack_require__.g;\n    }\n    throw new Error(\"unable to locate global object\");\n}\n;\nconst anyGlobal = getGlobal();\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n    logger.warn(\"WARNING: Missing strong random number source\");\n    crypto = {\n        getRandomValues: function(buffer) {\n            return logger.throwError(\"no secure random source avaialble\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\nfunction randomBytes(length) {\n    if (length <= 0 || length > 1024 || length % 1 || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(result);\n}\n; //# sourceMappingURL=random.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vbGliLmVzbS9yYW5kb20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhO0FBQ21DO0FBQ0Q7QUFDVjtBQUNyQyxNQUFNRyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDakMsaURBQWlEO0FBQ2pELDREQUE0RDtBQUM1RCw4RkFBOEY7QUFDOUYsU0FBU0U7SUFDTCxJQUFJLE9BQU9DLFNBQVMsYUFBYTtRQUM3QixPQUFPQTtJQUNYO0lBQ0EsSUFBSSxJQUFrQixFQUFhO1FBQy9CLE9BQU9DO0lBQ1g7SUFDQSxJQUFJLE9BQU9DLHFCQUFNQSxLQUFLLGFBQWE7UUFDL0IsT0FBT0EscUJBQU1BO0lBQ2pCO0lBQ0EsTUFBTSxJQUFJQyxNQUFNO0FBQ3BCOztBQUVBLE1BQU1DLFlBQVlMO0FBQ2xCLElBQUlNLFNBQVNELFVBQVVDLE1BQU0sSUFBSUQsVUFBVUUsUUFBUTtBQUNuRCxJQUFJLENBQUNELFVBQVUsQ0FBQ0EsT0FBT0UsZUFBZSxFQUFFO0lBQ3BDVCxPQUFPVSxJQUFJLENBQUM7SUFDWkgsU0FBUztRQUNMRSxpQkFBaUIsU0FBVUUsTUFBTTtZQUM3QixPQUFPWCxPQUFPWSxVQUFVLENBQUMscUNBQXFDZCx5REFBTUEsQ0FBQ2UsTUFBTSxDQUFDQyxxQkFBcUIsRUFBRTtnQkFDL0ZDLFdBQVc7WUFDZjtRQUNKO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLFlBQVlDLE1BQU07SUFDOUIsSUFBSUEsVUFBVSxLQUFLQSxTQUFTLFFBQVNBLFNBQVMsS0FBTUEsVUFBVUEsUUFBUTtRQUNsRWpCLE9BQU9rQixrQkFBa0IsQ0FBQyxrQkFBa0IsVUFBVUQ7SUFDMUQ7SUFDQSxNQUFNRSxTQUFTLElBQUlDLFdBQVdIO0lBQzlCVixPQUFPRSxlQUFlLENBQUNVO0lBQ3ZCLE9BQU90Qiw4REFBUUEsQ0FBQ3NCO0FBQ3BCO0VBRUEsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vbGliLmVzbS9yYW5kb20uanM/MDI1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGFycmF5aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLyBEZWJ1Z2dpbmcgbGluZSBmb3IgdGVzdGluZyBicm93c2VyIGxpYiBpbiBub2RlXG4vL2NvbnN0IHdpbmRvdyA9IHsgY3J5cHRvOiB7IGdldFJhbmRvbVZhbHVlczogKCkgPT4geyB9IH0gfTtcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2dsb2JhbFRoaXNcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG47XG5jb25zdCBhbnlHbG9iYWwgPSBnZXRHbG9iYWwoKTtcbmxldCBjcnlwdG8gPSBhbnlHbG9iYWwuY3J5cHRvIHx8IGFueUdsb2JhbC5tc0NyeXB0bztcbmlmICghY3J5cHRvIHx8ICFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJXQVJOSU5HOiBNaXNzaW5nIHN0cm9uZyByYW5kb20gbnVtYmVyIHNvdXJjZVwiKTtcbiAgICBjcnlwdG8gPSB7XG4gICAgICAgIGdldFJhbmRvbVZhbHVlczogZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwibm8gc2VjdXJlIHJhbmRvbSBzb3VyY2UgYXZhaWFsYmxlXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNyeXB0by5nZXRSYW5kb21WYWx1ZXNcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgIGlmIChsZW5ndGggPD0gMCB8fCBsZW5ndGggPiAxMDI0IHx8IChsZW5ndGggJSAxKSB8fCBsZW5ndGggIT0gbGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aFwiLCBcImxlbmd0aFwiLCBsZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmVzdWx0KTtcbiAgICByZXR1cm4gYXJyYXlpZnkocmVzdWx0KTtcbn1cbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiXSwibmFtZXMiOlsiYXJyYXlpZnkiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZ2V0R2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsIkVycm9yIiwiYW55R2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJ3YXJuIiwiYnVmZmVyIiwidGhyb3dFcnJvciIsImVycm9ycyIsIlVOU1VQUE9SVEVEX09QRVJBVElPTiIsIm9wZXJhdGlvbiIsInJhbmRvbUJ5dGVzIiwibGVuZ3RoIiwidGhyb3dBcmd1bWVudEVycm9yIiwicmVzdWx0IiwiVWludDhBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/random.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/shuffle.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/random/lib.esm/shuffle.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shuffled: function() { return /* binding */ shuffled; }\n/* harmony export */ });\n\nfunction shuffled(array) {\n    array = array.slice();\n    for(let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n    return array;\n} //# sourceMappingURL=shuffle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vbGliLmVzbS9zaHVmZmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNOLFNBQVNBLFNBQVNDLEtBQUs7SUFDMUJBLFFBQVFBLE1BQU1DLEtBQUs7SUFDbkIsSUFBSyxJQUFJQyxJQUFJRixNQUFNRyxNQUFNLEdBQUcsR0FBR0QsSUFBSSxHQUFHQSxJQUFLO1FBQ3ZDLE1BQU1FLElBQUlDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFNTCxDQUFBQSxJQUFJO1FBQzFDLE1BQU1NLE1BQU1SLEtBQUssQ0FBQ0UsRUFBRTtRQUNwQkYsS0FBSyxDQUFDRSxFQUFFLEdBQUdGLEtBQUssQ0FBQ0ksRUFBRTtRQUNuQkosS0FBSyxDQUFDSSxFQUFFLEdBQUdJO0lBQ2Y7SUFDQSxPQUFPUjtBQUNYLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vbGliLmVzbS9zaHVmZmxlLmpzPzY0NDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZWQoYXJyYXkpIHtcbiAgICBhcnJheSA9IGFycmF5LnNsaWNlKCk7XG4gICAgZm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xuICAgICAgICBjb25zdCB0bXAgPSBhcnJheVtpXTtcbiAgICAgICAgYXJyYXlbaV0gPSBhcnJheVtqXTtcbiAgICAgICAgYXJyYXlbal0gPSB0bXA7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNodWZmbGUuanMubWFwIl0sIm5hbWVzIjpbInNodWZmbGVkIiwiYXJyYXkiLCJzbGljZSIsImkiLCJsZW5ndGgiLCJqIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG1wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/shuffle.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/rlp/lib.esm/_version.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"rlp/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ybHAvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxZQUFZLENBQ25DLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmxwL2xpYi5lc20vX3ZlcnNpb24uanM/ZjZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicmxwLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/rlp/lib.esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: function() { return /* binding */ decode; },\n/* harmony export */   encode: function() { return /* binding */ encode; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/_version.js\");\n\n//See: https://github.com/ethereum/wiki/wiki/RLP\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction arrayifyInteger(value) {\n    const result = [];\n    while(value){\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for(let i = 0; i < length; i++){\n        result = result * 256 + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    if (!(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isBytesLike)(object)) {\n        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n    }\n    const data = Array.prototype.slice.call((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nfunction encode(object) {\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(_encode(object));\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while(childOffset < offset + 1 + length){\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            logger.throwError(\"child data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n    }\n    return {\n        consumed: 1 + length,\n        result: result\n    };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        logger.throwError(\"data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data short segment too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data long segment too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    } else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    } else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            logger.throwError(\"data array too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return {\n            consumed: 1 + lengthLength + length,\n            result: result\n        };\n    } else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            logger.throwError(\"data too short\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data.slice(offset + 1, offset + 1 + length));\n        return {\n            consumed: 1 + length,\n            result: result\n        };\n    }\n    return {\n        consumed: 1,\n        result: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(data[offset])\n    };\n}\nfunction decode(data) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(data);\n    const decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/_version.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"sha2/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsYUFBYSxDQUNwQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NoYTIvbGliLmVzbS9fdmVyc2lvbi5qcz81OWE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJzaGEyLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/sha2.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeHmac: function() { return /* binding */ computeHmac; },\n/* harmony export */   ripemd160: function() { return /* binding */ ripemd160; },\n/* harmony export */   sha256: function() { return /* binding */ sha256; },\n/* harmony export */   sha512: function() { return /* binding */ sha512; }\n/* harmony export */ });\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/_version.js\");\n\n\n//const _ripemd160 = _hash.ripemd160;\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger(_version__WEBPACK_IMPORTED_MODULE_2__.version);\nfunction ripemd160(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().ripemd160().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction sha256(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().sha256().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction sha512(data) {\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().sha512().update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n}\nfunction computeHmac(algorithm, key, data) {\n    if (!_types__WEBPACK_IMPORTED_MODULE_4__.SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash_js__WEBPACK_IMPORTED_MODULE_0___default().hmac((hash_js__WEBPACK_IMPORTED_MODULE_0___default())[algorithm], (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(key)).update((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(data)).digest(\"hex\");\n} //# sourceMappingURL=sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vc2hhMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWE7QUFDYztBQUMzQixxQ0FBcUM7QUFDVztBQUNIO0FBQ0U7QUFDVjtBQUNyQyxNQUFNSyxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDMUIsU0FBU0UsVUFBVUMsSUFBSTtJQUMxQixPQUFPLE9BQVFQLHdEQUFjLEdBQUdRLE1BQU0sQ0FBQ1AsOERBQVFBLENBQUNNLE9BQU9FLE1BQU0sQ0FBQztBQUNsRTtBQUNPLFNBQVNDLE9BQU9ILElBQUk7SUFDdkIsT0FBTyxPQUFRUCxxREFBVyxHQUFHUSxNQUFNLENBQUNQLDhEQUFRQSxDQUFDTSxPQUFPRSxNQUFNLENBQUM7QUFDL0Q7QUFDTyxTQUFTRSxPQUFPSixJQUFJO0lBQ3ZCLE9BQU8sT0FBUVAscURBQVcsR0FBR1EsTUFBTSxDQUFDUCw4REFBUUEsQ0FBQ00sT0FBT0UsTUFBTSxDQUFDO0FBQy9EO0FBQ08sU0FBU0csWUFBWUMsU0FBUyxFQUFFQyxHQUFHLEVBQUVQLElBQUk7SUFDNUMsSUFBSSxDQUFDTCxzREFBa0IsQ0FBQ1csVUFBVSxFQUFFO1FBQ2hDUixPQUFPVSxVQUFVLENBQUMsMkJBQTJCRixXQUFXVix5REFBTUEsQ0FBQ2EsTUFBTSxDQUFDQyxxQkFBcUIsRUFBRTtZQUN6RkMsV0FBVztZQUNYTCxXQUFXQTtRQUNmO0lBQ0o7SUFDQSxPQUFPLE9BQU9iLG1EQUFTLENBQUNBLGdEQUFJLENBQUNhLFVBQVUsRUFBRVosOERBQVFBLENBQUNhLE1BQU1OLE1BQU0sQ0FBQ1AsOERBQVFBLENBQUNNLE9BQU9FLE1BQU0sQ0FBQztBQUMxRixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2hhMi9saWIuZXNtL3NoYTIuanM/OTY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBoYXNoIGZyb20gXCJoYXNoLmpzXCI7XG4vL2NvbnN0IF9yaXBlbWQxNjAgPSBfaGFzaC5yaXBlbWQxNjA7XG5pbXBvcnQgeyBhcnJheWlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgU3VwcG9ydGVkQWxnb3JpdGhtIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcbmV4cG9ydCBmdW5jdGlvbiByaXBlbWQxNjAoZGF0YSkge1xuICAgIHJldHVybiBcIjB4XCIgKyAoaGFzaC5yaXBlbWQxNjAoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgICByZXR1cm4gXCIweFwiICsgKGhhc2guc2hhMjU2KCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNoYTUxMihkYXRhKSB7XG4gICAgcmV0dXJuIFwiMHhcIiArIChoYXNoLnNoYTUxMigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlSG1hYyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xuICAgIGlmICghU3VwcG9ydGVkQWxnb3JpdGhtW2FsZ29yaXRobV0pIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gXCIgKyBhbGdvcml0aG0sIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiaG1hY1wiLFxuICAgICAgICAgICAgYWxnb3JpdGhtOiBhbGdvcml0aG1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBcIjB4XCIgKyBoYXNoLmhtYWMoaGFzaFthbGdvcml0aG1dLCBhcnJheWlmeShrZXkpKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTIuanMubWFwIl0sIm5hbWVzIjpbImhhc2giLCJhcnJheWlmeSIsIlN1cHBvcnRlZEFsZ29yaXRobSIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJyaXBlbWQxNjAiLCJkYXRhIiwidXBkYXRlIiwiZGlnZXN0Iiwic2hhMjU2Iiwic2hhNTEyIiwiY29tcHV0ZUhtYWMiLCJhbGdvcml0aG0iLCJrZXkiLCJ0aHJvd0Vycm9yIiwiZXJyb3JzIiwiVU5TVVBQT1JURURfT1BFUkFUSU9OIiwib3BlcmF0aW9uIiwiaG1hYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethersproject/sha2/lib.esm/types.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupportedAlgorithm: function() { return /* binding */ SupportedAlgorithm; }\n/* harmony export */ });\nvar SupportedAlgorithm;\n(function(SupportedAlgorithm) {\n    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm || (SupportedAlgorithm = {}));\n; //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUlBLG1CQUFtQjtBQUM3QixVQUFVQSxrQkFBa0I7SUFDekJBLGtCQUFrQixDQUFDLFNBQVMsR0FBRztJQUMvQkEsa0JBQWtCLENBQUMsU0FBUyxHQUFHO0FBQ25DLEdBQUdBLHNCQUF1QkEsQ0FBQUEscUJBQXFCLENBQUM7RUFFaEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaGEyL2xpYi5lc20vdHlwZXMuanM/MDc5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFN1cHBvcnRlZEFsZ29yaXRobTtcbihmdW5jdGlvbiAoU3VwcG9ydGVkQWxnb3JpdGhtKSB7XG4gICAgU3VwcG9ydGVkQWxnb3JpdGhtW1wic2hhMjU2XCJdID0gXCJzaGEyNTZcIjtcbiAgICBTdXBwb3J0ZWRBbGdvcml0aG1bXCJzaGE1MTJcIl0gPSBcInNoYTUxMlwiO1xufSkoU3VwcG9ydGVkQWxnb3JpdGhtIHx8IChTdXBwb3J0ZWRBbGdvcml0aG0gPSB7fSkpO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIlN1cHBvcnRlZEFsZ29yaXRobSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/_version.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"signing-key/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleS9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLG9CQUFvQixDQUMzQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vX3ZlcnNpb24uanM/OGMwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwic2lnbmluZy1rZXkvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EC: function() { return /* binding */ EC$1; }\n/* harmony export */ });\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(app-pages-browser)/./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hash.js */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash.js\");\n/* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  true ? window : 0;\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nfunction createCommonjsModule(fn, basedir, module) {\n    return module = {\n        path: basedir,\n        exports: {},\n        require: function(path, base) {\n            return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n        }\n    }, fn(module, module.exports), module.exports;\n}\nfunction getDefaultExportFromNamespaceIfPresent(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") ? n[\"default\"] : n;\n}\nfunction getDefaultExportFromNamespaceIfNotNamed(n) {\n    return n && Object.prototype.hasOwnProperty.call(n, \"default\") && Object.keys(n).length === 1 ? n[\"default\"] : n;\n}\nfunction getAugmentedNamespace(n) {\n    if (n.__esModule) return n;\n    var a = Object.defineProperty({}, \"__esModule\", {\n        value: true\n    });\n    Object.keys(n).forEach(function(k) {\n        var d = Object.getOwnPropertyDescriptor(n, k);\n        Object.defineProperty(a, k, d.get ? d : {\n            enumerable: true,\n            get: function() {\n                return n[k];\n            }\n        });\n    });\n    return a;\n}\nfunction commonjsRequire() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\nvar minimalisticAssert = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\nvar utils_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n        if (typeof msg !== \"string\") {\n            for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n            return res;\n        }\n        if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        } else {\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                var hi = c >> 8;\n                var lo = c & 0xff;\n                if (hi) res.push(hi, lo);\n                else res.push(lo);\n            }\n        }\n        return res;\n    }\n    utils.toArray = toArray;\n    function zero2(word) {\n        if (word.length === 1) return \"0\" + word;\n        else return word;\n    }\n    utils.zero2 = zero2;\n    function toHex(msg) {\n        var res = \"\";\n        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n        return res;\n    }\n    utils.toHex = toHex;\n    utils.encode = function encode(arr, enc) {\n        if (enc === \"hex\") return toHex(arr);\n        else return arr;\n    };\n});\nvar utils_1$1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode;\n    // Represent num in a w-NAF form\n    function getNAF(num, w, bits) {\n        var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n        naf.fill(0);\n        var ws = 1 << w + 1;\n        var k = num.clone();\n        for(var i = 0; i < naf.length; i++){\n            var z;\n            var mod = k.andln(ws - 1);\n            if (k.isOdd()) {\n                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;\n                else z = mod;\n                k.isubn(z);\n            } else {\n                z = 0;\n            }\n            naf[i] = z;\n            k.iushrn(1);\n        }\n        return naf;\n    }\n    utils.getNAF = getNAF;\n    // Represent k1, k2 in a Joint Sparse Form\n    function getJSF(k1, k2) {\n        var jsf = [\n            [],\n            []\n        ];\n        k1 = k1.clone();\n        k2 = k2.clone();\n        var d1 = 0;\n        var d2 = 0;\n        var m8;\n        while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){\n            // First phase\n            var m14 = k1.andln(3) + d1 & 3;\n            var m24 = k2.andln(3) + d2 & 3;\n            if (m14 === 3) m14 = -1;\n            if (m24 === 3) m24 = -1;\n            var u1;\n            if ((m14 & 1) === 0) {\n                u1 = 0;\n            } else {\n                m8 = k1.andln(7) + d1 & 7;\n                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;\n                else u1 = m14;\n            }\n            jsf[0].push(u1);\n            var u2;\n            if ((m24 & 1) === 0) {\n                u2 = 0;\n            } else {\n                m8 = k2.andln(7) + d2 & 7;\n                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;\n                else u2 = m24;\n            }\n            jsf[1].push(u2);\n            // Second phase\n            if (2 * d1 === u1 + 1) d1 = 1 - d1;\n            if (2 * d2 === u2 + 1) d2 = 1 - d2;\n            k1.iushrn(1);\n            k2.iushrn(1);\n        }\n        return jsf;\n    }\n    utils.getJSF = getJSF;\n    function cachedProperty(obj, name, computer) {\n        var key = \"_\" + name;\n        obj.prototype[name] = function cachedProperty() {\n            return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n        };\n    }\n    utils.cachedProperty = cachedProperty;\n    function parseBytes(bytes) {\n        return typeof bytes === \"string\" ? utils.toArray(bytes, \"hex\") : bytes;\n    }\n    utils.parseBytes = parseBytes;\n    function intFromLE(bytes) {\n        return new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(bytes, \"hex\", \"le\");\n    }\n    utils.intFromLE = intFromLE;\n});\n\"use strict\";\nvar getNAF = utils_1$1.getNAF;\nvar getJSF = utils_1$1.getJSF;\nvar assert$1 = utils_1$1.assert;\nfunction BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.p, 16);\n    // Use Montgomery, when there is no fast reduction for the prime\n    this.red = conf.prime ? bn_js__WEBPACK_IMPORTED_MODULE_0___default().red(conf.prime) : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(this.p);\n    // Useful for many curves\n    this.zero = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0).toRed(this.red);\n    this.one = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1).toRed(this.red);\n    this.two = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(this.red);\n    // Curve configuration, optional\n    this.n = conf.n && new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n    // Temporary arrays\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0;\n    // Generalized Greg Maxwell's trick\n    var adjustCount = this.n && this.p.div(this.n);\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n        this.redN = null;\n    } else {\n        this._maxwellTrick = true;\n        this.redN = this.n.toRed(this.red);\n    }\n}\n_c = BaseCurve;\nvar base = BaseCurve;\nBaseCurve.prototype.point = function point() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype.validate = function validate() {\n    throw new Error(\"Not implemented\");\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$1(p.precomputed);\n    var doubles = p._getDoubles();\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3;\n    // Translate into more windowed form\n    var repr = [];\n    var j;\n    var nafW;\n    for(j = 0; j < naf.length; j += doubles.step){\n        nafW = 0;\n        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];\n        repr.push(nafW);\n    }\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n    for(var i = I; i > 0; i--){\n        for(j = 0; j < repr.length; j++){\n            nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);\n            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n        }\n        a = a.add(b);\n    }\n    return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4;\n    // Precompute window\n    var nafPoints = p._getNAFPoints(w);\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points;\n    // Get NAF form\n    var naf = getNAF(k, w, this._bitLength);\n    // Add `this`*(N+1) for every w-NAF index\n    var acc = this.jpoint(null, null, null);\n    for(var i = naf.length - 1; i >= 0; i--){\n        // Count zeroes\n        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;\n        if (i >= 0) l++;\n        acc = acc.dblp(l);\n        if (i < 0) break;\n        var z = naf[i];\n        assert$1(z !== 0);\n        if (p.type === \"affine\") {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);\n            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n        } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);\n            else acc = acc.add(wnd[-z - 1 >> 1].neg());\n        }\n    }\n    return p.type === \"affine\" ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3;\n    // Fill all arrays\n    var max = 0;\n    var i;\n    var j;\n    var p;\n    for(i = 0; i < len; i++){\n        p = points[i];\n        var nafPoints = p._getNAFPoints(defW);\n        wndWidth[i] = nafPoints.wnd;\n        wnd[i] = nafPoints.points;\n    }\n    // Comb small window NAFs\n    for(i = len - 1; i >= 1; i -= 2){\n        var a = i - 1;\n        var b = i;\n        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n        }\n        var comb = [\n            points[a],\n            /* 1 */ null,\n            /* 3 */ null,\n            /* 5 */ points[b]\n        ];\n        // Try to avoid Projective points, if possible\n        if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n        } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n        }\n        var index = [\n            -3,\n            /* -1 -1 */ -1,\n            /* -1 0 */ -5,\n            /* -1 1 */ -7,\n            /* 0 -1 */ 0,\n            /* 0 0 */ 7,\n            /* 0 1 */ 5,\n            /* 1 -1 */ 1,\n            /* 1 0 */ 3\n        ];\n        var jsf = getJSF(coeffs[a], coeffs[b]);\n        max = Math.max(jsf[0].length, max);\n        naf[a] = new Array(max);\n        naf[b] = new Array(max);\n        for(j = 0; j < max; j++){\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n        }\n    }\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n    for(i = max; i >= 0; i--){\n        var k = 0;\n        while(i >= 0){\n            var zero = true;\n            for(j = 0; j < len; j++){\n                tmp[j] = naf[j][i] | 0;\n                if (tmp[j] !== 0) zero = false;\n            }\n            if (!zero) break;\n            k++;\n            i--;\n        }\n        if (i >= 0) k++;\n        acc = acc.dblp(k);\n        if (i < 0) break;\n        for(j = 0; j < len; j++){\n            var z = tmp[j];\n            p;\n            if (z === 0) continue;\n            else if (z > 0) p = wnd[j][z - 1 >> 1];\n            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === \"affine\") acc = acc.mixedAdd(p);\n            else acc = acc.add(p);\n        }\n    }\n    // Zeroify references\n    for(i = 0; i < len; i++)wnd[i] = null;\n    if (jacobianResult) return acc;\n    else return acc.toP();\n};\nfunction BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n}\n_c1 = BasePoint;\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.eq = function eq() {\n    throw new Error(\"Not implemented\");\n};\nBasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n};\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength();\n    // uncompressed, hybrid-odd, hybrid-even\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n        if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);\n        else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);\n        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n        return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n    throw new Error(\"Unknown point format\");\n};\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n};\nBasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray(\"be\", len);\n    if (compact) return [\n        this.getY().isEven() ? 0x02 : 0x03\n    ].concat(x);\n    return [\n        0x04\n    ].concat(x, this.getY().toArray(\"be\", len));\n};\nBasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n};\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [\n        this\n    ];\n    var acc = this;\n    for(var i = 0; i < power; i += step){\n        for(var j = 0; j < step; j++)acc = acc.dbl();\n        doubles.push(acc);\n    }\n    return {\n        step: step,\n        points: doubles\n    };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [\n        this\n    ];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);\n    return {\n        wnd: wnd,\n        points: res\n    };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n    for(var i = 0; i < k; i++)r = r.dbl();\n    return r;\n};\nvar inherits_browser = createCommonjsModule(function(module) {\n    if (typeof Object.create === \"function\") {\n        // implementation from standard node.js 'util' module\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                ctor.prototype = Object.create(superCtor.prototype, {\n                    constructor: {\n                        value: ctor,\n                        enumerable: false,\n                        writable: true,\n                        configurable: true\n                    }\n                });\n            }\n        };\n    } else {\n        // old school shim for old browsers\n        module.exports = function inherits(ctor, superCtor) {\n            if (superCtor) {\n                ctor.super_ = superCtor;\n                var TempCtor = function() {};\n                TempCtor.prototype = superCtor.prototype;\n                ctor.prototype = new TempCtor();\n                ctor.prototype.constructor = ctor;\n            }\n        };\n    }\n});\n\"use strict\";\nvar assert$2 = utils_1$1.assert;\nfunction ShortCurve(conf) {\n    base.call(this, \"short\", conf);\n    this.a = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.a, 16).toRed(this.red);\n    this.b = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n    // If the curve is endomorphic, precalculate beta and lambda\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n}\n_c2 = ShortCurve;\ninherits_browser(ShortCurve, base);\nvar short_1 = ShortCurve;\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;\n    // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n    var beta;\n    var lambda;\n    if (conf.beta) {\n        beta = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.beta, 16).toRed(this.red);\n    } else {\n        var betas = this._getEndoRoots(this.p);\n        // Choose the smallest beta\n        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n        beta = beta.toRed(this.red);\n    }\n    if (conf.lambda) {\n        lambda = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(conf.lambda, 16);\n    } else {\n        // Choose the lambda that is matching selected beta\n        var lambdas = this._getEndoRoots(this.n);\n        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n        } else {\n            lambda = lambdas[1];\n            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n        }\n    }\n    // Get basis vectors, used for balanced length-two representation\n    var basis;\n    if (conf.basis) {\n        basis = conf.basis.map(function(vec) {\n            return {\n                a: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.a, 16),\n                b: new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(vec.b, 16)\n            };\n        });\n    } else {\n        basis = this._getEndoBasis(lambda);\n    }\n    return {\n        beta: beta,\n        lambda: lambda,\n        basis: basis\n    };\n};\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn_js__WEBPACK_IMPORTED_MODULE_0___default().mont(num);\n    var tinv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [\n        l1,\n        l2\n    ];\n};\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n    // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    var y1 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var x2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    var y2 = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1);\n    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n    var a0;\n    var b0;\n    // First vector\n    var a1;\n    var b1;\n    // Second vector\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n    while(u.cmpn(0) !== 0){\n        var q = v.div(u);\n        r = v.sub(q.mul(u));\n        x = x2.sub(q.mul(x1));\n        var y = y2.sub(q.mul(y1));\n        if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n        } else if (a1 && ++i === 2) {\n            break;\n        }\n        prevR = r;\n        v = u;\n        u = r;\n        x2 = x1;\n        x1 = x;\n        y2 = y1;\n        y1 = y;\n    }\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n    if (len2.cmp(len1) >= 0) {\n        a2 = a0;\n        b2 = b0;\n    }\n    // Normalize signs\n    if (a1.negative) {\n        a1 = a1.neg();\n        b1 = b1.neg();\n    }\n    if (a2.negative) {\n        a2 = a2.neg();\n        b2 = b2.neg();\n    }\n    return [\n        {\n            a: a1,\n            b: b1\n        },\n        {\n            a: a2,\n            b: b2\n        }\n    ];\n};\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b);\n    // Calculate answer\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n        k1: k1,\n        k2: k2\n    };\n};\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n};\nShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\nShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n    for(var i = 0; i < points.length; i++){\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n        if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n        }\n        if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n        }\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n    }\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n    // Clean-up references to points and coefficients\n    for(var j = 0; j < i * 2; j++){\n        npoints[j] = null;\n        ncoeffs[j] = null;\n    }\n    return res;\n};\nfunction Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, \"affine\");\n    if (x === null && y === null) {\n        this.x = null;\n        this.y = null;\n        this.inf = true;\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        // Force redgomery representation when loading from JSON\n        if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n        }\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        this.inf = false;\n    }\n}\n_c3 = Point;\ninherits_browser(Point, base.BasePoint);\nShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n};\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n};\nPoint.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n    if (pre) {\n        var curve = this.curve;\n        var endoMul = function(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n        };\n        pre.beta = beta;\n        beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(endoMul)\n            }\n        };\n    }\n    return beta;\n};\nPoint.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [\n        this.x,\n        this.y\n    ];\n    return [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ];\n};\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === \"string\") obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n    function obj2point(obj) {\n        return curve.point(obj[0], obj[1], red);\n    }\n    var pre = obj[2];\n    res.precomputed = {\n        beta: null,\n        doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [\n                res\n            ].concat(pre.doubles.points.map(obj2point))\n        },\n        naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [\n                res\n            ].concat(pre.naf.points.map(obj2point))\n        }\n    };\n    return res;\n};\nPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC Point Infinity>\";\n    return \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n};\nPoint.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n};\nPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p;\n    // P + O = P\n    if (p.inf) return this;\n    // P + P = 2P\n    if (this.eq(p)) return this.dbl();\n    // P + (-P) = O\n    if (this.neg().eq(p)) return this.curve.point(null, null);\n    // P + Q = O\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.dbl = function dbl() {\n    if (this.inf) return this;\n    // 2P = O\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n};\nPoint.prototype.getX = function getX() {\n    return this.x.fromRed();\n};\nPoint.prototype.getY = function getY() {\n    return this.y.fromRed();\n};\nPoint.prototype.mul = function mul(k) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, 16);\n    if (this.isInfinity()) return this;\n    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);\n    else if (this.curve.endo) return this.curve._endoWnafMulAdd([\n        this\n    ], [\n        k\n    ]);\n    else return this.curve._wnafMul(this, k);\n};\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [\n        this,\n        p2\n    ];\n    var coeffs = [\n        k1,\n        k2\n    ];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);\n    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\nPoint.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\nPoint.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n    if (_precompute && this.precomputed) {\n        var pre = this.precomputed;\n        var negate = function(p) {\n            return p.neg();\n        };\n        res.precomputed = {\n            naf: pre.naf && {\n                wnd: pre.naf.wnd,\n                points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n                step: pre.doubles.step,\n                points: pre.doubles.points.map(negate)\n            }\n        };\n    }\n    return res;\n};\nPoint.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n};\nfunction JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, \"jacobian\");\n    if (x === null && y === null && z === null) {\n        this.x = this.curve.one;\n        this.y = this.curve.one;\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(0);\n    } else {\n        this.x = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(x, 16);\n        this.y = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(y, 16);\n        this.z = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(z, 16);\n    }\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n}\n_c4 = JPoint;\ninherits_browser(JPoint, base.BasePoint);\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n};\nJPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n};\nJPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\nJPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p;\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 12M + 4S + 7A\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ();\n    // P + O = P\n    if (p.isInfinity()) return this;\n    // 8M + 3S + 7A\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n    if (h.cmpn(0) === 0) {\n        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);\n        else return this.dbl();\n    }\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n    var i;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var r = this;\n        for(i = 0; i < pow; i++)r = r.dbl();\n        return r;\n    }\n    // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    // Reuse results\n    var jyd = jy.redAdd(jy);\n    for(i = 0; i < pow; i++){\n        var jx2 = jx.redSqr();\n        var jyd2 = jyd.redSqr();\n        var jyd4 = jyd2.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var t1 = jx.redMul(jyd2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var dny = c.redMul(t2);\n        dny = dny.redIAdd(dny).redISub(jyd4);\n        var nz = jyd.redMul(jz);\n        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n        jx = nx;\n        jz = nz;\n        jyd = dny;\n    }\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\nJPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();\n    else if (this.curve.threeA) return this._threeDbl();\n    else return this._dbl();\n};\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 14A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a; a = 0\n        var m = xx.redAdd(xx).redIAdd(xx);\n        // T = M ^ 2 - 2*S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2*Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n        //     #doubling-dbl-2009-l\n        // 2M + 5S + 13A\n        // A = X1^2\n        var a = this.x.redSqr();\n        // B = Y1^2\n        var b = this.y.redSqr();\n        // C = B^2\n        var c = b.redSqr();\n        // D = 2 * ((X1 + B)^2 - A - C)\n        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n        d = d.redIAdd(d);\n        // E = 3 * A\n        var e = a.redAdd(a).redIAdd(a);\n        // F = E^2\n        var f = e.redSqr();\n        // 8 * C\n        var c8 = c.redIAdd(c);\n        c8 = c8.redIAdd(c8);\n        c8 = c8.redIAdd(c8);\n        // X3 = F - 2 * D\n        nx = f.redISub(d).redISub(d);\n        // Y3 = E * (D - X3) - 8 * C\n        ny = e.redMul(d.redISub(nx)).redISub(c8);\n        // Z3 = 2 * Y1 * Z1\n        nz = this.y.redMul(this.z);\n        nz = nz.redIAdd(nz);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz;\n    // Z = 1\n    if (this.zOne) {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n        //     #doubling-mdbl-2007-bl\n        // 1M + 5S + 15A\n        // XX = X1^2\n        var xx = this.x.redSqr();\n        // YY = Y1^2\n        var yy = this.y.redSqr();\n        // YYYY = YY^2\n        var yyyy = yy.redSqr();\n        // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        s = s.redIAdd(s);\n        // M = 3 * XX + a\n        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n        // T = M^2 - 2 * S\n        var t = m.redSqr().redISub(s).redISub(s);\n        // X3 = T\n        nx = t;\n        // Y3 = M * (S - T) - 8 * YYYY\n        var yyyy8 = yyyy.redIAdd(yyyy);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        yyyy8 = yyyy8.redIAdd(yyyy8);\n        ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n        // Z3 = 2 * Y1\n        nz = this.y.redAdd(this.y);\n    } else {\n        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n        // 3M + 5S\n        // delta = Z1^2\n        var delta = this.z.redSqr();\n        // gamma = Y1^2\n        var gamma = this.y.redSqr();\n        // beta = X1 * gamma\n        var beta = this.x.redMul(gamma);\n        // alpha = 3 * (X1 - delta) * (X1 + delta)\n        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n        alpha = alpha.redAdd(alpha).redIAdd(alpha);\n        // X3 = alpha^2 - 8 * beta\n        var beta4 = beta.redIAdd(beta);\n        beta4 = beta4.redIAdd(beta4);\n        var beta8 = beta4.redAdd(beta4);\n        nx = alpha.redSqr().redISub(beta8);\n        // Z3 = (Y1 + Z1)^2 - gamma - delta\n        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n        var ggamma8 = gamma.redSqr();\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ggamma8 = ggamma8.redIAdd(ggamma8);\n        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a;\n    // 4M + 6S + 10A\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // ZZ = Z1^2\n    var zz = this.z.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // M = 3 * XX + a * ZZ2; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // MM = M^2\n    var mm = m.redSqr();\n    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm);\n    // EE = E^2\n    var ee = e.redSqr();\n    // T = 16*YYYY\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    // U = (M + E)^2 - MM - EE - T\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n    // X3 = 4 * (X1 * EE - 4 * YY * U)\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx);\n    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    // Z3 = (Z1 + E)^2 - ZZ - EE\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n};\nJPoint.prototype.mul = function mul(k, kbase) {\n    k = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(k, kbase);\n    return this.curve._wnafMul(this, k);\n};\nJPoint.prototype.eq = function eq(p) {\n    if (p.type === \"affine\") return this.eq(p.toJ());\n    if (this === p) return true;\n    // x1 * z2^2 == x2 * z1^2\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;\n    // y1 * z2^3 == y2 * z1^3\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\nJPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n    for(;;){\n        xc.iadd(this.curve.n);\n        if (xc.cmp(this.curve.p) >= 0) return false;\n        rx.redIAdd(t);\n        if (this.x.cmp(rx) === 0) return true;\n    }\n};\nJPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return \"<EC JPoint Infinity>\";\n    return \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n};\nJPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n};\nvar curve_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = /*RicMoo:ethers:require(./mont)*/ null;\n    curve.edwards = /*RicMoo:ethers:require(./edwards)*/ null;\n});\nvar curves_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var curves = exports;\n    var assert = utils_1$1.assert;\n    function PresetCurve(options) {\n        if (options.type === \"short\") this.curve = new curve_1.short(options);\n        else if (options.type === \"edwards\") this.curve = new curve_1.edwards(options);\n        else this.curve = new curve_1.mont(options);\n        this.g = this.curve.g;\n        this.n = this.curve.n;\n        this.hash = options.hash;\n        assert(this.g.validate(), \"Invalid curve\");\n        assert(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    curves.PresetCurve = PresetCurve;\n    function defineCurve(name, options) {\n        Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            get: function() {\n                var curve = new PresetCurve(options);\n                Object.defineProperty(curves, name, {\n                    configurable: true,\n                    enumerable: true,\n                    value: curve\n                });\n                return curve;\n            }\n        });\n    }\n    defineCurve(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    });\n    defineCurve(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    });\n    defineCurve(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    });\n    defineCurve(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f \" + \"5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 \" + \"f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha384),\n        gRed: false,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 \" + \"5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 \" + \"0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    });\n    defineCurve(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b \" + \"99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd \" + \"3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff \" + \"ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 \" + \"f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha512),\n        gRed: false,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 \" + \"053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 \" + \"a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 \" + \"579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 \" + \"3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    });\n    defineCurve(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"9\"\n        ]\n    });\n    defineCurve(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        // -121665 * (121666^(-1)) (mod P)\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        gRed: false,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            // 4/5\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var pre;\n    try {\n        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();\n    } catch (e) {\n        pre = undefined;\n    }\n    defineCurve(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: (hash_js__WEBPACK_IMPORTED_MODULE_1___default().sha256),\n        // Precomputed endomorphism\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: false,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            pre\n        ]\n    });\n});\n\"use strict\";\nfunction HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || \"hex\");\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || \"hex\");\n    var pers = utils_1.toArray(options.pers, options.persEnc || \"hex\");\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._init(entropy, nonce, pers);\n}\n_c5 = HmacDRBG;\nvar hmacDrbg = HmacDRBG;\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n    for(var i = 0; i < this.V.length; i++){\n        this.K[i] = 0x00;\n        this.V[i] = 0x01;\n    }\n    this._update(seed);\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n};\nHmacDRBG.prototype._hmac = function hmac() {\n    return new (hash_js__WEBPACK_IMPORTED_MODULE_1___default().hmac)(this.hash, this.K);\n};\nHmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([\n        0x00\n    ]);\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([\n        0x01\n    ]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n};\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== \"string\") {\n        addEnc = add;\n        add = entropyEnc;\n        entropyEnc = null;\n    }\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\");\n    this._update(entropy.concat(add || []));\n    this._reseed = 1;\n};\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    // Optional encoding\n    if (typeof enc !== \"string\") {\n        addEnc = add;\n        add = enc;\n        enc = null;\n    }\n    // Optional additional data\n    if (add) {\n        add = utils_1.toArray(add, addEnc || \"hex\");\n        this._update(add);\n    }\n    var temp = [];\n    while(temp.length < len){\n        this.V = this._hmac().update(this.V).digest();\n        temp = temp.concat(this.V);\n    }\n    var res = temp.slice(0, len);\n    this._update(add);\n    this._reseed++;\n    return utils_1.encode(res, enc);\n};\n\"use strict\";\nvar assert$3 = utils_1$1.assert;\nfunction KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null;\n    // KeyPair(ec, { priv: ..., pub: ... })\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n}\n_c6 = KeyPair;\nvar key = KeyPair;\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n        pub: pub,\n        pubEnc: enc\n    });\n};\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n        priv: priv,\n        privEnc: enc\n    });\n};\nKeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n        result: false,\n        reason: \"Invalid public key\"\n    };\n    if (!pub.validate()) return {\n        result: false,\n        reason: \"Public key is not a point\"\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n        result: false,\n        reason: \"Public key * N != O\"\n    };\n    return {\n        result: true,\n        reason: null\n    };\n};\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === \"string\") {\n        enc = compact;\n        compact = null;\n    }\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n};\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === \"hex\") return this.priv.toString(16, 2);\n    else return this.priv;\n};\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(key, enc || 16);\n    // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n    this.priv = this.priv.umod(this.ec.curve.n);\n};\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n        // Montgomery points only have an `x` coordinate.\n        // Weierstrass/Edwards points on the other hand have both `x` and\n        // `y` coordinates.\n        if (this.ec.curve.type === \"mont\") {\n            assert$3(key.x, \"Need x coordinate\");\n        } else if (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") {\n            assert$3(key.x && key.y, \"Need both x and y coordinate\");\n        }\n        this.pub = this.ec.curve.point(key.x, key.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(key, enc);\n};\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n    if (!pub.validate()) {\n        assert$3(pub.validate(), \"public point not validated\");\n    }\n    return pub.mul(this.priv).getX();\n};\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n};\nKeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n};\nKeyPair.prototype.inspect = function inspect() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\n\"use strict\";\nvar assert$4 = utils_1$1.assert;\nfunction Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$4(options.r && options.s, \"Signature without r or s\");\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.r, 16);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;\n    else this.recoveryParam = options.recoveryParam;\n}\n_c7 = Signature;\nvar signature = Signature;\nfunction Position() {\n    this.place = 0;\n}\n_c8 = Position;\nfunction getLength(buf, p) {\n    var initial = buf[p.place++];\n    if (!(initial & 0x80)) {\n        return initial;\n    }\n    var octetLen = initial & 0xf;\n    // Indefinite length or overflow\n    if (octetLen === 0 || octetLen > 4) {\n        return false;\n    }\n    var val = 0;\n    for(var i = 0, off = p.place; i < octetLen; i++, off++){\n        val <<= 8;\n        val |= buf[off];\n        val >>>= 0;\n    }\n    // Leading zeroes\n    if (val <= 0x7f) {\n        return false;\n    }\n    p.place = off;\n    return val;\n}\nfunction rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len){\n        i++;\n    }\n    if (i === 0) {\n        return buf;\n    }\n    return buf.slice(i);\n}\nSignature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n    if (data[p.place++] !== 0x30) {\n        return false;\n    }\n    var len = getLength(data, p);\n    if (len === false) {\n        return false;\n    }\n    if (len + p.place !== data.length) {\n        return false;\n    }\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var rlen = getLength(data, p);\n    if (rlen === false) {\n        return false;\n    }\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n    if (data[p.place++] !== 0x02) {\n        return false;\n    }\n    var slen = getLength(data, p);\n    if (slen === false) {\n        return false;\n    }\n    if (data.length !== slen + p.place) {\n        return false;\n    }\n    var s = data.slice(p.place, slen + p.place);\n    if (r[0] === 0) {\n        if (r[1] & 0x80) {\n            r = r.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    if (s[0] === 0) {\n        if (s[1] & 0x80) {\n            s = s.slice(1);\n        } else {\n            // Leading zeroes\n            return false;\n        }\n    }\n    this.r = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(r);\n    this.s = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(s);\n    this.recoveryParam = null;\n    return true;\n};\nfunction constructLength(arr, len) {\n    if (len < 0x80) {\n        arr.push(len);\n        return;\n    }\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n    while(--octets){\n        arr.push(len >>> (octets << 3) & 0xff);\n    }\n    arr.push(len);\n}\nSignature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray();\n    // Pad values\n    if (r[0] & 0x80) r = [\n        0\n    ].concat(r);\n    // Pad values\n    if (s[0] & 0x80) s = [\n        0\n    ].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n    while(!s[0] && !(s[1] & 0x80)){\n        s = s.slice(1);\n    }\n    var arr = [\n        0x02\n    ];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [\n        0x30\n    ];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n};\n\"use strict\";\nvar rand = /*RicMoo:ethers:require(brorand)*/ function() {\n    throw new Error(\"unsupported\");\n};\nvar assert$5 = utils_1$1.assert;\nfunction EC(options) {\n    if (!(this instanceof EC)) return new EC(options);\n    // Shortcut `elliptic.ec(curve-name)`\n    if (typeof options === \"string\") {\n        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), \"Unknown curve \" + options);\n        options = curves_1[options];\n    }\n    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n    if (options instanceof curves_1.PresetCurve) options = {\n        curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g;\n    // Point on curve\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1);\n    // Hash for function for DRBG\n    this.hash = options.hash || options.curve.hash;\n}\n_c9 = EC;\nvar ec = EC;\nEC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n};\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n};\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n};\nEC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {};\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\",\n        entropy: options.entropy || rand(this.hash.hmacStrength),\n        entropyEnc: options.entropy && options.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(2));\n    for(;;){\n        var priv = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(bytes));\n        if (priv.cmp(ns2) > 0) continue;\n        priv.iaddn(1);\n        return this.keyFromPrivate(priv);\n    }\n};\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);\n    else return msg;\n};\nEC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === \"object\") {\n        options = enc;\n        enc = null;\n    }\n    if (!options) options = {};\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    // Zero-extend key to provide enough entropy\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray(\"be\", bytes);\n    // Zero-extend nonce to have the same byte size as N\n    var nonce = msg.toArray(\"be\", bytes);\n    // Instantiate Hmac_DRBG\n    var drbg = new hmacDrbg({\n        hash: this.hash,\n        entropy: bkey,\n        nonce: nonce,\n        pers: options.pers,\n        persEnc: options.persEnc || \"utf8\"\n    });\n    // Number of bytes to generate\n    var ns1 = this.n.sub(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(1));\n    for(var iter = 0;; iter++){\n        var k = options.k ? options.k(iter) : new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(drbg.generate(this.n.byteLength()));\n        k = this._truncateToN(k, true);\n        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n        var kp = this.g.mul(k);\n        if (kp.isInfinity()) continue;\n        var kpX = kp.getX();\n        var r = kpX.umod(this.n);\n        if (r.cmpn(0) === 0) continue;\n        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n        s = s.umod(this.n);\n        if (s.cmpn(0) === 0) continue;\n        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);\n        // Use complement of `s`, if it is > `n / 2`\n        if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n        }\n        return new signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n        });\n    }\n};\nEC.prototype.verify = function verify(msg, signature$1, key, enc) {\n    msg = this._truncateToN(new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg, 16));\n    key = this.keyFromPublic(key, enc);\n    signature$1 = new signature(signature$1, \"hex\");\n    // Perform primitive values validation\n    var r = signature$1.r;\n    var s = signature$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;\n    // Validate signature\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n    var p;\n    if (!this.curve._maxwellTrick) {\n        p = this.g.mulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false;\n        return p.getX().umod(this.n).cmp(r) === 0;\n    }\n    // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n    p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false;\n    // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n    return p.eqXToP(r);\n};\nEC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n    assert$5((3 & j) === j, \"The recovery param is more than two bits\");\n    signature$1 = new signature(signature$1, enc);\n    var n = this.n;\n    var e = new (bn_js__WEBPACK_IMPORTED_MODULE_0___default())(msg);\n    var r = signature$1.r;\n    var s = signature$1.s;\n    // A set LSB signifies that the y-coordinate is odd\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error(\"Unable to find sencond key candinate\");\n    // 1.1. Let x = r + jn.\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n    else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n);\n    // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n    return this.g.mulAdd(s1, r, s2);\n};\nEC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n    signature$1 = new signature(signature$1, enc);\n    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;\n    for(var i = 0; i < 4; i++){\n        var Qprime;\n        try {\n            Qprime = this.recoverPubKey(e, signature$1, i);\n        } catch (e) {\n            continue;\n        }\n        if (Qprime.eq(Q)) return i;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar elliptic_1 = createCommonjsModule(function(module, exports) {\n    \"use strict\";\n    var elliptic = exports;\n    elliptic.version = /*RicMoo:ethers*/ ({\n        version: \"6.5.4\"\n    }).version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function() {\n        throw new Error(\"unsupported\");\n    };\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1;\n    // Protocols\n    elliptic.ec = ec;\n    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/ null;\n});\nvar EC$1 = elliptic_1.ec;\n //# sourceMappingURL=elliptic.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"BaseCurve\");\n$RefreshReg$(_c1, \"BasePoint\");\n$RefreshReg$(_c2, \"ShortCurve\");\n$RefreshReg$(_c3, \"Point\");\n$RefreshReg$(_c4, \"JPoint\");\n$RefreshReg$(_c5, \"HmacDRBG\");\n$RefreshReg$(_c6, \"KeyPair\");\n$RefreshReg$(_c7, \"Signature\");\n$RefreshReg$(_c8, \"Position\");\n$RefreshReg$(_c9, \"EC\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/signing-key/lib.esm/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SigningKey: function() { return /* binding */ SigningKey; },\n/* harmony export */   computePublicKey: function() { return /* binding */ computePublicKey; },\n/* harmony export */   recoverPublicKey: function() { return /* binding */ recoverPublicKey; }\n/* harmony export */ });\n/* harmony import */ var _elliptic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./elliptic */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/_version.js\");\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new _elliptic__WEBPACK_IMPORTED_MODULE_2__.EC(\"secp256k1\");\n    }\n    return _curve;\n}\nclass SigningKey {\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.publicKey));\n        const p1 = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        const digestBytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, {\n            canonical: true\n        });\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.splitSignature)({\n            recoveryParam: signature.recoveryParam,\n            r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + signature.r.toString(16), 32),\n            s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + signature.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(computePublicKey(otherKey)));\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexZeroPad)(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n    constructor(privateKey){\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"curve\", \"secp256k1\");\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"privateKey\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(privateKey));\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexDataLength)(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n        const keyPair = getCurve().keyFromPrivate((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(this.privateKey));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_isSigningKey\", true);\n    }\n}\nfunction recoverPublicKey(digest, signature) {\n    const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.splitSignature)(signature);\n    const rs = {\n        r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(sig.r),\n        s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(sig.s)\n    };\n    return \"0x\" + getCurve().recoverPubKey((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nfunction computePublicKey(key, compressed) {\n    const bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.arrayify)(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    } else if (bytes.length === 33) {\n        if (compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    } else if (bytes.length === 65) {\n        if (!compressed) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_3__.hexlify)(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/_version.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/solidity/lib.esm/_version.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"solidity/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zb2xpZGl0eS9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLGlCQUFpQixDQUN4QyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NvbGlkaXR5L2xpYi5lc20vX3ZlcnNpb24uanM/Y2Y1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwic29saWRpdHkvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/solidity/lib.esm/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: function() { return /* binding */ keccak256; },\n/* harmony export */   pack: function() { return /* binding */ pack; },\n/* harmony export */   sha256: function() { return /* binding */ sha256; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/_version.js\");\n\n\n\n\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction _pack(type, value, isArray) {\n    switch(type){\n        case \"address\":\n            if (isArray) {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.zeroPad)(value, 32);\n            }\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value);\n        case \"string\":\n            return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value);\n        case \"bool\":\n            value = value ? \"0x01\" : \"0x00\";\n            if (isArray) {\n                return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.zeroPad)(value, 32);\n            }\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value).toTwos(size);\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.zeroPad)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(value).byteLength !== size) {\n            logger.throwArgumentError(\"invalid value for \".concat(type), \"value\", value);\n        }\n        if (isArray) {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(\"invalid array length for \".concat(type), \"value\", value);\n        }\n        const result = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)(tight));\n}\nfunction keccak256(types, values) {\n    return (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_5__.keccak256)(pack(types, values));\n}\nfunction sha256(types, values) {\n    return (0,_ethersproject_sha2__WEBPACK_IMPORTED_MODULE_6__.sha256)(pack(types, values));\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/_version.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"strings/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vX3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsZ0JBQWdCLENBQ3ZDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc3RyaW5ncy9saWIuZXNtL192ZXJzaW9uLmpzP2I0ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInN0cmluZ3MvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/bytes32.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/bytes32.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatBytes32String: function() { return /* binding */ formatBytes32String; },\n/* harmony export */   parseBytes32String: function() { return /* binding */ parseBytes32String; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/hashes.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\n\n\nfunction formatBytes32String(text) {\n    // Get the bytes\n    const bytes = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.toUtf8Bytes)(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.hexlify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.concat)([\n        bytes,\n        _ethersproject_constants__WEBPACK_IMPORTED_MODULE_2__.HashZero\n    ]).slice(0, 32));\n}\nfunction parseBytes32String(bytes) {\n    const data = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__.arrayify)(bytes);\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while(data[length - 1] === 0){\n        length--;\n    }\n    // Determine the string value\n    return (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.toUtf8String)(data.slice(0, length));\n} //# sourceMappingURL=bytes32.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vYnl0ZXMzMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFhO0FBQ3VDO0FBQ2E7QUFDZDtBQUM1QyxTQUFTTSxvQkFBb0JDLElBQUk7SUFDcEMsZ0JBQWdCO0lBQ2hCLE1BQU1DLFFBQVFKLGtEQUFXQSxDQUFDRztJQUMxQiwwQ0FBMEM7SUFDMUMsSUFBSUMsTUFBTUMsTUFBTSxHQUFHLElBQUk7UUFDbkIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0Esd0NBQXdDO0lBQ3hDLE9BQU9QLDZEQUFPQSxDQUFDRCw0REFBTUEsQ0FBQztRQUFDTTtRQUFPUiw4REFBUUE7S0FBQyxFQUFFVyxLQUFLLENBQUMsR0FBRztBQUN0RDtBQUNPLFNBQVNDLG1CQUFtQkosS0FBSztJQUNwQyxNQUFNSyxPQUFPWiw4REFBUUEsQ0FBQ087SUFDdEIsMkNBQTJDO0lBQzNDLElBQUlLLEtBQUtKLE1BQU0sS0FBSyxJQUFJO1FBQ3BCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLElBQUlHLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRztRQUNoQixNQUFNLElBQUlILE1BQU07SUFDcEI7SUFDQSw0QkFBNEI7SUFDNUIsSUFBSUQsU0FBUztJQUNiLE1BQU9JLElBQUksQ0FBQ0osU0FBUyxFQUFFLEtBQUssRUFBRztRQUMzQkE7SUFDSjtJQUNBLDZCQUE2QjtJQUM3QixPQUFPSixtREFBWUEsQ0FBQ1EsS0FBS0YsS0FBSyxDQUFDLEdBQUdGO0FBQ3RDLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL2xpYi5lc20vYnl0ZXMzMi5qcz9hYjZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgSGFzaFplcm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgY29uY2F0LCBoZXhsaWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIi4vdXRmOFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEJ5dGVzMzJTdHJpbmcodGV4dCkge1xuICAgIC8vIEdldCB0aGUgYnl0ZXNcbiAgICBjb25zdCBieXRlcyA9IHRvVXRmOEJ5dGVzKHRleHQpO1xuICAgIC8vIENoZWNrIHdlIGhhdmUgcm9vbSBmb3IgbnVsbC10ZXJtaW5hdGlvblxuICAgIGlmIChieXRlcy5sZW5ndGggPiAzMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJieXRlczMyIHN0cmluZyBtdXN0IGJlIGxlc3MgdGhhbiAzMiBieXRlc1wiKTtcbiAgICB9XG4gICAgLy8gWmVyby1wYWQgKGltcGxpY2l0bHkgbnVsbC10ZXJtaW5hdGVzKVxuICAgIHJldHVybiBoZXhsaWZ5KGNvbmNhdChbYnl0ZXMsIEhhc2haZXJvXSkuc2xpY2UoMCwgMzIpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJ5dGVzMzJTdHJpbmcoYnl0ZXMpIHtcbiAgICBjb25zdCBkYXRhID0gYXJyYXlpZnkoYnl0ZXMpO1xuICAgIC8vIE11c3QgYmUgMzIgYnl0ZXMgd2l0aCBhIG51bGwtdGVybWluYXRpb25cbiAgICBpZiAoZGF0YS5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgYnl0ZXMzMiAtIG5vdCAzMiBieXRlcyBsb25nXCIpO1xuICAgIH1cbiAgICBpZiAoZGF0YVszMV0gIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBieXRlczMyIHN0cmluZyAtIG5vIG51bGwgdGVybWluYXRvclwiKTtcbiAgICB9XG4gICAgLy8gRmluZCB0aGUgbnVsbCB0ZXJtaW5hdGlvblxuICAgIGxldCBsZW5ndGggPSAzMTtcbiAgICB3aGlsZSAoZGF0YVtsZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBsZW5ndGgtLTtcbiAgICB9XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzdHJpbmcgdmFsdWVcbiAgICByZXR1cm4gdG9VdGY4U3RyaW5nKGRhdGEuc2xpY2UoMCwgbGVuZ3RoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlczMyLmpzLm1hcCJdLCJuYW1lcyI6WyJIYXNoWmVybyIsImFycmF5aWZ5IiwiY29uY2F0IiwiaGV4bGlmeSIsInRvVXRmOEJ5dGVzIiwidG9VdGY4U3RyaW5nIiwiZm9ybWF0Qnl0ZXMzMlN0cmluZyIsInRleHQiLCJieXRlcyIsImxlbmd0aCIsIkVycm9yIiwic2xpY2UiLCJwYXJzZUJ5dGVzMzJTdHJpbmciLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/bytes32.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/idna.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/idna.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _nameprepTableA1: function() { return /* binding */ _nameprepTableA1; },\n/* harmony export */   _nameprepTableB2: function() { return /* binding */ _nameprepTableB2; },\n/* harmony export */   _nameprepTableC: function() { return /* binding */ _nameprepTableC; },\n/* harmony export */   nameprep: function() { return /* binding */ nameprep; }\n/* harmony export */ });\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n\n\nfunction bytes2(data) {\n    if (data.length % 4 !== 0) {\n        throw new Error(\"bad data\");\n    }\n    let result = [];\n    for(let i = 0; i < data.length; i += 4){\n        result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n}\nfunction createTable(data, func) {\n    if (!func) {\n        func = function(value) {\n            return [\n                parseInt(value, 16)\n            ];\n        };\n    }\n    let lo = 0;\n    let result = {};\n    data.split(\",\").forEach((pair)=>{\n        let comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n    });\n    return result;\n}\nfunction createRangeTable(data) {\n    let hi = 0;\n    return data.split(\",\").map((v)=>{\n        let comps = v.split(\"-\");\n        if (comps.length === 1) {\n            comps[1] = \"0\";\n        } else if (comps[1] === \"\") {\n            comps[1] = \"1\";\n        }\n        let lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return {\n            l: lo,\n            h: hi\n        };\n    });\n}\nfunction matchMap(value, ranges) {\n    let lo = 0;\n    for(let i = 0; i < ranges.length; i++){\n        let range = ranges[i];\n        lo += range.l;\n        if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {\n            if (range.e && range.e.indexOf(value - lo) !== -1) {\n                continue;\n            }\n            return range;\n        }\n    }\n    return null;\n}\nconst Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n// @TODO: Make this relative...\nconst Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map(_c = (v)=>parseInt(v, 16));\n_c1 = Table_B_1_flags;\nconst Table_B_2_ranges = [\n    {\n        h: 25,\n        s: 32,\n        l: 65\n    },\n    {\n        h: 30,\n        s: 32,\n        e: [\n            23\n        ],\n        l: 127\n    },\n    {\n        h: 54,\n        s: 1,\n        e: [\n            48\n        ],\n        l: 64,\n        d: 2\n    },\n    {\n        h: 14,\n        s: 1,\n        l: 57,\n        d: 2\n    },\n    {\n        h: 44,\n        s: 1,\n        l: 17,\n        d: 2\n    },\n    {\n        h: 10,\n        s: 1,\n        e: [\n            2,\n            6,\n            8\n        ],\n        l: 61,\n        d: 2\n    },\n    {\n        h: 16,\n        s: 1,\n        l: 68,\n        d: 2\n    },\n    {\n        h: 84,\n        s: 1,\n        e: [\n            18,\n            24,\n            66\n        ],\n        l: 19,\n        d: 2\n    },\n    {\n        h: 26,\n        s: 32,\n        e: [\n            17\n        ],\n        l: 435\n    },\n    {\n        h: 22,\n        s: 1,\n        l: 71,\n        d: 2\n    },\n    {\n        h: 15,\n        s: 80,\n        l: 40\n    },\n    {\n        h: 31,\n        s: 32,\n        l: 16\n    },\n    {\n        h: 32,\n        s: 1,\n        l: 80,\n        d: 2\n    },\n    {\n        h: 52,\n        s: 1,\n        l: 42,\n        d: 2\n    },\n    {\n        h: 12,\n        s: 1,\n        l: 55,\n        d: 2\n    },\n    {\n        h: 40,\n        s: 1,\n        e: [\n            38\n        ],\n        l: 15,\n        d: 2\n    },\n    {\n        h: 14,\n        s: 1,\n        l: 48,\n        d: 2\n    },\n    {\n        h: 37,\n        s: 48,\n        l: 49\n    },\n    {\n        h: 148,\n        s: 1,\n        l: 6351,\n        d: 2\n    },\n    {\n        h: 88,\n        s: 1,\n        l: 160,\n        d: 2\n    },\n    {\n        h: 15,\n        s: 16,\n        l: 704\n    },\n    {\n        h: 25,\n        s: 26,\n        l: 854\n    },\n    {\n        h: 25,\n        s: 32,\n        l: 55915\n    },\n    {\n        h: 37,\n        s: 40,\n        l: 1247\n    },\n    {\n        h: 25,\n        s: -119711,\n        l: 53248\n    },\n    {\n        h: 25,\n        s: -119763,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -119815,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -119867,\n        e: [\n            1,\n            4,\n            5,\n            7,\n            8,\n            11,\n            12,\n            17\n        ],\n        l: 52\n    },\n    {\n        h: 25,\n        s: -119919,\n        l: 52\n    },\n    {\n        h: 24,\n        s: -119971,\n        e: [\n            2,\n            7,\n            8,\n            17\n        ],\n        l: 52\n    },\n    {\n        h: 24,\n        s: -120023,\n        e: [\n            2,\n            7,\n            13,\n            15,\n            16,\n            17\n        ],\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120075,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120127,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120179,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120231,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120283,\n        l: 52\n    },\n    {\n        h: 25,\n        s: -120335,\n        l: 52\n    },\n    {\n        h: 24,\n        s: -119543,\n        e: [\n            17\n        ],\n        l: 56\n    },\n    {\n        h: 24,\n        s: -119601,\n        e: [\n            17\n        ],\n        l: 58\n    },\n    {\n        h: 24,\n        s: -119659,\n        e: [\n            17\n        ],\n        l: 58\n    },\n    {\n        h: 24,\n        s: -119717,\n        e: [\n            17\n        ],\n        l: 58\n    },\n    {\n        h: 24,\n        s: -119775,\n        e: [\n            17\n        ],\n        l: 58\n    }\n];\nconst Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\nconst Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\nconst Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\nconst Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nfunction flatten(values) {\n    return values.reduce((accum, value)=>{\n        value.forEach((value)=>{\n            accum.push(value);\n        });\n        return accum;\n    }, []);\n}\nfunction _nameprepTableA1(codepoint) {\n    return !!matchMap(codepoint, Table_A_1_ranges);\n}\nfunction _nameprepTableB2(codepoint) {\n    let range = matchMap(codepoint, Table_B_2_ranges);\n    if (range) {\n        return [\n            codepoint + range.s\n        ];\n    }\n    let codes = Table_B_2_lut_abs[codepoint];\n    if (codes) {\n        return codes;\n    }\n    let shift = Table_B_2_lut_rel[codepoint];\n    if (shift) {\n        return [\n            codepoint + shift[0]\n        ];\n    }\n    let complex = Table_B_2_complex[codepoint];\n    if (complex) {\n        return complex;\n    }\n    return null;\n}\nfunction _nameprepTableC(codepoint) {\n    return !!matchMap(codepoint, Table_C_ranges);\n}\nfunction nameprep(value) {\n    // This allows platforms with incomplete normalize to bypass\n    // it for very basic names which the built-in toLowerCase\n    // will certainly handle correctly\n    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n        return value.toLowerCase();\n    }\n    // Get the code points (keeping the current normalization)\n    let codes = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.toUtf8CodePoints)(value);\n    codes = flatten(codes.map((code)=>{\n        // Substitute Table B.1 (Maps to Nothing)\n        if (Table_B_1_flags.indexOf(code) >= 0) {\n            return [];\n        }\n        if (code >= 0xfe00 && code <= 0xfe0f) {\n            return [];\n        }\n        // Substitute Table B.2 (Case Folding)\n        let codesTableB2 = _nameprepTableB2(code);\n        if (codesTableB2) {\n            return codesTableB2;\n        }\n        // No Substitution\n        return [\n            code\n        ];\n    }));\n    // Normalize using form KC\n    codes = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.toUtf8CodePoints)((0,_utf8__WEBPACK_IMPORTED_MODULE_0__._toUtf8String)(codes), _utf8__WEBPACK_IMPORTED_MODULE_0__.UnicodeNormalizationForm.NFKC);\n    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n    codes.forEach((code)=>{\n        if (_nameprepTableC(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n        }\n    });\n    // Prohibit Unassigned Code Points (Table A.1)\n    codes.forEach((code)=>{\n        if (_nameprepTableA1(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n        }\n    });\n    // IDNA extras\n    let name = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__._toUtf8String)(codes);\n    // IDNA: 4.2.3.1\n    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n        throw new Error(\"invalid hyphen\");\n    }\n    return name;\n} //# sourceMappingURL=idna.js.map\nvar _c, _c1;\n$RefreshReg$(_c, 'Table_B_1_flags$\"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map');\n$RefreshReg$(_c1, \"Table_B_1_flags\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/idna.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/strings/lib.esm/utf8.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnicodeNormalizationForm: function() { return /* binding */ UnicodeNormalizationForm; },\n/* harmony export */   Utf8ErrorFuncs: function() { return /* binding */ Utf8ErrorFuncs; },\n/* harmony export */   Utf8ErrorReason: function() { return /* binding */ Utf8ErrorReason; },\n/* harmony export */   _toEscapedUtf8String: function() { return /* binding */ _toEscapedUtf8String; },\n/* harmony export */   _toUtf8String: function() { return /* binding */ _toUtf8String; },\n/* harmony export */   toUtf8Bytes: function() { return /* binding */ toUtf8Bytes; },\n/* harmony export */   toUtf8CodePoints: function() { return /* binding */ toUtf8CodePoints; },\n/* harmony export */   toUtf8String: function() { return /* binding */ toUtf8String; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/_version.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n///////////////////////////////\nvar UnicodeNormalizationForm;\n(function(UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nvar Utf8ErrorReason;\n(function(Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(\"invalid codepoint at offset \".concat(offset, \"; \").concat(reason), \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for(let o = offset + 1; o < bytes.length; o++){\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nconst Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while(i < bytes.length){\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            } else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & (1 << 8 - extraLength - 1) - 1;\n        for(let j = 0; j < extraLength; j++){\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str) {\n    let form = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UnicodeNormalizationForm.current;\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(pair >> 18 | 0xf0);\n            result.push(pair >> 12 & 0x3f | 0x80);\n            result.push(pair >> 6 & 0x3f | 0x80);\n            result.push(pair & 0x3f | 0x80);\n        } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n        }\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = \"0000\" + value.toString(16);\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nfunction _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint)=>{\n        if (codePoint < 256) {\n            switch(codePoint){\n                case 8:\n                    return \"\\\\b\";\n                case 9:\n                    return \"\\\\t\";\n                case 10:\n                    return \"\\\\n\";\n                case 13:\n                    return \"\\\\r\";\n                case 34:\n                    return '\\\\\"';\n                case 92:\n                    return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint)=>{\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\");\n}\nfunction toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nfunction toUtf8CodePoints(str) {\n    let form = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : UnicodeNormalizationForm.current;\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n} //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@ethersproject/transactions/lib.esm/_version.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"transactions/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxxQkFBcUIsQ0FDNUMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnMvbGliLmVzbS9fdmVyc2lvbi5qcz82ZmFjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ0cmFuc2FjdGlvbnMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/transactions/lib.esm/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionTypes: function() { return /* binding */ TransactionTypes; },\n/* harmony export */   accessListify: function() { return /* binding */ accessListify; },\n/* harmony export */   computeAddress: function() { return /* binding */ computeAddress; },\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   recoverAddress: function() { return /* binding */ recoverAddress; },\n/* harmony export */   serialize: function() { return /* binding */ serialize; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/rlp */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/signing-key */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nvar TransactionTypes;\n(function(TransactionTypes) {\n    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return _ethersproject_constants__WEBPACK_IMPORTED_MODULE_3__.Zero;\n    }\n    return _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    {\n        name: \"nonce\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"gasPrice\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"gasLimit\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"to\",\n        length: 20\n    },\n    {\n        name: \"value\",\n        maxLength: 32,\n        numeric: true\n    },\n    {\n        name: \"data\"\n    }\n];\nconst allowedTransactionKeys = {\n    chainId: true,\n    data: true,\n    gasLimit: true,\n    gasPrice: true,\n    nonce: true,\n    to: true,\n    type: true,\n    value: true\n};\nfunction computeAddress(key) {\n    const publicKey = (0,_ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__.computePublicKey)(key);\n    return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataSlice)(publicKey, 1)), 12));\n}\nfunction recoverAddress(digest, signature) {\n    return computeAddress((0,_ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_5__.recoverPublicKey)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index)=>{\n            if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexDataLength)(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", \"accessList[\".concat(addr, \":\").concat(index, \"]\"), storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nfunction accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index)=>{\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", \"value[\".concat(index, \"]\"), set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr)=>{\n        const storageKeys = value[addr].reduce((accum, storageKey)=>{\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b)=>a.address.localeCompare(b.address));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set)=>[\n            set.address,\n            set.storageKeys\n        ]);\n}\nfunction _serializeEip1559(transaction, signature) {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice,\n                maxFeePerGas\n            });\n        }\n    }\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        transaction.to != null ? (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(transaction.to) : \"0x\",\n        formatNumber(transaction.value || 0, \"value\"),\n        transaction.data || \"0x\",\n        formatAccessList(transaction.accessList || [])\n    ];\n    if (signature) {\n        const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.r));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.s));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexConcat)([\n        \"0x02\",\n        _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(fields)\n    ]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        transaction.to != null ? (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_2__.getAddress)(transaction.to) : \"0x\",\n        formatNumber(transaction.value || 0, \"value\"),\n        transaction.data || \"0x\",\n        formatAccessList(transaction.accessList || [])\n    ];\n    if (signature) {\n        const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.r));\n        fields.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(sig.s));\n    }\n    return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexConcat)([\n        \"0x01\",\n        _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(fields)\n    ]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_9__.checkProperties)(transaction, allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function(fieldInfo) {\n        let value = transaction[fieldInfo.name] || [];\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n            }\n        }\n        raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof chainId !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    } else if (signature && !(0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.isBytesLike)(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transaction\n    if (!signature) {\n        return _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.splitSignature)(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    } else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(v));\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(sig.r)));\n    raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.stripZeros)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(sig.s)));\n    return _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw);\n}\nfunction serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch(transaction.type){\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n    return logger.throwError(\"unsupported transaction type: \".concat(transaction.type), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    } catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(fields[1], 32);\n    tx.s = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(fields[2], 32);\n    try {\n        const digest = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(serialize(tx));\n        tx.from = recoverAddress(digest, {\n            r: tx.r,\n            s: tx.s,\n            recoveryParam: tx.v\n        });\n    } catch (error) {}\n}\nfunction _parseEip1559(payload) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n        type: 2,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleNumber(transaction[4]),\n        to: handleAddress(transaction[5]),\n        value: handleNumber(transaction[6]),\n        data: transaction[7],\n        accessList: accessListify(transaction[8])\n    };\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) {\n        return tx;\n    }\n    tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n}\nfunction _parseEip2930(payload) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(transaction[6]).toNumber();\n    } catch (error) {\n        // @TODO: What makes snese to do? The v is too big\n        return tx;\n    }\n    tx.r = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(transaction[7], 32);\n    tx.s = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexZeroPad)(transaction[8], 32);\n    if (_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(tx.r).isZero() && _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_4__.BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    } else {\n        // Signed Transaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(_ethersproject_rlp__WEBPACK_IMPORTED_MODULE_8__.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, {\n                r: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.r),\n                s: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.hexlify)(tx.s),\n                recoveryParam: recoveryParam\n            });\n        } catch (error) {}\n        tx.hash = (0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_7__.keccak256)(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nfunction parse(rawTransaction) {\n    const payload = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_6__.arrayify)(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch(payload[0]){\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n    return logger.throwError(\"unsupported transaction type: \".concat(payload[0]), _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/_version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@ethersproject/units/lib.esm/_version.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"units/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC91bml0cy9saWIuZXNtL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLGNBQWMsQ0FDckMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC91bml0cy9saWIuZXNtL192ZXJzaW9uLmpzPzgyZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInVuaXRzLzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@ethersproject/units/lib.esm/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commify: function() { return /* binding */ commify; },\n/* harmony export */   formatEther: function() { return /* binding */ formatEther; },\n/* harmony export */   formatUnits: function() { return /* binding */ formatUnits; },\n/* harmony export */   parseEther: function() { return /* binding */ parseEther; },\n/* harmony export */   parseUnits: function() { return /* binding */ parseUnits; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/_version.js\");\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\"\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nfunction commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while(whole.substring(0, 1) === \"0\"){\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while(suffix.length > 2 && suffix[suffix.length - 1] === \"0\"){\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while(whole.length){\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nfunction formatUnits(value, unitName) {\n    if (typeof unitName === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.formatFixed)(value, unitName != null ? unitName : 18);\n}\nfunction parseUnits(value, unitName) {\n    if (typeof value !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof unitName === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return (0,_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_2__.parseFixed)(value, unitName != null ? unitName : 18);\n}\nfunction formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nfunction parseEther(ether) {\n    return parseUnits(ether, 18);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC91bml0cy9saWIuZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWE7QUFDc0Q7QUFDcEI7QUFDVjtBQUNyQyxNQUFNSSxTQUFTLElBQUlGLHlEQUFNQSxDQUFDQyw2Q0FBT0E7QUFDakMsTUFBTUUsUUFBUTtJQUNWO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxvRkFBb0Y7QUFDcEYsWUFBWTtBQUNMLFNBQVNDLFFBQVFDLEtBQUs7SUFDekIsTUFBTUMsUUFBUUMsT0FBT0YsT0FBT0csS0FBSyxDQUFDO0lBQ2xDLElBQUlGLE1BQU1HLE1BQU0sR0FBRyxLQUFLLENBQUNILEtBQUssQ0FBQyxFQUFFLENBQUNJLEtBQUssQ0FBQyxpQkFBa0JKLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDLEVBQUUsQ0FBQ0ksS0FBSyxDQUFDLGVBQWdCTCxVQUFVLE9BQU9BLFVBQVUsTUFBTTtRQUNuSUgsT0FBT1Msa0JBQWtCLENBQUMsaUJBQWlCLFNBQVNOO0lBQ3hEO0lBQ0EseURBQXlEO0lBQ3pELElBQUlPLFFBQVFOLEtBQUssQ0FBQyxFQUFFO0lBQ3BCLElBQUlPLFdBQVc7SUFDZixJQUFJRCxNQUFNRSxTQUFTLENBQUMsR0FBRyxPQUFPLEtBQUs7UUFDL0JELFdBQVc7UUFDWEQsUUFBUUEsTUFBTUUsU0FBUyxDQUFDO0lBQzVCO0lBQ0EsaUVBQWlFO0lBQ2pFLE1BQU9GLE1BQU1FLFNBQVMsQ0FBQyxHQUFHLE9BQU8sSUFBSztRQUNsQ0YsUUFBUUEsTUFBTUUsU0FBUyxDQUFDO0lBQzVCO0lBQ0EsSUFBSUYsVUFBVSxJQUFJO1FBQ2RBLFFBQVE7SUFDWjtJQUNBLElBQUlHLFNBQVM7SUFDYixJQUFJVCxNQUFNRyxNQUFNLEtBQUssR0FBRztRQUNwQk0sU0FBUyxNQUFPVCxDQUFBQSxLQUFLLENBQUMsRUFBRSxJQUFJLEdBQUU7SUFDbEM7SUFDQSxNQUFPUyxPQUFPTixNQUFNLEdBQUcsS0FBS00sTUFBTSxDQUFDQSxPQUFPTixNQUFNLEdBQUcsRUFBRSxLQUFLLElBQUs7UUFDM0RNLFNBQVNBLE9BQU9ELFNBQVMsQ0FBQyxHQUFHQyxPQUFPTixNQUFNLEdBQUc7SUFDakQ7SUFDQSxNQUFNTyxZQUFZLEVBQUU7SUFDcEIsTUFBT0osTUFBTUgsTUFBTSxDQUFFO1FBQ2pCLElBQUlHLE1BQU1ILE1BQU0sSUFBSSxHQUFHO1lBQ25CTyxVQUFVQyxPQUFPLENBQUNMO1lBQ2xCO1FBQ0osT0FDSztZQUNELE1BQU1NLFFBQVFOLE1BQU1ILE1BQU0sR0FBRztZQUM3Qk8sVUFBVUMsT0FBTyxDQUFDTCxNQUFNRSxTQUFTLENBQUNJO1lBQ2xDTixRQUFRQSxNQUFNRSxTQUFTLENBQUMsR0FBR0k7UUFDL0I7SUFDSjtJQUNBLE9BQU9MLFdBQVdHLFVBQVVHLElBQUksQ0FBQyxPQUFPSjtBQUM1QztBQUNPLFNBQVNLLFlBQVlmLEtBQUssRUFBRWdCLFFBQVE7SUFDdkMsSUFBSSxPQUFRQSxhQUFjLFVBQVU7UUFDaEMsTUFBTUgsUUFBUWYsTUFBTW1CLE9BQU8sQ0FBQ0Q7UUFDNUIsSUFBSUgsVUFBVSxDQUFDLEdBQUc7WUFDZEcsV0FBVyxJQUFJSDtRQUNuQjtJQUNKO0lBQ0EsT0FBT3BCLHFFQUFXQSxDQUFDTyxPQUFPLFlBQWEsT0FBUWdCLFdBQVc7QUFDOUQ7QUFDTyxTQUFTRSxXQUFXbEIsS0FBSyxFQUFFZ0IsUUFBUTtJQUN0QyxJQUFJLE9BQVFoQixVQUFXLFVBQVU7UUFDN0JILE9BQU9TLGtCQUFrQixDQUFDLDBCQUEwQixTQUFTTjtJQUNqRTtJQUNBLElBQUksT0FBUWdCLGFBQWMsVUFBVTtRQUNoQyxNQUFNSCxRQUFRZixNQUFNbUIsT0FBTyxDQUFDRDtRQUM1QixJQUFJSCxVQUFVLENBQUMsR0FBRztZQUNkRyxXQUFXLElBQUlIO1FBQ25CO0lBQ0o7SUFDQSxPQUFPbkIsb0VBQVVBLENBQUNNLE9BQU8sWUFBYSxPQUFRZ0IsV0FBVztBQUM3RDtBQUNPLFNBQVNHLFlBQVlDLEdBQUc7SUFDM0IsT0FBT0wsWUFBWUssS0FBSztBQUM1QjtBQUNPLFNBQVNDLFdBQVdDLEtBQUs7SUFDNUIsT0FBT0osV0FBV0ksT0FBTztBQUM3QixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvdW5pdHMvbGliLmVzbS9pbmRleC5qcz8wNzdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgZm9ybWF0Rml4ZWQsIHBhcnNlRml4ZWQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5jb25zdCBuYW1lcyA9IFtcbiAgICBcIndlaVwiLFxuICAgIFwia3dlaVwiLFxuICAgIFwibXdlaVwiLFxuICAgIFwiZ3dlaVwiLFxuICAgIFwic3phYm9cIixcbiAgICBcImZpbm5leVwiLFxuICAgIFwiZXRoZXJcIixcbl07XG4vLyBTb21lIGVudmlyb25tZW50cyBoYXZlIGlzc3VlcyB3aXRoIFJlZ0V4IHRoYXQgY29udGFpbiBiYWNrLXRyYWNraW5nLCBzbyB3ZSBjYW5ub3Rcbi8vIHVzZSB0aGVtLlxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1pZnkodmFsdWUpIHtcbiAgICBjb25zdCBjb21wcyA9IFN0cmluZyh2YWx1ZSkuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChjb21wcy5sZW5ndGggPiAyIHx8ICFjb21wc1swXS5tYXRjaCgvXi0/WzAtOV0qJC8pIHx8IChjb21wc1sxXSAmJiAhY29tcHNbMV0ubWF0Y2goL15bMC05XSokLykpIHx8IHZhbHVlID09PSBcIi5cIiB8fCB2YWx1ZSA9PT0gXCItLlwiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgd2hvbGUgZGlnaXQgKDAgaWYgbm9uZSlcbiAgICBsZXQgd2hvbGUgPSBjb21wc1swXTtcbiAgICBsZXQgbmVnYXRpdmUgPSBcIlwiO1xuICAgIGlmICh3aG9sZS5zdWJzdHJpbmcoMCwgMSkgPT09IFwiLVwiKSB7XG4gICAgICAgIG5lZ2F0aXZlID0gXCItXCI7XG4gICAgICAgIHdob2xlID0gd2hvbGUuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhdCBsZWFzdCAxIHdob2xlIGRpZ2l0IHdpdGggbm8gbGVhZGluZyB6ZXJvc1xuICAgIHdoaWxlICh3aG9sZS5zdWJzdHJpbmcoMCwgMSkgPT09IFwiMFwiKSB7XG4gICAgICAgIHdob2xlID0gd2hvbGUuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBpZiAod2hvbGUgPT09IFwiXCIpIHtcbiAgICAgICAgd2hvbGUgPSBcIjBcIjtcbiAgICB9XG4gICAgbGV0IHN1ZmZpeCA9IFwiXCI7XG4gICAgaWYgKGNvbXBzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzdWZmaXggPSBcIi5cIiArIChjb21wc1sxXSB8fCBcIjBcIik7XG4gICAgfVxuICAgIHdoaWxlIChzdWZmaXgubGVuZ3RoID4gMiAmJiBzdWZmaXhbc3VmZml4Lmxlbmd0aCAtIDFdID09PSBcIjBcIikge1xuICAgICAgICBzdWZmaXggPSBzdWZmaXguc3Vic3RyaW5nKDAsIHN1ZmZpeC5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgY29uc3QgZm9ybWF0dGVkID0gW107XG4gICAgd2hpbGUgKHdob2xlLmxlbmd0aCkge1xuICAgICAgICBpZiAod2hvbGUubGVuZ3RoIDw9IDMpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZC51bnNoaWZ0KHdob2xlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB3aG9sZS5sZW5ndGggLSAzO1xuICAgICAgICAgICAgZm9ybWF0dGVkLnVuc2hpZnQod2hvbGUuc3Vic3RyaW5nKGluZGV4KSk7XG4gICAgICAgICAgICB3aG9sZSA9IHdob2xlLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5lZ2F0aXZlICsgZm9ybWF0dGVkLmpvaW4oXCIsXCIpICsgc3VmZml4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFVuaXRzKHZhbHVlLCB1bml0TmFtZSkge1xuICAgIGlmICh0eXBlb2YgKHVuaXROYW1lKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YodW5pdE5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB1bml0TmFtZSA9IDMgKiBpbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0Rml4ZWQodmFsdWUsICh1bml0TmFtZSAhPSBudWxsKSA/IHVuaXROYW1lIDogMTgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pdHModmFsdWUsIHVuaXROYW1lKSB7XG4gICAgaWYgKHR5cGVvZiAodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mICh1bml0TmFtZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lcy5pbmRleE9mKHVuaXROYW1lKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdW5pdE5hbWUgPSAzICogaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRml4ZWQodmFsdWUsICh1bml0TmFtZSAhPSBudWxsKSA/IHVuaXROYW1lIDogMTgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEV0aGVyKHdlaSkge1xuICAgIHJldHVybiBmb3JtYXRVbml0cyh3ZWksIDE4KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV0aGVyKGV0aGVyKSB7XG4gICAgcmV0dXJuIHBhcnNlVW5pdHMoZXRoZXIsIDE4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJmb3JtYXRGaXhlZCIsInBhcnNlRml4ZWQiLCJMb2dnZXIiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwibmFtZXMiLCJjb21taWZ5IiwidmFsdWUiLCJjb21wcyIsIlN0cmluZyIsInNwbGl0IiwibGVuZ3RoIiwibWF0Y2giLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJ3aG9sZSIsIm5lZ2F0aXZlIiwic3Vic3RyaW5nIiwic3VmZml4IiwiZm9ybWF0dGVkIiwidW5zaGlmdCIsImluZGV4Iiwiam9pbiIsImZvcm1hdFVuaXRzIiwidW5pdE5hbWUiLCJpbmRleE9mIiwicGFyc2VVbml0cyIsImZvcm1hdEV0aGVyIiwid2VpIiwicGFyc2VFdGhlciIsImV0aGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/_version.js":
/*!****************************************************************!*\
  !*** ./node_modules/@ethersproject/wallet/lib.esm/_version.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"wallet/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93YWxsZXQvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxlQUFlLENBQ3RDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd2FsbGV0L2xpYi5lc20vX3ZlcnNpb24uanM/M2E2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwid2FsbGV0LzUuNy4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/wallet/lib.esm/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wallet: function() { return /* binding */ Wallet; },\n/* harmony export */   verifyMessage: function() { return /* binding */ verifyMessage; },\n/* harmony export */   verifyTypedData: function() { return /* binding */ verifyTypedData; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ethersproject/abstract-provider */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/message.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\");\n/* harmony import */ var _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/hdnode */ \"(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_random__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/random */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/random.js\");\n/* harmony import */ var _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ethersproject/signing-key */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/json-wallets */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js\");\n/* harmony import */ var _ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ethersproject/json-wallets */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/_version.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nfunction isAccount(value) {\n    return value != null && (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isHexString)(value.privateKey, 32) && value.address != null;\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return mnemonic && mnemonic.phrase;\n}\nclass Wallet extends _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_3__.Signer {\n    get mnemonic() {\n        return this._mnemonic();\n    }\n    get privateKey() {\n        return this._signingKey().privateKey;\n    }\n    get publicKey() {\n        return this._signingKey().publicKey;\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.resolveProperties)(transaction).then((tx)=>{\n            if (tx.from != null) {\n                if ((0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_5__.getAddress)(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_6__.keccak256)((0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.serialize)(tx)));\n            return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.serialize)(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.joinSignature)(this._signingKey().signDigest((0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.hashMessage)(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function*() {\n            // Populate any ENS names\n            const populated = yield _ethersproject_hash__WEBPACK_IMPORTED_MODULE_9__.TypedDataEncoder.resolveNames(domain, types, value, (name)=>{\n                if (this.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.joinSignature)(this._signingKey().signDigest(_ethersproject_hash__WEBPACK_IMPORTED_MODULE_9__.TypedDataEncoder.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof options === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof progressCallback !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return (0,_ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_10__.encrypt)(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */ static createRandom(options) {\n        let entropy = (0,_ethersproject_random__WEBPACK_IMPORTED_MODULE_11__.randomBytes)(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.arrayify)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexDataSlice)((0,_ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_6__.keccak256)((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.concat)([\n                entropy,\n                options.extraEntropy\n            ])), 0, 16));\n        }\n        const mnemonic = (0,_ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__.entropyToMnemonic)(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return (0,_ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_13__.decryptJsonWallet)(json, password, progressCallback).then((account)=>{\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet((0,_ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_13__.decryptJsonWalletSync)(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__.defaultPath;\n        }\n        return new Wallet(_ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n    constructor(privateKey, provider){\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_14__.SigningKey(privateKey.privateKey);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_signingKey\", ()=>signingKey);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"address\", (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.computeAddress)(this.publicKey));\n            if (this.address !== (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_5__.getAddress)(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_mnemonic\", ()=>({\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__.defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }));\n                const mnemonic = this.mnemonic;\n                const node = _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_12__.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if ((0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.computeAddress)(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_mnemonic\", ()=>null);\n            }\n        } else {\n            if (_ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_14__.SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */ if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_signingKey\", ()=>privateKey);\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof privateKey === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_14__.SigningKey(privateKey);\n                (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_signingKey\", ()=>signingKey);\n            }\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"_mnemonic\", ()=>null);\n            (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"address\", (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.computeAddress)(this.publicKey));\n        }\n        /* istanbul ignore if */ if (provider && !_ethersproject_abstract_provider__WEBPACK_IMPORTED_MODULE_15__.Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_4__.defineReadOnly)(this, \"provider\", provider || null);\n    }\n}\nfunction verifyMessage(message, signature) {\n    return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.recoverAddress)((0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_8__.hashMessage)(message), signature);\n}\nfunction verifyTypedData(domain, types, value, signature) {\n    return (0,_ethersproject_transactions__WEBPACK_IMPORTED_MODULE_7__.recoverAddress)(_ethersproject_hash__WEBPACK_IMPORTED_MODULE_9__.TypedDataEncoder.hash(domain, types, value), signature);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js":
/*!*************************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/_version.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"web/5.7.1\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxZQUFZLENBQ25DLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd2ViL2xpYi5lc20vX3ZlcnNpb24uanM/MzNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwid2ViLzUuNy4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js":
/*!***********************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/geturl.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUrl: function() { return /* binding */ getUrl; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction getUrl(href, options) {\n    return __awaiter(this, void 0, void 0, function*() {\n        if (options == null) {\n            options = {};\n        }\n        const request = {\n            method: options.method || \"GET\",\n            headers: options.headers || {},\n            body: options.body || undefined\n        };\n        if (options.skipFetchSetup !== true) {\n            request.mode = \"cors\"; // no-cors, cors, *same-origin\n            request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n            request.credentials = \"same-origin\"; // include, *same-origin, omit\n            request.redirect = \"follow\"; // manual, *follow, error\n            request.referrer = \"client\"; // no-referrer, *client\n        }\n        ;\n        if (options.fetchOptions != null) {\n            const opts = options.fetchOptions;\n            if (opts.mode) {\n                request.mode = opts.mode;\n            }\n            if (opts.cache) {\n                request.cache = opts.cache;\n            }\n            if (opts.credentials) {\n                request.credentials = opts.credentials;\n            }\n            if (opts.redirect) {\n                request.redirect = opts.redirect;\n            }\n            if (opts.referrer) {\n                request.referrer = opts.referrer;\n            }\n        }\n        const response = yield fetch(href, request);\n        const body = yield response.arrayBuffer();\n        const headers = {};\n        if (response.headers.forEach) {\n            response.headers.forEach((value, key)=>{\n                headers[key.toLowerCase()] = value;\n            });\n        } else {\n            response.headers.keys().forEach((key)=>{\n                headers[key.toLowerCase()] = response.headers.get(key);\n            });\n        }\n        return {\n            headers: headers,\n            statusCode: response.status,\n            statusMessage: response.statusText,\n            body: (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__.arrayify)(new Uint8Array(body))\n        };\n    });\n} //# sourceMappingURL=geturl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9nZXR1cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVksU0FBSyxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFLLFNBQVVDLE9BQU8sRUFBRUMsVUFBVSxFQUFFQyxDQUFDLEVBQUVDLFNBQVM7SUFDbkYsU0FBU0MsTUFBTUMsS0FBSztRQUFJLE9BQU9BLGlCQUFpQkgsSUFBSUcsUUFBUSxJQUFJSCxFQUFFLFNBQVVJLE9BQU87WUFBSUEsUUFBUUQ7UUFBUTtJQUFJO0lBQzNHLE9BQU8sSUFBS0gsQ0FBQUEsS0FBTUEsQ0FBQUEsSUFBSUssT0FBTSxDQUFDLEVBQUcsU0FBVUQsT0FBTyxFQUFFRSxNQUFNO1FBQ3JELFNBQVNDLFVBQVVKLEtBQUs7WUFBSSxJQUFJO2dCQUFFSyxLQUFLUCxVQUFVUSxJQUFJLENBQUNOO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDMUYsU0FBU0MsU0FBU1IsS0FBSztZQUFJLElBQUk7Z0JBQUVLLEtBQUtQLFNBQVMsQ0FBQyxRQUFRLENBQUNFO1lBQVMsRUFBRSxPQUFPTyxHQUFHO2dCQUFFSixPQUFPSTtZQUFJO1FBQUU7UUFDN0YsU0FBU0YsS0FBS0ksTUFBTTtZQUFJQSxPQUFPQyxJQUFJLEdBQUdULFFBQVFRLE9BQU9ULEtBQUssSUFBSUQsTUFBTVUsT0FBT1QsS0FBSyxFQUFFVyxJQUFJLENBQUNQLFdBQVdJO1FBQVc7UUFDN0dILEtBQUssQ0FBQ1AsWUFBWUEsVUFBVWMsS0FBSyxDQUFDakIsU0FBU0MsY0FBYyxFQUFFLEdBQUdVLElBQUk7SUFDdEU7QUFDSjtBQUNnRDtBQUN6QyxTQUFTUSxPQUFPQyxJQUFJLEVBQUVDLE9BQU87SUFDaEMsT0FBT3RCLFVBQVUsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDbkMsSUFBSXNCLFdBQVcsTUFBTTtZQUNqQkEsVUFBVSxDQUFDO1FBQ2Y7UUFDQSxNQUFNQyxVQUFVO1lBQ1pDLFFBQVNGLFFBQVFFLE1BQU0sSUFBSTtZQUMzQkMsU0FBVUgsUUFBUUcsT0FBTyxJQUFJLENBQUM7WUFDOUJDLE1BQU9KLFFBQVFJLElBQUksSUFBSUM7UUFDM0I7UUFDQSxJQUFJTCxRQUFRTSxjQUFjLEtBQUssTUFBTTtZQUNqQ0wsUUFBUU0sSUFBSSxHQUFHLFFBQVEsOEJBQThCO1lBQ3JETixRQUFRTyxLQUFLLEdBQUcsWUFBWSwwREFBMEQ7WUFDdEZQLFFBQVFRLFdBQVcsR0FBRyxlQUFlLDhCQUE4QjtZQUNuRVIsUUFBUVMsUUFBUSxHQUFHLFVBQVUseUJBQXlCO1lBQ3REVCxRQUFRVSxRQUFRLEdBQUcsVUFBVSx1QkFBdUI7UUFDeEQ7O1FBRUEsSUFBSVgsUUFBUVksWUFBWSxJQUFJLE1BQU07WUFDOUIsTUFBTUMsT0FBT2IsUUFBUVksWUFBWTtZQUNqQyxJQUFJQyxLQUFLTixJQUFJLEVBQUU7Z0JBQ1hOLFFBQVFNLElBQUksR0FBSU0sS0FBS04sSUFBSTtZQUM3QjtZQUNBLElBQUlNLEtBQUtMLEtBQUssRUFBRTtnQkFDWlAsUUFBUU8sS0FBSyxHQUFJSyxLQUFLTCxLQUFLO1lBQy9CO1lBQ0EsSUFBSUssS0FBS0osV0FBVyxFQUFFO2dCQUNsQlIsUUFBUVEsV0FBVyxHQUFJSSxLQUFLSixXQUFXO1lBQzNDO1lBQ0EsSUFBSUksS0FBS0gsUUFBUSxFQUFFO2dCQUNmVCxRQUFRUyxRQUFRLEdBQUlHLEtBQUtILFFBQVE7WUFDckM7WUFDQSxJQUFJRyxLQUFLRixRQUFRLEVBQUU7Z0JBQ2ZWLFFBQVFVLFFBQVEsR0FBR0UsS0FBS0YsUUFBUTtZQUNwQztRQUNKO1FBQ0EsTUFBTUcsV0FBVyxNQUFNQyxNQUFNaEIsTUFBTUU7UUFDbkMsTUFBTUcsT0FBTyxNQUFNVSxTQUFTRSxXQUFXO1FBQ3ZDLE1BQU1iLFVBQVUsQ0FBQztRQUNqQixJQUFJVyxTQUFTWCxPQUFPLENBQUNjLE9BQU8sRUFBRTtZQUMxQkgsU0FBU1gsT0FBTyxDQUFDYyxPQUFPLENBQUMsQ0FBQ2pDLE9BQU9rQztnQkFDN0JmLE9BQU8sQ0FBQ2UsSUFBSUMsV0FBVyxHQUFHLEdBQUduQztZQUNqQztRQUNKLE9BQ0s7WUFDQzhCLFNBQVNYLE9BQU8sQ0FBRWlCLElBQUksR0FBSUgsT0FBTyxDQUFDLENBQUNDO2dCQUNqQ2YsT0FBTyxDQUFDZSxJQUFJQyxXQUFXLEdBQUcsR0FBR0wsU0FBU1gsT0FBTyxDQUFDa0IsR0FBRyxDQUFDSDtZQUN0RDtRQUNKO1FBQ0EsT0FBTztZQUNIZixTQUFTQTtZQUNUbUIsWUFBWVIsU0FBU1MsTUFBTTtZQUMzQkMsZUFBZVYsU0FBU1csVUFBVTtZQUNsQ3JCLE1BQU1QLDhEQUFRQSxDQUFDLElBQUk2QixXQUFXdEI7UUFDbEM7SUFDSjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvbGliLmVzbS9nZXR1cmwuanM/ZjkwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHsgYXJyYXlpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmwoaHJlZiwgb3B0aW9ucykge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAob3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIiksXG4gICAgICAgICAgICBoZWFkZXJzOiAob3B0aW9ucy5oZWFkZXJzIHx8IHt9KSxcbiAgICAgICAgICAgIGJvZHk6IChvcHRpb25zLmJvZHkgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcEZldGNoU2V0dXAgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHJlcXVlc3QubW9kZSA9IFwiY29yc1wiOyAvLyBuby1jb3JzLCBjb3JzLCAqc2FtZS1vcmlnaW5cbiAgICAgICAgICAgIHJlcXVlc3QuY2FjaGUgPSBcIm5vLWNhY2hlXCI7IC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWRcbiAgICAgICAgICAgIHJlcXVlc3QuY3JlZGVudGlhbHMgPSBcInNhbWUtb3JpZ2luXCI7IC8vIGluY2x1ZGUsICpzYW1lLW9yaWdpbiwgb21pdFxuICAgICAgICAgICAgcmVxdWVzdC5yZWRpcmVjdCA9IFwiZm9sbG93XCI7IC8vIG1hbnVhbCwgKmZvbGxvdywgZXJyb3JcbiAgICAgICAgICAgIHJlcXVlc3QucmVmZXJyZXIgPSBcImNsaWVudFwiOyAvLyBuby1yZWZlcnJlciwgKmNsaWVudFxuICAgICAgICB9XG4gICAgICAgIDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZmV0Y2hPcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmZldGNoT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChvcHRzLm1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm1vZGUgPSAob3B0cy5tb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmNhY2hlKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5jYWNoZSA9IChvcHRzLmNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscyA9IChvcHRzLmNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlZGlyZWN0KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZWRpcmVjdCA9IChvcHRzLnJlZGlyZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRzLnJlZmVycmVyKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZWZlcnJlciA9IG9wdHMucmVmZXJyZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBmZXRjaChocmVmLCByZXF1ZXN0KTtcbiAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKChyZXNwb25zZS5oZWFkZXJzKS5rZXlzKSgpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgIGJvZHk6IGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJvZHkpKSxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldHVybC5qcy5tYXAiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJ2YWx1ZSIsInJlc29sdmUiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiYXJyYXlpZnkiLCJnZXRVcmwiLCJocmVmIiwib3B0aW9ucyIsInJlcXVlc3QiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInVuZGVmaW5lZCIsInNraXBGZXRjaFNldHVwIiwibW9kZSIsImNhY2hlIiwiY3JlZGVudGlhbHMiLCJyZWRpcmVjdCIsInJlZmVycmVyIiwiZmV0Y2hPcHRpb25zIiwib3B0cyIsInJlc3BvbnNlIiwiZmV0Y2giLCJhcnJheUJ1ZmZlciIsImZvckVhY2giLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImtleXMiLCJnZXQiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJVaW50OEFycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethersproject/web/lib.esm/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _fetchData: function() { return /* binding */ _fetchData; },\n/* harmony export */   fetchJson: function() { return /* binding */ fetchJson; },\n/* harmony export */   poll: function() { return /* binding */ poll; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/base64.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/_version.js\");\n/* harmony import */ var _geturl__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./geturl */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/geturl.js\");\n\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n\nfunction staller(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ((0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.isBytesLike)(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(value);\n            } catch (error) {}\n            ;\n        }\n        return (0,_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_2__.hexlify)(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code)=>{\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nfunction _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n    logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n    const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n    logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\"\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof connection === \"string\") {\n        url = connection;\n    } else if (typeof connection === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for(const key in connection.headers){\n                headers[key.toLowerCase()] = {\n                    key: key,\n                    value: String(connection.headers[key])\n                };\n                if ([\n                    \"if-none-match\",\n                    \"if-modified-since\"\n                ].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"url\",\n                    url: url,\n                    user: connection.user,\n                    password: \"[REDACTED]\"\n                });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__.encode)((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = url ? url.match(reData) : null;\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: {\n                    \"content-type\": dataMatch[1] || \"text/plain\"\n                },\n                body: dataMatch[2] ? (0,_ethersproject_base64__WEBPACK_IMPORTED_MODULE_4__.decode)(dataMatch[3]) : unpercent(dataMatch[3])\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        } catch (error) {\n            logger.throwError(\"processing response error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = {\n                key: \"Content-Type\",\n                value: \"application/octet-stream\"\n            };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = {\n                key: \"Content-Length\",\n                value: String(body.length)\n            };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key)=>{\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = function() {\n        let timer = null;\n        const promise = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(()=>{\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function() {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return {\n            promise,\n            cancel\n        };\n    }();\n    const runningFetch = function() {\n        return __awaiter(this, void 0, void 0, function*() {\n            for(let attempt = 0; attempt < attemptLimit; attempt++){\n                let response = null;\n                try {\n                    response = yield (0,_geturl__WEBPACK_IMPORTED_MODULE_6__.getUrl)(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        } else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                } else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                } catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    } catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    }();\n    return Promise.race([\n        runningTimeout.promise,\n        runningFetch\n    ]);\n}\nfunction fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response)=>{\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse((0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8String)(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = (0,_ethersproject_strings__WEBPACK_IMPORTED_MODULE_3__.toUtf8Bytes)(json);\n        // Create a connection with the content-type set for JSON\n        const updated = typeof connection === \"string\" ? {\n            url: connection\n        } : (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(connection);\n        if (updated.headers) {\n            const hasContentType = Object.keys(updated.headers).filter((k)=>k.toLowerCase() === \"content-type\").length !== 0;\n            if (!hasContentType) {\n                updated.headers = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = {\n                \"content-type\": \"application/json\"\n            };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nfunction poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_5__.shallowCopy)(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function(resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = ()=>{\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(()=>{\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function(error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/_version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/wordlists/lib.esm/_version.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"wordlists/5.7.0\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxrQkFBa0IsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliLmVzbS9fdmVyc2lvbi5qcz9iMWQwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ3b3JkbGlzdHMvNS43LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV92ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js":
/*!******************************************************************!*\
  !*** ./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   langEn: function() { return /* binding */ langEn; }\n/* harmony export */ });\n/* harmony import */ var _wordlist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wordlist */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\");\n\n\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\nlet wordlist = null;\nfunction loadWords(lang) {\n    if (wordlist != null) {\n        return;\n    }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */ if (_wordlist__WEBPACK_IMPORTED_MODULE_0__.Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\nclass LangEn extends _wordlist__WEBPACK_IMPORTED_MODULE_0__.Wordlist {\n    getWord(index) {\n        loadWords(this);\n        return wordlist[index];\n    }\n    getWordIndex(word) {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n    constructor(){\n        super(\"en\");\n    }\n}\nconst langEn = new LangEn();\n_wordlist__WEBPACK_IMPORTED_MODULE_0__.Wordlist.register(langEn);\n //# sourceMappingURL=lang-en.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wordlist: function() { return /* binding */ Wordlist; },\n/* harmony export */   logger: function() { return /* binding */ logger; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/_version.js\");\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\n\n\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\nclass Wordlist {\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for(let i = 0; i < 2048; i++){\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */ if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return (0,_ethersproject_hash__WEBPACK_IMPORTED_MODULE_2__.id)(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */ if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) {}\n        }\n    }\n    constructor(locale){\n        logger.checkAbstract(new.target, Wordlist);\n        (0,_ethersproject_properties__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"locale\", locale);\n    }\n} //# sourceMappingURL=wordlist.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliLmVzbS93b3JkbGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUNiLGlDQUFpQztBQUNqQyxNQUFNQSxpQkFBaUI7QUFDa0I7QUFDa0I7QUFDWjtBQUNWO0FBQzlCLE1BQU1LLFNBQVMsSUFBSUYseURBQU1BLENBQUNDLDZDQUFPQSxFQUFFO0FBQ25DLE1BQU1FO0lBS1QsK0JBQStCO0lBQy9CQyxNQUFNQyxRQUFRLEVBQUU7UUFDWixPQUFPQSxTQUFTQyxXQUFXLEdBQUdGLEtBQUssQ0FBQztJQUN4QztJQUNBLCtCQUErQjtJQUMvQkcsS0FBS0MsS0FBSyxFQUFFO1FBQ1IsT0FBT0EsTUFBTUQsSUFBSSxDQUFDO0lBQ3RCO0lBQ0EsT0FBT0UsTUFBTUMsUUFBUSxFQUFFO1FBQ25CLE1BQU1GLFFBQVEsRUFBRTtRQUNoQixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSSxNQUFNQSxJQUFLO1lBQzNCLE1BQU1DLE9BQU9GLFNBQVNHLE9BQU8sQ0FBQ0Y7WUFDOUIsc0JBQXNCLEdBQ3RCLElBQUlBLE1BQU1ELFNBQVNJLFlBQVksQ0FBQ0YsT0FBTztnQkFDbkMsT0FBTztZQUNYO1lBQ0FKLE1BQU1PLElBQUksQ0FBQ0g7UUFDZjtRQUNBLE9BQU9kLHVEQUFFQSxDQUFDVSxNQUFNRCxJQUFJLENBQUMsUUFBUTtJQUNqQztJQUNBLE9BQU9TLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ3hCLElBQUksQ0FBQ0EsTUFBTTtZQUNQQSxPQUFPRCxLQUFLRSxNQUFNO1FBQ3RCO1FBQ0Esc0JBQXNCLEdBQ3RCLElBQUl0QixnQkFBZ0I7WUFDaEIsSUFBSTtnQkFDQSxNQUFNdUIsWUFBWUM7Z0JBQ2xCLElBQUlELFVBQVVFLE9BQU8sSUFBSUYsVUFBVUUsT0FBTyxDQUFDQyxTQUFTLEVBQUU7b0JBQ2xELElBQUksQ0FBQ0gsVUFBVUUsT0FBTyxDQUFDQyxTQUFTLENBQUNMLEtBQUssRUFBRTt3QkFDcENuQix5RUFBY0EsQ0FBQ3FCLFVBQVVFLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFTCxNQUFNRDtvQkFDdEQ7Z0JBQ0o7WUFDSixFQUNBLE9BQU9PLE9BQU8sQ0FBRTtRQUNwQjtJQUNKO0lBeENBQyxZQUFZTixNQUFNLENBQUU7UUFDaEJqQixPQUFPd0IsYUFBYSxDQUFDLFlBQVl2QjtRQUNqQ0oseUVBQWNBLENBQUMsSUFBSSxFQUFFLFVBQVVvQjtJQUNuQztBQXNDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzL2xpYi5lc20vd29yZGxpc3QuanM/NDkxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgZ2V0cyBvdmVycmlkZGVuIGJ5IHJvbGx1cFxuY29uc3QgZXhwb3J0V29yZGxpc3QgPSBmYWxzZTtcbmltcG9ydCB7IGlkIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5leHBvcnQgY2xhc3MgV29yZGxpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSkge1xuICAgICAgICBsb2dnZXIuY2hlY2tBYnN0cmFjdChuZXcudGFyZ2V0LCBXb3JkbGlzdCk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwibG9jYWxlXCIsIGxvY2FsZSk7XG4gICAgfVxuICAgIC8vIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICBzcGxpdChtbmVtb25pYykge1xuICAgICAgICByZXR1cm4gbW5lbW9uaWMudG9Mb3dlckNhc2UoKS5zcGxpdCgvICsvZyk7XG4gICAgfVxuICAgIC8vIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICBqb2luKHdvcmRzKSB7XG4gICAgICAgIHJldHVybiB3b3Jkcy5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgc3RhdGljIGNoZWNrKHdvcmRsaXN0KSB7XG4gICAgICAgIGNvbnN0IHdvcmRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjA0ODsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JkID0gd29yZGxpc3QuZ2V0V29yZChpKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKGkgIT09IHdvcmRsaXN0LmdldFdvcmRJbmRleCh3b3JkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcIjB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3b3Jkcy5wdXNoKHdvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZCh3b3Jkcy5qb2luKFwiXFxuXCIpICsgXCJcXG5cIik7XG4gICAgfVxuICAgIHN0YXRpYyByZWdpc3RlcihsYW5nLCBuYW1lKSB7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IGxhbmcubG9jYWxlO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoZXhwb3J0V29yZGxpc3QpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW55R2xvYmFsID0gd2luZG93O1xuICAgICAgICAgICAgICAgIGlmIChhbnlHbG9iYWwuX2V0aGVycyAmJiBhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KGFueUdsb2JhbC5fZXRoZXJzLndvcmRsaXN0cywgbmFtZSwgbGFuZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3QuanMubWFwIl0sIm5hbWVzIjpbImV4cG9ydFdvcmRsaXN0IiwiaWQiLCJkZWZpbmVSZWFkT25seSIsIkxvZ2dlciIsInZlcnNpb24iLCJsb2dnZXIiLCJXb3JkbGlzdCIsInNwbGl0IiwibW5lbW9uaWMiLCJ0b0xvd2VyQ2FzZSIsImpvaW4iLCJ3b3JkcyIsImNoZWNrIiwid29yZGxpc3QiLCJpIiwid29yZCIsImdldFdvcmQiLCJnZXRXb3JkSW5kZXgiLCJwdXNoIiwicmVnaXN0ZXIiLCJsYW5nIiwibmFtZSIsImxvY2FsZSIsImFueUdsb2JhbCIsIndpbmRvdyIsIl9ldGhlcnMiLCJ3b3JkbGlzdHMiLCJlcnJvciIsImNvbnN0cnVjdG9yIiwiY2hlY2tBYnN0cmFjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js":
/*!********************************************************************!*\
  !*** ./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlists: function() { return /* binding */ wordlists; }\n/* harmony export */ });\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lang-en */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js\");\n\n\nconst wordlists = {\n    en: _lang_en__WEBPACK_IMPORTED_MODULE_0__.langEn\n}; //# sourceMappingURL=wordlists.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliLmVzbS93b3JkbGlzdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUM0QjtBQUNsQyxNQUFNRSxZQUFZO0lBQ3JCRCxJQUFJQSw0Q0FBRUE7QUFDVixFQUFFLENBQ0YscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvbGliLmVzbS93b3JkbGlzdHMuanM/NGFmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGxhbmdFbiBhcyBlbiB9IGZyb20gXCIuL2xhbmctZW5cIjtcbmV4cG9ydCBjb25zdCB3b3JkbGlzdHMgPSB7XG4gICAgZW46IGVuXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29yZGxpc3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJsYW5nRW4iLCJlbiIsIndvcmRsaXN0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/aes-js/index.js":
/*!**************************************!*\
  !*** ./node_modules/aes-js/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n(function(root) {\n    function checkInt(value) {\n        return parseInt(value) === value;\n    }\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) {\n            return false;\n        }\n        for(var i = 0; i < arrayish.length; i++){\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function coerceArray(arg, copy) {\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === \"Uint8Array\") {\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n            return arg;\n        }\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error(\"Array contains invalid value: \" + arg);\n            }\n            return new Uint8Array(arg);\n        }\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n        throw new Error(\"unsupported array-like object\");\n    }\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n    var convertUtf8 = function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while(i < text.length){\n                var c = text.charCodeAt(i++);\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16));\n                    i += 2;\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c);\n                }\n            }\n            return coerceArray(result);\n        }\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n            while(i < bytes.length){\n                var c = bytes[i];\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));\n                    i += 3;\n                }\n            }\n            return result.join(\"\");\n        }\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes\n        };\n    }();\n    var convertHex = function() {\n        function toBytes(text) {\n            var result = [];\n            for(var i = 0; i < text.length; i += 2){\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n            return result;\n        }\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = \"0123456789abcdef\";\n        function fromBytes(bytes) {\n            var result = [];\n            for(var i = 0; i < bytes.length; i++){\n                var v = bytes[i];\n                result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n            }\n            return result.join(\"\");\n        }\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes\n        };\n    }();\n    // Number of rounds by keysize\n    var numberOfRounds = {\n        16: 10,\n        24: 12,\n        32: 14\n    };\n    // Round constant words\n    var rcon = [\n        0x01,\n        0x02,\n        0x04,\n        0x08,\n        0x10,\n        0x20,\n        0x40,\n        0x80,\n        0x1b,\n        0x36,\n        0x6c,\n        0xd8,\n        0xab,\n        0x4d,\n        0x9a,\n        0x2f,\n        0x5e,\n        0xbc,\n        0x63,\n        0xc6,\n        0x97,\n        0x35,\n        0x6a,\n        0xd4,\n        0xb3,\n        0x7d,\n        0xfa,\n        0xef,\n        0xc5,\n        0x91\n    ];\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [\n        0x63,\n        0x7c,\n        0x77,\n        0x7b,\n        0xf2,\n        0x6b,\n        0x6f,\n        0xc5,\n        0x30,\n        0x01,\n        0x67,\n        0x2b,\n        0xfe,\n        0xd7,\n        0xab,\n        0x76,\n        0xca,\n        0x82,\n        0xc9,\n        0x7d,\n        0xfa,\n        0x59,\n        0x47,\n        0xf0,\n        0xad,\n        0xd4,\n        0xa2,\n        0xaf,\n        0x9c,\n        0xa4,\n        0x72,\n        0xc0,\n        0xb7,\n        0xfd,\n        0x93,\n        0x26,\n        0x36,\n        0x3f,\n        0xf7,\n        0xcc,\n        0x34,\n        0xa5,\n        0xe5,\n        0xf1,\n        0x71,\n        0xd8,\n        0x31,\n        0x15,\n        0x04,\n        0xc7,\n        0x23,\n        0xc3,\n        0x18,\n        0x96,\n        0x05,\n        0x9a,\n        0x07,\n        0x12,\n        0x80,\n        0xe2,\n        0xeb,\n        0x27,\n        0xb2,\n        0x75,\n        0x09,\n        0x83,\n        0x2c,\n        0x1a,\n        0x1b,\n        0x6e,\n        0x5a,\n        0xa0,\n        0x52,\n        0x3b,\n        0xd6,\n        0xb3,\n        0x29,\n        0xe3,\n        0x2f,\n        0x84,\n        0x53,\n        0xd1,\n        0x00,\n        0xed,\n        0x20,\n        0xfc,\n        0xb1,\n        0x5b,\n        0x6a,\n        0xcb,\n        0xbe,\n        0x39,\n        0x4a,\n        0x4c,\n        0x58,\n        0xcf,\n        0xd0,\n        0xef,\n        0xaa,\n        0xfb,\n        0x43,\n        0x4d,\n        0x33,\n        0x85,\n        0x45,\n        0xf9,\n        0x02,\n        0x7f,\n        0x50,\n        0x3c,\n        0x9f,\n        0xa8,\n        0x51,\n        0xa3,\n        0x40,\n        0x8f,\n        0x92,\n        0x9d,\n        0x38,\n        0xf5,\n        0xbc,\n        0xb6,\n        0xda,\n        0x21,\n        0x10,\n        0xff,\n        0xf3,\n        0xd2,\n        0xcd,\n        0x0c,\n        0x13,\n        0xec,\n        0x5f,\n        0x97,\n        0x44,\n        0x17,\n        0xc4,\n        0xa7,\n        0x7e,\n        0x3d,\n        0x64,\n        0x5d,\n        0x19,\n        0x73,\n        0x60,\n        0x81,\n        0x4f,\n        0xdc,\n        0x22,\n        0x2a,\n        0x90,\n        0x88,\n        0x46,\n        0xee,\n        0xb8,\n        0x14,\n        0xde,\n        0x5e,\n        0x0b,\n        0xdb,\n        0xe0,\n        0x32,\n        0x3a,\n        0x0a,\n        0x49,\n        0x06,\n        0x24,\n        0x5c,\n        0xc2,\n        0xd3,\n        0xac,\n        0x62,\n        0x91,\n        0x95,\n        0xe4,\n        0x79,\n        0xe7,\n        0xc8,\n        0x37,\n        0x6d,\n        0x8d,\n        0xd5,\n        0x4e,\n        0xa9,\n        0x6c,\n        0x56,\n        0xf4,\n        0xea,\n        0x65,\n        0x7a,\n        0xae,\n        0x08,\n        0xba,\n        0x78,\n        0x25,\n        0x2e,\n        0x1c,\n        0xa6,\n        0xb4,\n        0xc6,\n        0xe8,\n        0xdd,\n        0x74,\n        0x1f,\n        0x4b,\n        0xbd,\n        0x8b,\n        0x8a,\n        0x70,\n        0x3e,\n        0xb5,\n        0x66,\n        0x48,\n        0x03,\n        0xf6,\n        0x0e,\n        0x61,\n        0x35,\n        0x57,\n        0xb9,\n        0x86,\n        0xc1,\n        0x1d,\n        0x9e,\n        0xe1,\n        0xf8,\n        0x98,\n        0x11,\n        0x69,\n        0xd9,\n        0x8e,\n        0x94,\n        0x9b,\n        0x1e,\n        0x87,\n        0xe9,\n        0xce,\n        0x55,\n        0x28,\n        0xdf,\n        0x8c,\n        0xa1,\n        0x89,\n        0x0d,\n        0xbf,\n        0xe6,\n        0x42,\n        0x68,\n        0x41,\n        0x99,\n        0x2d,\n        0x0f,\n        0xb0,\n        0x54,\n        0xbb,\n        0x16\n    ];\n    var Si = [\n        0x52,\n        0x09,\n        0x6a,\n        0xd5,\n        0x30,\n        0x36,\n        0xa5,\n        0x38,\n        0xbf,\n        0x40,\n        0xa3,\n        0x9e,\n        0x81,\n        0xf3,\n        0xd7,\n        0xfb,\n        0x7c,\n        0xe3,\n        0x39,\n        0x82,\n        0x9b,\n        0x2f,\n        0xff,\n        0x87,\n        0x34,\n        0x8e,\n        0x43,\n        0x44,\n        0xc4,\n        0xde,\n        0xe9,\n        0xcb,\n        0x54,\n        0x7b,\n        0x94,\n        0x32,\n        0xa6,\n        0xc2,\n        0x23,\n        0x3d,\n        0xee,\n        0x4c,\n        0x95,\n        0x0b,\n        0x42,\n        0xfa,\n        0xc3,\n        0x4e,\n        0x08,\n        0x2e,\n        0xa1,\n        0x66,\n        0x28,\n        0xd9,\n        0x24,\n        0xb2,\n        0x76,\n        0x5b,\n        0xa2,\n        0x49,\n        0x6d,\n        0x8b,\n        0xd1,\n        0x25,\n        0x72,\n        0xf8,\n        0xf6,\n        0x64,\n        0x86,\n        0x68,\n        0x98,\n        0x16,\n        0xd4,\n        0xa4,\n        0x5c,\n        0xcc,\n        0x5d,\n        0x65,\n        0xb6,\n        0x92,\n        0x6c,\n        0x70,\n        0x48,\n        0x50,\n        0xfd,\n        0xed,\n        0xb9,\n        0xda,\n        0x5e,\n        0x15,\n        0x46,\n        0x57,\n        0xa7,\n        0x8d,\n        0x9d,\n        0x84,\n        0x90,\n        0xd8,\n        0xab,\n        0x00,\n        0x8c,\n        0xbc,\n        0xd3,\n        0x0a,\n        0xf7,\n        0xe4,\n        0x58,\n        0x05,\n        0xb8,\n        0xb3,\n        0x45,\n        0x06,\n        0xd0,\n        0x2c,\n        0x1e,\n        0x8f,\n        0xca,\n        0x3f,\n        0x0f,\n        0x02,\n        0xc1,\n        0xaf,\n        0xbd,\n        0x03,\n        0x01,\n        0x13,\n        0x8a,\n        0x6b,\n        0x3a,\n        0x91,\n        0x11,\n        0x41,\n        0x4f,\n        0x67,\n        0xdc,\n        0xea,\n        0x97,\n        0xf2,\n        0xcf,\n        0xce,\n        0xf0,\n        0xb4,\n        0xe6,\n        0x73,\n        0x96,\n        0xac,\n        0x74,\n        0x22,\n        0xe7,\n        0xad,\n        0x35,\n        0x85,\n        0xe2,\n        0xf9,\n        0x37,\n        0xe8,\n        0x1c,\n        0x75,\n        0xdf,\n        0x6e,\n        0x47,\n        0xf1,\n        0x1a,\n        0x71,\n        0x1d,\n        0x29,\n        0xc5,\n        0x89,\n        0x6f,\n        0xb7,\n        0x62,\n        0x0e,\n        0xaa,\n        0x18,\n        0xbe,\n        0x1b,\n        0xfc,\n        0x56,\n        0x3e,\n        0x4b,\n        0xc6,\n        0xd2,\n        0x79,\n        0x20,\n        0x9a,\n        0xdb,\n        0xc0,\n        0xfe,\n        0x78,\n        0xcd,\n        0x5a,\n        0xf4,\n        0x1f,\n        0xdd,\n        0xa8,\n        0x33,\n        0x88,\n        0x07,\n        0xc7,\n        0x31,\n        0xb1,\n        0x12,\n        0x10,\n        0x59,\n        0x27,\n        0x80,\n        0xec,\n        0x5f,\n        0x60,\n        0x51,\n        0x7f,\n        0xa9,\n        0x19,\n        0xb5,\n        0x4a,\n        0x0d,\n        0x2d,\n        0xe5,\n        0x7a,\n        0x9f,\n        0x93,\n        0xc9,\n        0x9c,\n        0xef,\n        0xa0,\n        0xe0,\n        0x3b,\n        0x4d,\n        0xae,\n        0x2a,\n        0xf5,\n        0xb0,\n        0xc8,\n        0xeb,\n        0xbb,\n        0x3c,\n        0x83,\n        0x53,\n        0x99,\n        0x61,\n        0x17,\n        0x2b,\n        0x04,\n        0x7e,\n        0xba,\n        0x77,\n        0xd6,\n        0x26,\n        0xe1,\n        0x69,\n        0x14,\n        0x63,\n        0x55,\n        0x21,\n        0x0c,\n        0x7d\n    ];\n    // Transformations for encryption\n    var T1 = [\n        0xc66363a5,\n        0xf87c7c84,\n        0xee777799,\n        0xf67b7b8d,\n        0xfff2f20d,\n        0xd66b6bbd,\n        0xde6f6fb1,\n        0x91c5c554,\n        0x60303050,\n        0x02010103,\n        0xce6767a9,\n        0x562b2b7d,\n        0xe7fefe19,\n        0xb5d7d762,\n        0x4dababe6,\n        0xec76769a,\n        0x8fcaca45,\n        0x1f82829d,\n        0x89c9c940,\n        0xfa7d7d87,\n        0xeffafa15,\n        0xb25959eb,\n        0x8e4747c9,\n        0xfbf0f00b,\n        0x41adadec,\n        0xb3d4d467,\n        0x5fa2a2fd,\n        0x45afafea,\n        0x239c9cbf,\n        0x53a4a4f7,\n        0xe4727296,\n        0x9bc0c05b,\n        0x75b7b7c2,\n        0xe1fdfd1c,\n        0x3d9393ae,\n        0x4c26266a,\n        0x6c36365a,\n        0x7e3f3f41,\n        0xf5f7f702,\n        0x83cccc4f,\n        0x6834345c,\n        0x51a5a5f4,\n        0xd1e5e534,\n        0xf9f1f108,\n        0xe2717193,\n        0xabd8d873,\n        0x62313153,\n        0x2a15153f,\n        0x0804040c,\n        0x95c7c752,\n        0x46232365,\n        0x9dc3c35e,\n        0x30181828,\n        0x379696a1,\n        0x0a05050f,\n        0x2f9a9ab5,\n        0x0e070709,\n        0x24121236,\n        0x1b80809b,\n        0xdfe2e23d,\n        0xcdebeb26,\n        0x4e272769,\n        0x7fb2b2cd,\n        0xea75759f,\n        0x1209091b,\n        0x1d83839e,\n        0x582c2c74,\n        0x341a1a2e,\n        0x361b1b2d,\n        0xdc6e6eb2,\n        0xb45a5aee,\n        0x5ba0a0fb,\n        0xa45252f6,\n        0x763b3b4d,\n        0xb7d6d661,\n        0x7db3b3ce,\n        0x5229297b,\n        0xdde3e33e,\n        0x5e2f2f71,\n        0x13848497,\n        0xa65353f5,\n        0xb9d1d168,\n        0x00000000,\n        0xc1eded2c,\n        0x40202060,\n        0xe3fcfc1f,\n        0x79b1b1c8,\n        0xb65b5bed,\n        0xd46a6abe,\n        0x8dcbcb46,\n        0x67bebed9,\n        0x7239394b,\n        0x944a4ade,\n        0x984c4cd4,\n        0xb05858e8,\n        0x85cfcf4a,\n        0xbbd0d06b,\n        0xc5efef2a,\n        0x4faaaae5,\n        0xedfbfb16,\n        0x864343c5,\n        0x9a4d4dd7,\n        0x66333355,\n        0x11858594,\n        0x8a4545cf,\n        0xe9f9f910,\n        0x04020206,\n        0xfe7f7f81,\n        0xa05050f0,\n        0x783c3c44,\n        0x259f9fba,\n        0x4ba8a8e3,\n        0xa25151f3,\n        0x5da3a3fe,\n        0x804040c0,\n        0x058f8f8a,\n        0x3f9292ad,\n        0x219d9dbc,\n        0x70383848,\n        0xf1f5f504,\n        0x63bcbcdf,\n        0x77b6b6c1,\n        0xafdada75,\n        0x42212163,\n        0x20101030,\n        0xe5ffff1a,\n        0xfdf3f30e,\n        0xbfd2d26d,\n        0x81cdcd4c,\n        0x180c0c14,\n        0x26131335,\n        0xc3ecec2f,\n        0xbe5f5fe1,\n        0x359797a2,\n        0x884444cc,\n        0x2e171739,\n        0x93c4c457,\n        0x55a7a7f2,\n        0xfc7e7e82,\n        0x7a3d3d47,\n        0xc86464ac,\n        0xba5d5de7,\n        0x3219192b,\n        0xe6737395,\n        0xc06060a0,\n        0x19818198,\n        0x9e4f4fd1,\n        0xa3dcdc7f,\n        0x44222266,\n        0x542a2a7e,\n        0x3b9090ab,\n        0x0b888883,\n        0x8c4646ca,\n        0xc7eeee29,\n        0x6bb8b8d3,\n        0x2814143c,\n        0xa7dede79,\n        0xbc5e5ee2,\n        0x160b0b1d,\n        0xaddbdb76,\n        0xdbe0e03b,\n        0x64323256,\n        0x743a3a4e,\n        0x140a0a1e,\n        0x924949db,\n        0x0c06060a,\n        0x4824246c,\n        0xb85c5ce4,\n        0x9fc2c25d,\n        0xbdd3d36e,\n        0x43acacef,\n        0xc46262a6,\n        0x399191a8,\n        0x319595a4,\n        0xd3e4e437,\n        0xf279798b,\n        0xd5e7e732,\n        0x8bc8c843,\n        0x6e373759,\n        0xda6d6db7,\n        0x018d8d8c,\n        0xb1d5d564,\n        0x9c4e4ed2,\n        0x49a9a9e0,\n        0xd86c6cb4,\n        0xac5656fa,\n        0xf3f4f407,\n        0xcfeaea25,\n        0xca6565af,\n        0xf47a7a8e,\n        0x47aeaee9,\n        0x10080818,\n        0x6fbabad5,\n        0xf0787888,\n        0x4a25256f,\n        0x5c2e2e72,\n        0x381c1c24,\n        0x57a6a6f1,\n        0x73b4b4c7,\n        0x97c6c651,\n        0xcbe8e823,\n        0xa1dddd7c,\n        0xe874749c,\n        0x3e1f1f21,\n        0x964b4bdd,\n        0x61bdbddc,\n        0x0d8b8b86,\n        0x0f8a8a85,\n        0xe0707090,\n        0x7c3e3e42,\n        0x71b5b5c4,\n        0xcc6666aa,\n        0x904848d8,\n        0x06030305,\n        0xf7f6f601,\n        0x1c0e0e12,\n        0xc26161a3,\n        0x6a35355f,\n        0xae5757f9,\n        0x69b9b9d0,\n        0x17868691,\n        0x99c1c158,\n        0x3a1d1d27,\n        0x279e9eb9,\n        0xd9e1e138,\n        0xebf8f813,\n        0x2b9898b3,\n        0x22111133,\n        0xd26969bb,\n        0xa9d9d970,\n        0x078e8e89,\n        0x339494a7,\n        0x2d9b9bb6,\n        0x3c1e1e22,\n        0x15878792,\n        0xc9e9e920,\n        0x87cece49,\n        0xaa5555ff,\n        0x50282878,\n        0xa5dfdf7a,\n        0x038c8c8f,\n        0x59a1a1f8,\n        0x09898980,\n        0x1a0d0d17,\n        0x65bfbfda,\n        0xd7e6e631,\n        0x844242c6,\n        0xd06868b8,\n        0x824141c3,\n        0x299999b0,\n        0x5a2d2d77,\n        0x1e0f0f11,\n        0x7bb0b0cb,\n        0xa85454fc,\n        0x6dbbbbd6,\n        0x2c16163a\n    ];\n    var T2 = [\n        0xa5c66363,\n        0x84f87c7c,\n        0x99ee7777,\n        0x8df67b7b,\n        0x0dfff2f2,\n        0xbdd66b6b,\n        0xb1de6f6f,\n        0x5491c5c5,\n        0x50603030,\n        0x03020101,\n        0xa9ce6767,\n        0x7d562b2b,\n        0x19e7fefe,\n        0x62b5d7d7,\n        0xe64dabab,\n        0x9aec7676,\n        0x458fcaca,\n        0x9d1f8282,\n        0x4089c9c9,\n        0x87fa7d7d,\n        0x15effafa,\n        0xebb25959,\n        0xc98e4747,\n        0x0bfbf0f0,\n        0xec41adad,\n        0x67b3d4d4,\n        0xfd5fa2a2,\n        0xea45afaf,\n        0xbf239c9c,\n        0xf753a4a4,\n        0x96e47272,\n        0x5b9bc0c0,\n        0xc275b7b7,\n        0x1ce1fdfd,\n        0xae3d9393,\n        0x6a4c2626,\n        0x5a6c3636,\n        0x417e3f3f,\n        0x02f5f7f7,\n        0x4f83cccc,\n        0x5c683434,\n        0xf451a5a5,\n        0x34d1e5e5,\n        0x08f9f1f1,\n        0x93e27171,\n        0x73abd8d8,\n        0x53623131,\n        0x3f2a1515,\n        0x0c080404,\n        0x5295c7c7,\n        0x65462323,\n        0x5e9dc3c3,\n        0x28301818,\n        0xa1379696,\n        0x0f0a0505,\n        0xb52f9a9a,\n        0x090e0707,\n        0x36241212,\n        0x9b1b8080,\n        0x3ddfe2e2,\n        0x26cdebeb,\n        0x694e2727,\n        0xcd7fb2b2,\n        0x9fea7575,\n        0x1b120909,\n        0x9e1d8383,\n        0x74582c2c,\n        0x2e341a1a,\n        0x2d361b1b,\n        0xb2dc6e6e,\n        0xeeb45a5a,\n        0xfb5ba0a0,\n        0xf6a45252,\n        0x4d763b3b,\n        0x61b7d6d6,\n        0xce7db3b3,\n        0x7b522929,\n        0x3edde3e3,\n        0x715e2f2f,\n        0x97138484,\n        0xf5a65353,\n        0x68b9d1d1,\n        0x00000000,\n        0x2cc1eded,\n        0x60402020,\n        0x1fe3fcfc,\n        0xc879b1b1,\n        0xedb65b5b,\n        0xbed46a6a,\n        0x468dcbcb,\n        0xd967bebe,\n        0x4b723939,\n        0xde944a4a,\n        0xd4984c4c,\n        0xe8b05858,\n        0x4a85cfcf,\n        0x6bbbd0d0,\n        0x2ac5efef,\n        0xe54faaaa,\n        0x16edfbfb,\n        0xc5864343,\n        0xd79a4d4d,\n        0x55663333,\n        0x94118585,\n        0xcf8a4545,\n        0x10e9f9f9,\n        0x06040202,\n        0x81fe7f7f,\n        0xf0a05050,\n        0x44783c3c,\n        0xba259f9f,\n        0xe34ba8a8,\n        0xf3a25151,\n        0xfe5da3a3,\n        0xc0804040,\n        0x8a058f8f,\n        0xad3f9292,\n        0xbc219d9d,\n        0x48703838,\n        0x04f1f5f5,\n        0xdf63bcbc,\n        0xc177b6b6,\n        0x75afdada,\n        0x63422121,\n        0x30201010,\n        0x1ae5ffff,\n        0x0efdf3f3,\n        0x6dbfd2d2,\n        0x4c81cdcd,\n        0x14180c0c,\n        0x35261313,\n        0x2fc3ecec,\n        0xe1be5f5f,\n        0xa2359797,\n        0xcc884444,\n        0x392e1717,\n        0x5793c4c4,\n        0xf255a7a7,\n        0x82fc7e7e,\n        0x477a3d3d,\n        0xacc86464,\n        0xe7ba5d5d,\n        0x2b321919,\n        0x95e67373,\n        0xa0c06060,\n        0x98198181,\n        0xd19e4f4f,\n        0x7fa3dcdc,\n        0x66442222,\n        0x7e542a2a,\n        0xab3b9090,\n        0x830b8888,\n        0xca8c4646,\n        0x29c7eeee,\n        0xd36bb8b8,\n        0x3c281414,\n        0x79a7dede,\n        0xe2bc5e5e,\n        0x1d160b0b,\n        0x76addbdb,\n        0x3bdbe0e0,\n        0x56643232,\n        0x4e743a3a,\n        0x1e140a0a,\n        0xdb924949,\n        0x0a0c0606,\n        0x6c482424,\n        0xe4b85c5c,\n        0x5d9fc2c2,\n        0x6ebdd3d3,\n        0xef43acac,\n        0xa6c46262,\n        0xa8399191,\n        0xa4319595,\n        0x37d3e4e4,\n        0x8bf27979,\n        0x32d5e7e7,\n        0x438bc8c8,\n        0x596e3737,\n        0xb7da6d6d,\n        0x8c018d8d,\n        0x64b1d5d5,\n        0xd29c4e4e,\n        0xe049a9a9,\n        0xb4d86c6c,\n        0xfaac5656,\n        0x07f3f4f4,\n        0x25cfeaea,\n        0xafca6565,\n        0x8ef47a7a,\n        0xe947aeae,\n        0x18100808,\n        0xd56fbaba,\n        0x88f07878,\n        0x6f4a2525,\n        0x725c2e2e,\n        0x24381c1c,\n        0xf157a6a6,\n        0xc773b4b4,\n        0x5197c6c6,\n        0x23cbe8e8,\n        0x7ca1dddd,\n        0x9ce87474,\n        0x213e1f1f,\n        0xdd964b4b,\n        0xdc61bdbd,\n        0x860d8b8b,\n        0x850f8a8a,\n        0x90e07070,\n        0x427c3e3e,\n        0xc471b5b5,\n        0xaacc6666,\n        0xd8904848,\n        0x05060303,\n        0x01f7f6f6,\n        0x121c0e0e,\n        0xa3c26161,\n        0x5f6a3535,\n        0xf9ae5757,\n        0xd069b9b9,\n        0x91178686,\n        0x5899c1c1,\n        0x273a1d1d,\n        0xb9279e9e,\n        0x38d9e1e1,\n        0x13ebf8f8,\n        0xb32b9898,\n        0x33221111,\n        0xbbd26969,\n        0x70a9d9d9,\n        0x89078e8e,\n        0xa7339494,\n        0xb62d9b9b,\n        0x223c1e1e,\n        0x92158787,\n        0x20c9e9e9,\n        0x4987cece,\n        0xffaa5555,\n        0x78502828,\n        0x7aa5dfdf,\n        0x8f038c8c,\n        0xf859a1a1,\n        0x80098989,\n        0x171a0d0d,\n        0xda65bfbf,\n        0x31d7e6e6,\n        0xc6844242,\n        0xb8d06868,\n        0xc3824141,\n        0xb0299999,\n        0x775a2d2d,\n        0x111e0f0f,\n        0xcb7bb0b0,\n        0xfca85454,\n        0xd66dbbbb,\n        0x3a2c1616\n    ];\n    var T3 = [\n        0x63a5c663,\n        0x7c84f87c,\n        0x7799ee77,\n        0x7b8df67b,\n        0xf20dfff2,\n        0x6bbdd66b,\n        0x6fb1de6f,\n        0xc55491c5,\n        0x30506030,\n        0x01030201,\n        0x67a9ce67,\n        0x2b7d562b,\n        0xfe19e7fe,\n        0xd762b5d7,\n        0xabe64dab,\n        0x769aec76,\n        0xca458fca,\n        0x829d1f82,\n        0xc94089c9,\n        0x7d87fa7d,\n        0xfa15effa,\n        0x59ebb259,\n        0x47c98e47,\n        0xf00bfbf0,\n        0xadec41ad,\n        0xd467b3d4,\n        0xa2fd5fa2,\n        0xafea45af,\n        0x9cbf239c,\n        0xa4f753a4,\n        0x7296e472,\n        0xc05b9bc0,\n        0xb7c275b7,\n        0xfd1ce1fd,\n        0x93ae3d93,\n        0x266a4c26,\n        0x365a6c36,\n        0x3f417e3f,\n        0xf702f5f7,\n        0xcc4f83cc,\n        0x345c6834,\n        0xa5f451a5,\n        0xe534d1e5,\n        0xf108f9f1,\n        0x7193e271,\n        0xd873abd8,\n        0x31536231,\n        0x153f2a15,\n        0x040c0804,\n        0xc75295c7,\n        0x23654623,\n        0xc35e9dc3,\n        0x18283018,\n        0x96a13796,\n        0x050f0a05,\n        0x9ab52f9a,\n        0x07090e07,\n        0x12362412,\n        0x809b1b80,\n        0xe23ddfe2,\n        0xeb26cdeb,\n        0x27694e27,\n        0xb2cd7fb2,\n        0x759fea75,\n        0x091b1209,\n        0x839e1d83,\n        0x2c74582c,\n        0x1a2e341a,\n        0x1b2d361b,\n        0x6eb2dc6e,\n        0x5aeeb45a,\n        0xa0fb5ba0,\n        0x52f6a452,\n        0x3b4d763b,\n        0xd661b7d6,\n        0xb3ce7db3,\n        0x297b5229,\n        0xe33edde3,\n        0x2f715e2f,\n        0x84971384,\n        0x53f5a653,\n        0xd168b9d1,\n        0x00000000,\n        0xed2cc1ed,\n        0x20604020,\n        0xfc1fe3fc,\n        0xb1c879b1,\n        0x5bedb65b,\n        0x6abed46a,\n        0xcb468dcb,\n        0xbed967be,\n        0x394b7239,\n        0x4ade944a,\n        0x4cd4984c,\n        0x58e8b058,\n        0xcf4a85cf,\n        0xd06bbbd0,\n        0xef2ac5ef,\n        0xaae54faa,\n        0xfb16edfb,\n        0x43c58643,\n        0x4dd79a4d,\n        0x33556633,\n        0x85941185,\n        0x45cf8a45,\n        0xf910e9f9,\n        0x02060402,\n        0x7f81fe7f,\n        0x50f0a050,\n        0x3c44783c,\n        0x9fba259f,\n        0xa8e34ba8,\n        0x51f3a251,\n        0xa3fe5da3,\n        0x40c08040,\n        0x8f8a058f,\n        0x92ad3f92,\n        0x9dbc219d,\n        0x38487038,\n        0xf504f1f5,\n        0xbcdf63bc,\n        0xb6c177b6,\n        0xda75afda,\n        0x21634221,\n        0x10302010,\n        0xff1ae5ff,\n        0xf30efdf3,\n        0xd26dbfd2,\n        0xcd4c81cd,\n        0x0c14180c,\n        0x13352613,\n        0xec2fc3ec,\n        0x5fe1be5f,\n        0x97a23597,\n        0x44cc8844,\n        0x17392e17,\n        0xc45793c4,\n        0xa7f255a7,\n        0x7e82fc7e,\n        0x3d477a3d,\n        0x64acc864,\n        0x5de7ba5d,\n        0x192b3219,\n        0x7395e673,\n        0x60a0c060,\n        0x81981981,\n        0x4fd19e4f,\n        0xdc7fa3dc,\n        0x22664422,\n        0x2a7e542a,\n        0x90ab3b90,\n        0x88830b88,\n        0x46ca8c46,\n        0xee29c7ee,\n        0xb8d36bb8,\n        0x143c2814,\n        0xde79a7de,\n        0x5ee2bc5e,\n        0x0b1d160b,\n        0xdb76addb,\n        0xe03bdbe0,\n        0x32566432,\n        0x3a4e743a,\n        0x0a1e140a,\n        0x49db9249,\n        0x060a0c06,\n        0x246c4824,\n        0x5ce4b85c,\n        0xc25d9fc2,\n        0xd36ebdd3,\n        0xacef43ac,\n        0x62a6c462,\n        0x91a83991,\n        0x95a43195,\n        0xe437d3e4,\n        0x798bf279,\n        0xe732d5e7,\n        0xc8438bc8,\n        0x37596e37,\n        0x6db7da6d,\n        0x8d8c018d,\n        0xd564b1d5,\n        0x4ed29c4e,\n        0xa9e049a9,\n        0x6cb4d86c,\n        0x56faac56,\n        0xf407f3f4,\n        0xea25cfea,\n        0x65afca65,\n        0x7a8ef47a,\n        0xaee947ae,\n        0x08181008,\n        0xbad56fba,\n        0x7888f078,\n        0x256f4a25,\n        0x2e725c2e,\n        0x1c24381c,\n        0xa6f157a6,\n        0xb4c773b4,\n        0xc65197c6,\n        0xe823cbe8,\n        0xdd7ca1dd,\n        0x749ce874,\n        0x1f213e1f,\n        0x4bdd964b,\n        0xbddc61bd,\n        0x8b860d8b,\n        0x8a850f8a,\n        0x7090e070,\n        0x3e427c3e,\n        0xb5c471b5,\n        0x66aacc66,\n        0x48d89048,\n        0x03050603,\n        0xf601f7f6,\n        0x0e121c0e,\n        0x61a3c261,\n        0x355f6a35,\n        0x57f9ae57,\n        0xb9d069b9,\n        0x86911786,\n        0xc15899c1,\n        0x1d273a1d,\n        0x9eb9279e,\n        0xe138d9e1,\n        0xf813ebf8,\n        0x98b32b98,\n        0x11332211,\n        0x69bbd269,\n        0xd970a9d9,\n        0x8e89078e,\n        0x94a73394,\n        0x9bb62d9b,\n        0x1e223c1e,\n        0x87921587,\n        0xe920c9e9,\n        0xce4987ce,\n        0x55ffaa55,\n        0x28785028,\n        0xdf7aa5df,\n        0x8c8f038c,\n        0xa1f859a1,\n        0x89800989,\n        0x0d171a0d,\n        0xbfda65bf,\n        0xe631d7e6,\n        0x42c68442,\n        0x68b8d068,\n        0x41c38241,\n        0x99b02999,\n        0x2d775a2d,\n        0x0f111e0f,\n        0xb0cb7bb0,\n        0x54fca854,\n        0xbbd66dbb,\n        0x163a2c16\n    ];\n    var T4 = [\n        0x6363a5c6,\n        0x7c7c84f8,\n        0x777799ee,\n        0x7b7b8df6,\n        0xf2f20dff,\n        0x6b6bbdd6,\n        0x6f6fb1de,\n        0xc5c55491,\n        0x30305060,\n        0x01010302,\n        0x6767a9ce,\n        0x2b2b7d56,\n        0xfefe19e7,\n        0xd7d762b5,\n        0xababe64d,\n        0x76769aec,\n        0xcaca458f,\n        0x82829d1f,\n        0xc9c94089,\n        0x7d7d87fa,\n        0xfafa15ef,\n        0x5959ebb2,\n        0x4747c98e,\n        0xf0f00bfb,\n        0xadadec41,\n        0xd4d467b3,\n        0xa2a2fd5f,\n        0xafafea45,\n        0x9c9cbf23,\n        0xa4a4f753,\n        0x727296e4,\n        0xc0c05b9b,\n        0xb7b7c275,\n        0xfdfd1ce1,\n        0x9393ae3d,\n        0x26266a4c,\n        0x36365a6c,\n        0x3f3f417e,\n        0xf7f702f5,\n        0xcccc4f83,\n        0x34345c68,\n        0xa5a5f451,\n        0xe5e534d1,\n        0xf1f108f9,\n        0x717193e2,\n        0xd8d873ab,\n        0x31315362,\n        0x15153f2a,\n        0x04040c08,\n        0xc7c75295,\n        0x23236546,\n        0xc3c35e9d,\n        0x18182830,\n        0x9696a137,\n        0x05050f0a,\n        0x9a9ab52f,\n        0x0707090e,\n        0x12123624,\n        0x80809b1b,\n        0xe2e23ddf,\n        0xebeb26cd,\n        0x2727694e,\n        0xb2b2cd7f,\n        0x75759fea,\n        0x09091b12,\n        0x83839e1d,\n        0x2c2c7458,\n        0x1a1a2e34,\n        0x1b1b2d36,\n        0x6e6eb2dc,\n        0x5a5aeeb4,\n        0xa0a0fb5b,\n        0x5252f6a4,\n        0x3b3b4d76,\n        0xd6d661b7,\n        0xb3b3ce7d,\n        0x29297b52,\n        0xe3e33edd,\n        0x2f2f715e,\n        0x84849713,\n        0x5353f5a6,\n        0xd1d168b9,\n        0x00000000,\n        0xeded2cc1,\n        0x20206040,\n        0xfcfc1fe3,\n        0xb1b1c879,\n        0x5b5bedb6,\n        0x6a6abed4,\n        0xcbcb468d,\n        0xbebed967,\n        0x39394b72,\n        0x4a4ade94,\n        0x4c4cd498,\n        0x5858e8b0,\n        0xcfcf4a85,\n        0xd0d06bbb,\n        0xefef2ac5,\n        0xaaaae54f,\n        0xfbfb16ed,\n        0x4343c586,\n        0x4d4dd79a,\n        0x33335566,\n        0x85859411,\n        0x4545cf8a,\n        0xf9f910e9,\n        0x02020604,\n        0x7f7f81fe,\n        0x5050f0a0,\n        0x3c3c4478,\n        0x9f9fba25,\n        0xa8a8e34b,\n        0x5151f3a2,\n        0xa3a3fe5d,\n        0x4040c080,\n        0x8f8f8a05,\n        0x9292ad3f,\n        0x9d9dbc21,\n        0x38384870,\n        0xf5f504f1,\n        0xbcbcdf63,\n        0xb6b6c177,\n        0xdada75af,\n        0x21216342,\n        0x10103020,\n        0xffff1ae5,\n        0xf3f30efd,\n        0xd2d26dbf,\n        0xcdcd4c81,\n        0x0c0c1418,\n        0x13133526,\n        0xecec2fc3,\n        0x5f5fe1be,\n        0x9797a235,\n        0x4444cc88,\n        0x1717392e,\n        0xc4c45793,\n        0xa7a7f255,\n        0x7e7e82fc,\n        0x3d3d477a,\n        0x6464acc8,\n        0x5d5de7ba,\n        0x19192b32,\n        0x737395e6,\n        0x6060a0c0,\n        0x81819819,\n        0x4f4fd19e,\n        0xdcdc7fa3,\n        0x22226644,\n        0x2a2a7e54,\n        0x9090ab3b,\n        0x8888830b,\n        0x4646ca8c,\n        0xeeee29c7,\n        0xb8b8d36b,\n        0x14143c28,\n        0xdede79a7,\n        0x5e5ee2bc,\n        0x0b0b1d16,\n        0xdbdb76ad,\n        0xe0e03bdb,\n        0x32325664,\n        0x3a3a4e74,\n        0x0a0a1e14,\n        0x4949db92,\n        0x06060a0c,\n        0x24246c48,\n        0x5c5ce4b8,\n        0xc2c25d9f,\n        0xd3d36ebd,\n        0xacacef43,\n        0x6262a6c4,\n        0x9191a839,\n        0x9595a431,\n        0xe4e437d3,\n        0x79798bf2,\n        0xe7e732d5,\n        0xc8c8438b,\n        0x3737596e,\n        0x6d6db7da,\n        0x8d8d8c01,\n        0xd5d564b1,\n        0x4e4ed29c,\n        0xa9a9e049,\n        0x6c6cb4d8,\n        0x5656faac,\n        0xf4f407f3,\n        0xeaea25cf,\n        0x6565afca,\n        0x7a7a8ef4,\n        0xaeaee947,\n        0x08081810,\n        0xbabad56f,\n        0x787888f0,\n        0x25256f4a,\n        0x2e2e725c,\n        0x1c1c2438,\n        0xa6a6f157,\n        0xb4b4c773,\n        0xc6c65197,\n        0xe8e823cb,\n        0xdddd7ca1,\n        0x74749ce8,\n        0x1f1f213e,\n        0x4b4bdd96,\n        0xbdbddc61,\n        0x8b8b860d,\n        0x8a8a850f,\n        0x707090e0,\n        0x3e3e427c,\n        0xb5b5c471,\n        0x6666aacc,\n        0x4848d890,\n        0x03030506,\n        0xf6f601f7,\n        0x0e0e121c,\n        0x6161a3c2,\n        0x35355f6a,\n        0x5757f9ae,\n        0xb9b9d069,\n        0x86869117,\n        0xc1c15899,\n        0x1d1d273a,\n        0x9e9eb927,\n        0xe1e138d9,\n        0xf8f813eb,\n        0x9898b32b,\n        0x11113322,\n        0x6969bbd2,\n        0xd9d970a9,\n        0x8e8e8907,\n        0x9494a733,\n        0x9b9bb62d,\n        0x1e1e223c,\n        0x87879215,\n        0xe9e920c9,\n        0xcece4987,\n        0x5555ffaa,\n        0x28287850,\n        0xdfdf7aa5,\n        0x8c8c8f03,\n        0xa1a1f859,\n        0x89898009,\n        0x0d0d171a,\n        0xbfbfda65,\n        0xe6e631d7,\n        0x4242c684,\n        0x6868b8d0,\n        0x4141c382,\n        0x9999b029,\n        0x2d2d775a,\n        0x0f0f111e,\n        0xb0b0cb7b,\n        0x5454fca8,\n        0xbbbbd66d,\n        0x16163a2c\n    ];\n    // Transformations for decryption\n    var T5 = [\n        0x51f4a750,\n        0x7e416553,\n        0x1a17a4c3,\n        0x3a275e96,\n        0x3bab6bcb,\n        0x1f9d45f1,\n        0xacfa58ab,\n        0x4be30393,\n        0x2030fa55,\n        0xad766df6,\n        0x88cc7691,\n        0xf5024c25,\n        0x4fe5d7fc,\n        0xc52acbd7,\n        0x26354480,\n        0xb562a38f,\n        0xdeb15a49,\n        0x25ba1b67,\n        0x45ea0e98,\n        0x5dfec0e1,\n        0xc32f7502,\n        0x814cf012,\n        0x8d4697a3,\n        0x6bd3f9c6,\n        0x038f5fe7,\n        0x15929c95,\n        0xbf6d7aeb,\n        0x955259da,\n        0xd4be832d,\n        0x587421d3,\n        0x49e06929,\n        0x8ec9c844,\n        0x75c2896a,\n        0xf48e7978,\n        0x99583e6b,\n        0x27b971dd,\n        0xbee14fb6,\n        0xf088ad17,\n        0xc920ac66,\n        0x7dce3ab4,\n        0x63df4a18,\n        0xe51a3182,\n        0x97513360,\n        0x62537f45,\n        0xb16477e0,\n        0xbb6bae84,\n        0xfe81a01c,\n        0xf9082b94,\n        0x70486858,\n        0x8f45fd19,\n        0x94de6c87,\n        0x527bf8b7,\n        0xab73d323,\n        0x724b02e2,\n        0xe31f8f57,\n        0x6655ab2a,\n        0xb2eb2807,\n        0x2fb5c203,\n        0x86c57b9a,\n        0xd33708a5,\n        0x302887f2,\n        0x23bfa5b2,\n        0x02036aba,\n        0xed16825c,\n        0x8acf1c2b,\n        0xa779b492,\n        0xf307f2f0,\n        0x4e69e2a1,\n        0x65daf4cd,\n        0x0605bed5,\n        0xd134621f,\n        0xc4a6fe8a,\n        0x342e539d,\n        0xa2f355a0,\n        0x058ae132,\n        0xa4f6eb75,\n        0x0b83ec39,\n        0x4060efaa,\n        0x5e719f06,\n        0xbd6e1051,\n        0x3e218af9,\n        0x96dd063d,\n        0xdd3e05ae,\n        0x4de6bd46,\n        0x91548db5,\n        0x71c45d05,\n        0x0406d46f,\n        0x605015ff,\n        0x1998fb24,\n        0xd6bde997,\n        0x894043cc,\n        0x67d99e77,\n        0xb0e842bd,\n        0x07898b88,\n        0xe7195b38,\n        0x79c8eedb,\n        0xa17c0a47,\n        0x7c420fe9,\n        0xf8841ec9,\n        0x00000000,\n        0x09808683,\n        0x322bed48,\n        0x1e1170ac,\n        0x6c5a724e,\n        0xfd0efffb,\n        0x0f853856,\n        0x3daed51e,\n        0x362d3927,\n        0x0a0fd964,\n        0x685ca621,\n        0x9b5b54d1,\n        0x24362e3a,\n        0x0c0a67b1,\n        0x9357e70f,\n        0xb4ee96d2,\n        0x1b9b919e,\n        0x80c0c54f,\n        0x61dc20a2,\n        0x5a774b69,\n        0x1c121a16,\n        0xe293ba0a,\n        0xc0a02ae5,\n        0x3c22e043,\n        0x121b171d,\n        0x0e090d0b,\n        0xf28bc7ad,\n        0x2db6a8b9,\n        0x141ea9c8,\n        0x57f11985,\n        0xaf75074c,\n        0xee99ddbb,\n        0xa37f60fd,\n        0xf701269f,\n        0x5c72f5bc,\n        0x44663bc5,\n        0x5bfb7e34,\n        0x8b432976,\n        0xcb23c6dc,\n        0xb6edfc68,\n        0xb8e4f163,\n        0xd731dcca,\n        0x42638510,\n        0x13972240,\n        0x84c61120,\n        0x854a247d,\n        0xd2bb3df8,\n        0xaef93211,\n        0xc729a16d,\n        0x1d9e2f4b,\n        0xdcb230f3,\n        0x0d8652ec,\n        0x77c1e3d0,\n        0x2bb3166c,\n        0xa970b999,\n        0x119448fa,\n        0x47e96422,\n        0xa8fc8cc4,\n        0xa0f03f1a,\n        0x567d2cd8,\n        0x223390ef,\n        0x87494ec7,\n        0xd938d1c1,\n        0x8ccaa2fe,\n        0x98d40b36,\n        0xa6f581cf,\n        0xa57ade28,\n        0xdab78e26,\n        0x3fadbfa4,\n        0x2c3a9de4,\n        0x5078920d,\n        0x6a5fcc9b,\n        0x547e4662,\n        0xf68d13c2,\n        0x90d8b8e8,\n        0x2e39f75e,\n        0x82c3aff5,\n        0x9f5d80be,\n        0x69d0937c,\n        0x6fd52da9,\n        0xcf2512b3,\n        0xc8ac993b,\n        0x10187da7,\n        0xe89c636e,\n        0xdb3bbb7b,\n        0xcd267809,\n        0x6e5918f4,\n        0xec9ab701,\n        0x834f9aa8,\n        0xe6956e65,\n        0xaaffe67e,\n        0x21bccf08,\n        0xef15e8e6,\n        0xbae79bd9,\n        0x4a6f36ce,\n        0xea9f09d4,\n        0x29b07cd6,\n        0x31a4b2af,\n        0x2a3f2331,\n        0xc6a59430,\n        0x35a266c0,\n        0x744ebc37,\n        0xfc82caa6,\n        0xe090d0b0,\n        0x33a7d815,\n        0xf104984a,\n        0x41ecdaf7,\n        0x7fcd500e,\n        0x1791f62f,\n        0x764dd68d,\n        0x43efb04d,\n        0xccaa4d54,\n        0xe49604df,\n        0x9ed1b5e3,\n        0x4c6a881b,\n        0xc12c1fb8,\n        0x4665517f,\n        0x9d5eea04,\n        0x018c355d,\n        0xfa877473,\n        0xfb0b412e,\n        0xb3671d5a,\n        0x92dbd252,\n        0xe9105633,\n        0x6dd64713,\n        0x9ad7618c,\n        0x37a10c7a,\n        0x59f8148e,\n        0xeb133c89,\n        0xcea927ee,\n        0xb761c935,\n        0xe11ce5ed,\n        0x7a47b13c,\n        0x9cd2df59,\n        0x55f2733f,\n        0x1814ce79,\n        0x73c737bf,\n        0x53f7cdea,\n        0x5ffdaa5b,\n        0xdf3d6f14,\n        0x7844db86,\n        0xcaaff381,\n        0xb968c43e,\n        0x3824342c,\n        0xc2a3405f,\n        0x161dc372,\n        0xbce2250c,\n        0x283c498b,\n        0xff0d9541,\n        0x39a80171,\n        0x080cb3de,\n        0xd8b4e49c,\n        0x6456c190,\n        0x7bcb8461,\n        0xd532b670,\n        0x486c5c74,\n        0xd0b85742\n    ];\n    var T6 = [\n        0x5051f4a7,\n        0x537e4165,\n        0xc31a17a4,\n        0x963a275e,\n        0xcb3bab6b,\n        0xf11f9d45,\n        0xabacfa58,\n        0x934be303,\n        0x552030fa,\n        0xf6ad766d,\n        0x9188cc76,\n        0x25f5024c,\n        0xfc4fe5d7,\n        0xd7c52acb,\n        0x80263544,\n        0x8fb562a3,\n        0x49deb15a,\n        0x6725ba1b,\n        0x9845ea0e,\n        0xe15dfec0,\n        0x02c32f75,\n        0x12814cf0,\n        0xa38d4697,\n        0xc66bd3f9,\n        0xe7038f5f,\n        0x9515929c,\n        0xebbf6d7a,\n        0xda955259,\n        0x2dd4be83,\n        0xd3587421,\n        0x2949e069,\n        0x448ec9c8,\n        0x6a75c289,\n        0x78f48e79,\n        0x6b99583e,\n        0xdd27b971,\n        0xb6bee14f,\n        0x17f088ad,\n        0x66c920ac,\n        0xb47dce3a,\n        0x1863df4a,\n        0x82e51a31,\n        0x60975133,\n        0x4562537f,\n        0xe0b16477,\n        0x84bb6bae,\n        0x1cfe81a0,\n        0x94f9082b,\n        0x58704868,\n        0x198f45fd,\n        0x8794de6c,\n        0xb7527bf8,\n        0x23ab73d3,\n        0xe2724b02,\n        0x57e31f8f,\n        0x2a6655ab,\n        0x07b2eb28,\n        0x032fb5c2,\n        0x9a86c57b,\n        0xa5d33708,\n        0xf2302887,\n        0xb223bfa5,\n        0xba02036a,\n        0x5ced1682,\n        0x2b8acf1c,\n        0x92a779b4,\n        0xf0f307f2,\n        0xa14e69e2,\n        0xcd65daf4,\n        0xd50605be,\n        0x1fd13462,\n        0x8ac4a6fe,\n        0x9d342e53,\n        0xa0a2f355,\n        0x32058ae1,\n        0x75a4f6eb,\n        0x390b83ec,\n        0xaa4060ef,\n        0x065e719f,\n        0x51bd6e10,\n        0xf93e218a,\n        0x3d96dd06,\n        0xaedd3e05,\n        0x464de6bd,\n        0xb591548d,\n        0x0571c45d,\n        0x6f0406d4,\n        0xff605015,\n        0x241998fb,\n        0x97d6bde9,\n        0xcc894043,\n        0x7767d99e,\n        0xbdb0e842,\n        0x8807898b,\n        0x38e7195b,\n        0xdb79c8ee,\n        0x47a17c0a,\n        0xe97c420f,\n        0xc9f8841e,\n        0x00000000,\n        0x83098086,\n        0x48322bed,\n        0xac1e1170,\n        0x4e6c5a72,\n        0xfbfd0eff,\n        0x560f8538,\n        0x1e3daed5,\n        0x27362d39,\n        0x640a0fd9,\n        0x21685ca6,\n        0xd19b5b54,\n        0x3a24362e,\n        0xb10c0a67,\n        0x0f9357e7,\n        0xd2b4ee96,\n        0x9e1b9b91,\n        0x4f80c0c5,\n        0xa261dc20,\n        0x695a774b,\n        0x161c121a,\n        0x0ae293ba,\n        0xe5c0a02a,\n        0x433c22e0,\n        0x1d121b17,\n        0x0b0e090d,\n        0xadf28bc7,\n        0xb92db6a8,\n        0xc8141ea9,\n        0x8557f119,\n        0x4caf7507,\n        0xbbee99dd,\n        0xfda37f60,\n        0x9ff70126,\n        0xbc5c72f5,\n        0xc544663b,\n        0x345bfb7e,\n        0x768b4329,\n        0xdccb23c6,\n        0x68b6edfc,\n        0x63b8e4f1,\n        0xcad731dc,\n        0x10426385,\n        0x40139722,\n        0x2084c611,\n        0x7d854a24,\n        0xf8d2bb3d,\n        0x11aef932,\n        0x6dc729a1,\n        0x4b1d9e2f,\n        0xf3dcb230,\n        0xec0d8652,\n        0xd077c1e3,\n        0x6c2bb316,\n        0x99a970b9,\n        0xfa119448,\n        0x2247e964,\n        0xc4a8fc8c,\n        0x1aa0f03f,\n        0xd8567d2c,\n        0xef223390,\n        0xc787494e,\n        0xc1d938d1,\n        0xfe8ccaa2,\n        0x3698d40b,\n        0xcfa6f581,\n        0x28a57ade,\n        0x26dab78e,\n        0xa43fadbf,\n        0xe42c3a9d,\n        0x0d507892,\n        0x9b6a5fcc,\n        0x62547e46,\n        0xc2f68d13,\n        0xe890d8b8,\n        0x5e2e39f7,\n        0xf582c3af,\n        0xbe9f5d80,\n        0x7c69d093,\n        0xa96fd52d,\n        0xb3cf2512,\n        0x3bc8ac99,\n        0xa710187d,\n        0x6ee89c63,\n        0x7bdb3bbb,\n        0x09cd2678,\n        0xf46e5918,\n        0x01ec9ab7,\n        0xa8834f9a,\n        0x65e6956e,\n        0x7eaaffe6,\n        0x0821bccf,\n        0xe6ef15e8,\n        0xd9bae79b,\n        0xce4a6f36,\n        0xd4ea9f09,\n        0xd629b07c,\n        0xaf31a4b2,\n        0x312a3f23,\n        0x30c6a594,\n        0xc035a266,\n        0x37744ebc,\n        0xa6fc82ca,\n        0xb0e090d0,\n        0x1533a7d8,\n        0x4af10498,\n        0xf741ecda,\n        0x0e7fcd50,\n        0x2f1791f6,\n        0x8d764dd6,\n        0x4d43efb0,\n        0x54ccaa4d,\n        0xdfe49604,\n        0xe39ed1b5,\n        0x1b4c6a88,\n        0xb8c12c1f,\n        0x7f466551,\n        0x049d5eea,\n        0x5d018c35,\n        0x73fa8774,\n        0x2efb0b41,\n        0x5ab3671d,\n        0x5292dbd2,\n        0x33e91056,\n        0x136dd647,\n        0x8c9ad761,\n        0x7a37a10c,\n        0x8e59f814,\n        0x89eb133c,\n        0xeecea927,\n        0x35b761c9,\n        0xede11ce5,\n        0x3c7a47b1,\n        0x599cd2df,\n        0x3f55f273,\n        0x791814ce,\n        0xbf73c737,\n        0xea53f7cd,\n        0x5b5ffdaa,\n        0x14df3d6f,\n        0x867844db,\n        0x81caaff3,\n        0x3eb968c4,\n        0x2c382434,\n        0x5fc2a340,\n        0x72161dc3,\n        0x0cbce225,\n        0x8b283c49,\n        0x41ff0d95,\n        0x7139a801,\n        0xde080cb3,\n        0x9cd8b4e4,\n        0x906456c1,\n        0x617bcb84,\n        0x70d532b6,\n        0x74486c5c,\n        0x42d0b857\n    ];\n    var T7 = [\n        0xa75051f4,\n        0x65537e41,\n        0xa4c31a17,\n        0x5e963a27,\n        0x6bcb3bab,\n        0x45f11f9d,\n        0x58abacfa,\n        0x03934be3,\n        0xfa552030,\n        0x6df6ad76,\n        0x769188cc,\n        0x4c25f502,\n        0xd7fc4fe5,\n        0xcbd7c52a,\n        0x44802635,\n        0xa38fb562,\n        0x5a49deb1,\n        0x1b6725ba,\n        0x0e9845ea,\n        0xc0e15dfe,\n        0x7502c32f,\n        0xf012814c,\n        0x97a38d46,\n        0xf9c66bd3,\n        0x5fe7038f,\n        0x9c951592,\n        0x7aebbf6d,\n        0x59da9552,\n        0x832dd4be,\n        0x21d35874,\n        0x692949e0,\n        0xc8448ec9,\n        0x896a75c2,\n        0x7978f48e,\n        0x3e6b9958,\n        0x71dd27b9,\n        0x4fb6bee1,\n        0xad17f088,\n        0xac66c920,\n        0x3ab47dce,\n        0x4a1863df,\n        0x3182e51a,\n        0x33609751,\n        0x7f456253,\n        0x77e0b164,\n        0xae84bb6b,\n        0xa01cfe81,\n        0x2b94f908,\n        0x68587048,\n        0xfd198f45,\n        0x6c8794de,\n        0xf8b7527b,\n        0xd323ab73,\n        0x02e2724b,\n        0x8f57e31f,\n        0xab2a6655,\n        0x2807b2eb,\n        0xc2032fb5,\n        0x7b9a86c5,\n        0x08a5d337,\n        0x87f23028,\n        0xa5b223bf,\n        0x6aba0203,\n        0x825ced16,\n        0x1c2b8acf,\n        0xb492a779,\n        0xf2f0f307,\n        0xe2a14e69,\n        0xf4cd65da,\n        0xbed50605,\n        0x621fd134,\n        0xfe8ac4a6,\n        0x539d342e,\n        0x55a0a2f3,\n        0xe132058a,\n        0xeb75a4f6,\n        0xec390b83,\n        0xefaa4060,\n        0x9f065e71,\n        0x1051bd6e,\n        0x8af93e21,\n        0x063d96dd,\n        0x05aedd3e,\n        0xbd464de6,\n        0x8db59154,\n        0x5d0571c4,\n        0xd46f0406,\n        0x15ff6050,\n        0xfb241998,\n        0xe997d6bd,\n        0x43cc8940,\n        0x9e7767d9,\n        0x42bdb0e8,\n        0x8b880789,\n        0x5b38e719,\n        0xeedb79c8,\n        0x0a47a17c,\n        0x0fe97c42,\n        0x1ec9f884,\n        0x00000000,\n        0x86830980,\n        0xed48322b,\n        0x70ac1e11,\n        0x724e6c5a,\n        0xfffbfd0e,\n        0x38560f85,\n        0xd51e3dae,\n        0x3927362d,\n        0xd9640a0f,\n        0xa621685c,\n        0x54d19b5b,\n        0x2e3a2436,\n        0x67b10c0a,\n        0xe70f9357,\n        0x96d2b4ee,\n        0x919e1b9b,\n        0xc54f80c0,\n        0x20a261dc,\n        0x4b695a77,\n        0x1a161c12,\n        0xba0ae293,\n        0x2ae5c0a0,\n        0xe0433c22,\n        0x171d121b,\n        0x0d0b0e09,\n        0xc7adf28b,\n        0xa8b92db6,\n        0xa9c8141e,\n        0x198557f1,\n        0x074caf75,\n        0xddbbee99,\n        0x60fda37f,\n        0x269ff701,\n        0xf5bc5c72,\n        0x3bc54466,\n        0x7e345bfb,\n        0x29768b43,\n        0xc6dccb23,\n        0xfc68b6ed,\n        0xf163b8e4,\n        0xdccad731,\n        0x85104263,\n        0x22401397,\n        0x112084c6,\n        0x247d854a,\n        0x3df8d2bb,\n        0x3211aef9,\n        0xa16dc729,\n        0x2f4b1d9e,\n        0x30f3dcb2,\n        0x52ec0d86,\n        0xe3d077c1,\n        0x166c2bb3,\n        0xb999a970,\n        0x48fa1194,\n        0x642247e9,\n        0x8cc4a8fc,\n        0x3f1aa0f0,\n        0x2cd8567d,\n        0x90ef2233,\n        0x4ec78749,\n        0xd1c1d938,\n        0xa2fe8cca,\n        0x0b3698d4,\n        0x81cfa6f5,\n        0xde28a57a,\n        0x8e26dab7,\n        0xbfa43fad,\n        0x9de42c3a,\n        0x920d5078,\n        0xcc9b6a5f,\n        0x4662547e,\n        0x13c2f68d,\n        0xb8e890d8,\n        0xf75e2e39,\n        0xaff582c3,\n        0x80be9f5d,\n        0x937c69d0,\n        0x2da96fd5,\n        0x12b3cf25,\n        0x993bc8ac,\n        0x7da71018,\n        0x636ee89c,\n        0xbb7bdb3b,\n        0x7809cd26,\n        0x18f46e59,\n        0xb701ec9a,\n        0x9aa8834f,\n        0x6e65e695,\n        0xe67eaaff,\n        0xcf0821bc,\n        0xe8e6ef15,\n        0x9bd9bae7,\n        0x36ce4a6f,\n        0x09d4ea9f,\n        0x7cd629b0,\n        0xb2af31a4,\n        0x23312a3f,\n        0x9430c6a5,\n        0x66c035a2,\n        0xbc37744e,\n        0xcaa6fc82,\n        0xd0b0e090,\n        0xd81533a7,\n        0x984af104,\n        0xdaf741ec,\n        0x500e7fcd,\n        0xf62f1791,\n        0xd68d764d,\n        0xb04d43ef,\n        0x4d54ccaa,\n        0x04dfe496,\n        0xb5e39ed1,\n        0x881b4c6a,\n        0x1fb8c12c,\n        0x517f4665,\n        0xea049d5e,\n        0x355d018c,\n        0x7473fa87,\n        0x412efb0b,\n        0x1d5ab367,\n        0xd25292db,\n        0x5633e910,\n        0x47136dd6,\n        0x618c9ad7,\n        0x0c7a37a1,\n        0x148e59f8,\n        0x3c89eb13,\n        0x27eecea9,\n        0xc935b761,\n        0xe5ede11c,\n        0xb13c7a47,\n        0xdf599cd2,\n        0x733f55f2,\n        0xce791814,\n        0x37bf73c7,\n        0xcdea53f7,\n        0xaa5b5ffd,\n        0x6f14df3d,\n        0xdb867844,\n        0xf381caaf,\n        0xc43eb968,\n        0x342c3824,\n        0x405fc2a3,\n        0xc372161d,\n        0x250cbce2,\n        0x498b283c,\n        0x9541ff0d,\n        0x017139a8,\n        0xb3de080c,\n        0xe49cd8b4,\n        0xc1906456,\n        0x84617bcb,\n        0xb670d532,\n        0x5c74486c,\n        0x5742d0b8\n    ];\n    var T8 = [\n        0xf4a75051,\n        0x4165537e,\n        0x17a4c31a,\n        0x275e963a,\n        0xab6bcb3b,\n        0x9d45f11f,\n        0xfa58abac,\n        0xe303934b,\n        0x30fa5520,\n        0x766df6ad,\n        0xcc769188,\n        0x024c25f5,\n        0xe5d7fc4f,\n        0x2acbd7c5,\n        0x35448026,\n        0x62a38fb5,\n        0xb15a49de,\n        0xba1b6725,\n        0xea0e9845,\n        0xfec0e15d,\n        0x2f7502c3,\n        0x4cf01281,\n        0x4697a38d,\n        0xd3f9c66b,\n        0x8f5fe703,\n        0x929c9515,\n        0x6d7aebbf,\n        0x5259da95,\n        0xbe832dd4,\n        0x7421d358,\n        0xe0692949,\n        0xc9c8448e,\n        0xc2896a75,\n        0x8e7978f4,\n        0x583e6b99,\n        0xb971dd27,\n        0xe14fb6be,\n        0x88ad17f0,\n        0x20ac66c9,\n        0xce3ab47d,\n        0xdf4a1863,\n        0x1a3182e5,\n        0x51336097,\n        0x537f4562,\n        0x6477e0b1,\n        0x6bae84bb,\n        0x81a01cfe,\n        0x082b94f9,\n        0x48685870,\n        0x45fd198f,\n        0xde6c8794,\n        0x7bf8b752,\n        0x73d323ab,\n        0x4b02e272,\n        0x1f8f57e3,\n        0x55ab2a66,\n        0xeb2807b2,\n        0xb5c2032f,\n        0xc57b9a86,\n        0x3708a5d3,\n        0x2887f230,\n        0xbfa5b223,\n        0x036aba02,\n        0x16825ced,\n        0xcf1c2b8a,\n        0x79b492a7,\n        0x07f2f0f3,\n        0x69e2a14e,\n        0xdaf4cd65,\n        0x05bed506,\n        0x34621fd1,\n        0xa6fe8ac4,\n        0x2e539d34,\n        0xf355a0a2,\n        0x8ae13205,\n        0xf6eb75a4,\n        0x83ec390b,\n        0x60efaa40,\n        0x719f065e,\n        0x6e1051bd,\n        0x218af93e,\n        0xdd063d96,\n        0x3e05aedd,\n        0xe6bd464d,\n        0x548db591,\n        0xc45d0571,\n        0x06d46f04,\n        0x5015ff60,\n        0x98fb2419,\n        0xbde997d6,\n        0x4043cc89,\n        0xd99e7767,\n        0xe842bdb0,\n        0x898b8807,\n        0x195b38e7,\n        0xc8eedb79,\n        0x7c0a47a1,\n        0x420fe97c,\n        0x841ec9f8,\n        0x00000000,\n        0x80868309,\n        0x2bed4832,\n        0x1170ac1e,\n        0x5a724e6c,\n        0x0efffbfd,\n        0x8538560f,\n        0xaed51e3d,\n        0x2d392736,\n        0x0fd9640a,\n        0x5ca62168,\n        0x5b54d19b,\n        0x362e3a24,\n        0x0a67b10c,\n        0x57e70f93,\n        0xee96d2b4,\n        0x9b919e1b,\n        0xc0c54f80,\n        0xdc20a261,\n        0x774b695a,\n        0x121a161c,\n        0x93ba0ae2,\n        0xa02ae5c0,\n        0x22e0433c,\n        0x1b171d12,\n        0x090d0b0e,\n        0x8bc7adf2,\n        0xb6a8b92d,\n        0x1ea9c814,\n        0xf1198557,\n        0x75074caf,\n        0x99ddbbee,\n        0x7f60fda3,\n        0x01269ff7,\n        0x72f5bc5c,\n        0x663bc544,\n        0xfb7e345b,\n        0x4329768b,\n        0x23c6dccb,\n        0xedfc68b6,\n        0xe4f163b8,\n        0x31dccad7,\n        0x63851042,\n        0x97224013,\n        0xc6112084,\n        0x4a247d85,\n        0xbb3df8d2,\n        0xf93211ae,\n        0x29a16dc7,\n        0x9e2f4b1d,\n        0xb230f3dc,\n        0x8652ec0d,\n        0xc1e3d077,\n        0xb3166c2b,\n        0x70b999a9,\n        0x9448fa11,\n        0xe9642247,\n        0xfc8cc4a8,\n        0xf03f1aa0,\n        0x7d2cd856,\n        0x3390ef22,\n        0x494ec787,\n        0x38d1c1d9,\n        0xcaa2fe8c,\n        0xd40b3698,\n        0xf581cfa6,\n        0x7ade28a5,\n        0xb78e26da,\n        0xadbfa43f,\n        0x3a9de42c,\n        0x78920d50,\n        0x5fcc9b6a,\n        0x7e466254,\n        0x8d13c2f6,\n        0xd8b8e890,\n        0x39f75e2e,\n        0xc3aff582,\n        0x5d80be9f,\n        0xd0937c69,\n        0xd52da96f,\n        0x2512b3cf,\n        0xac993bc8,\n        0x187da710,\n        0x9c636ee8,\n        0x3bbb7bdb,\n        0x267809cd,\n        0x5918f46e,\n        0x9ab701ec,\n        0x4f9aa883,\n        0x956e65e6,\n        0xffe67eaa,\n        0xbccf0821,\n        0x15e8e6ef,\n        0xe79bd9ba,\n        0x6f36ce4a,\n        0x9f09d4ea,\n        0xb07cd629,\n        0xa4b2af31,\n        0x3f23312a,\n        0xa59430c6,\n        0xa266c035,\n        0x4ebc3774,\n        0x82caa6fc,\n        0x90d0b0e0,\n        0xa7d81533,\n        0x04984af1,\n        0xecdaf741,\n        0xcd500e7f,\n        0x91f62f17,\n        0x4dd68d76,\n        0xefb04d43,\n        0xaa4d54cc,\n        0x9604dfe4,\n        0xd1b5e39e,\n        0x6a881b4c,\n        0x2c1fb8c1,\n        0x65517f46,\n        0x5eea049d,\n        0x8c355d01,\n        0x877473fa,\n        0x0b412efb,\n        0x671d5ab3,\n        0xdbd25292,\n        0x105633e9,\n        0xd647136d,\n        0xd7618c9a,\n        0xa10c7a37,\n        0xf8148e59,\n        0x133c89eb,\n        0xa927eece,\n        0x61c935b7,\n        0x1ce5ede1,\n        0x47b13c7a,\n        0xd2df599c,\n        0xf2733f55,\n        0x14ce7918,\n        0xc737bf73,\n        0xf7cdea53,\n        0xfdaa5b5f,\n        0x3d6f14df,\n        0x44db8678,\n        0xaff381ca,\n        0x68c43eb9,\n        0x24342c38,\n        0xa3405fc2,\n        0x1dc37216,\n        0xe2250cbc,\n        0x3c498b28,\n        0x0d9541ff,\n        0xa8017139,\n        0x0cb3de08,\n        0xb4e49cd8,\n        0x56c19064,\n        0xcb84617b,\n        0x32b670d5,\n        0x6c5c7448,\n        0xb85742d0\n    ];\n    // Transformations for decryption key expansion\n    var U1 = [\n        0x00000000,\n        0x0e090d0b,\n        0x1c121a16,\n        0x121b171d,\n        0x3824342c,\n        0x362d3927,\n        0x24362e3a,\n        0x2a3f2331,\n        0x70486858,\n        0x7e416553,\n        0x6c5a724e,\n        0x62537f45,\n        0x486c5c74,\n        0x4665517f,\n        0x547e4662,\n        0x5a774b69,\n        0xe090d0b0,\n        0xee99ddbb,\n        0xfc82caa6,\n        0xf28bc7ad,\n        0xd8b4e49c,\n        0xd6bde997,\n        0xc4a6fe8a,\n        0xcaaff381,\n        0x90d8b8e8,\n        0x9ed1b5e3,\n        0x8ccaa2fe,\n        0x82c3aff5,\n        0xa8fc8cc4,\n        0xa6f581cf,\n        0xb4ee96d2,\n        0xbae79bd9,\n        0xdb3bbb7b,\n        0xd532b670,\n        0xc729a16d,\n        0xc920ac66,\n        0xe31f8f57,\n        0xed16825c,\n        0xff0d9541,\n        0xf104984a,\n        0xab73d323,\n        0xa57ade28,\n        0xb761c935,\n        0xb968c43e,\n        0x9357e70f,\n        0x9d5eea04,\n        0x8f45fd19,\n        0x814cf012,\n        0x3bab6bcb,\n        0x35a266c0,\n        0x27b971dd,\n        0x29b07cd6,\n        0x038f5fe7,\n        0x0d8652ec,\n        0x1f9d45f1,\n        0x119448fa,\n        0x4be30393,\n        0x45ea0e98,\n        0x57f11985,\n        0x59f8148e,\n        0x73c737bf,\n        0x7dce3ab4,\n        0x6fd52da9,\n        0x61dc20a2,\n        0xad766df6,\n        0xa37f60fd,\n        0xb16477e0,\n        0xbf6d7aeb,\n        0x955259da,\n        0x9b5b54d1,\n        0x894043cc,\n        0x87494ec7,\n        0xdd3e05ae,\n        0xd33708a5,\n        0xc12c1fb8,\n        0xcf2512b3,\n        0xe51a3182,\n        0xeb133c89,\n        0xf9082b94,\n        0xf701269f,\n        0x4de6bd46,\n        0x43efb04d,\n        0x51f4a750,\n        0x5ffdaa5b,\n        0x75c2896a,\n        0x7bcb8461,\n        0x69d0937c,\n        0x67d99e77,\n        0x3daed51e,\n        0x33a7d815,\n        0x21bccf08,\n        0x2fb5c203,\n        0x058ae132,\n        0x0b83ec39,\n        0x1998fb24,\n        0x1791f62f,\n        0x764dd68d,\n        0x7844db86,\n        0x6a5fcc9b,\n        0x6456c190,\n        0x4e69e2a1,\n        0x4060efaa,\n        0x527bf8b7,\n        0x5c72f5bc,\n        0x0605bed5,\n        0x080cb3de,\n        0x1a17a4c3,\n        0x141ea9c8,\n        0x3e218af9,\n        0x302887f2,\n        0x223390ef,\n        0x2c3a9de4,\n        0x96dd063d,\n        0x98d40b36,\n        0x8acf1c2b,\n        0x84c61120,\n        0xaef93211,\n        0xa0f03f1a,\n        0xb2eb2807,\n        0xbce2250c,\n        0xe6956e65,\n        0xe89c636e,\n        0xfa877473,\n        0xf48e7978,\n        0xdeb15a49,\n        0xd0b85742,\n        0xc2a3405f,\n        0xccaa4d54,\n        0x41ecdaf7,\n        0x4fe5d7fc,\n        0x5dfec0e1,\n        0x53f7cdea,\n        0x79c8eedb,\n        0x77c1e3d0,\n        0x65daf4cd,\n        0x6bd3f9c6,\n        0x31a4b2af,\n        0x3fadbfa4,\n        0x2db6a8b9,\n        0x23bfa5b2,\n        0x09808683,\n        0x07898b88,\n        0x15929c95,\n        0x1b9b919e,\n        0xa17c0a47,\n        0xaf75074c,\n        0xbd6e1051,\n        0xb3671d5a,\n        0x99583e6b,\n        0x97513360,\n        0x854a247d,\n        0x8b432976,\n        0xd134621f,\n        0xdf3d6f14,\n        0xcd267809,\n        0xc32f7502,\n        0xe9105633,\n        0xe7195b38,\n        0xf5024c25,\n        0xfb0b412e,\n        0x9ad7618c,\n        0x94de6c87,\n        0x86c57b9a,\n        0x88cc7691,\n        0xa2f355a0,\n        0xacfa58ab,\n        0xbee14fb6,\n        0xb0e842bd,\n        0xea9f09d4,\n        0xe49604df,\n        0xf68d13c2,\n        0xf8841ec9,\n        0xd2bb3df8,\n        0xdcb230f3,\n        0xcea927ee,\n        0xc0a02ae5,\n        0x7a47b13c,\n        0x744ebc37,\n        0x6655ab2a,\n        0x685ca621,\n        0x42638510,\n        0x4c6a881b,\n        0x5e719f06,\n        0x5078920d,\n        0x0a0fd964,\n        0x0406d46f,\n        0x161dc372,\n        0x1814ce79,\n        0x322bed48,\n        0x3c22e043,\n        0x2e39f75e,\n        0x2030fa55,\n        0xec9ab701,\n        0xe293ba0a,\n        0xf088ad17,\n        0xfe81a01c,\n        0xd4be832d,\n        0xdab78e26,\n        0xc8ac993b,\n        0xc6a59430,\n        0x9cd2df59,\n        0x92dbd252,\n        0x80c0c54f,\n        0x8ec9c844,\n        0xa4f6eb75,\n        0xaaffe67e,\n        0xb8e4f163,\n        0xb6edfc68,\n        0x0c0a67b1,\n        0x02036aba,\n        0x10187da7,\n        0x1e1170ac,\n        0x342e539d,\n        0x3a275e96,\n        0x283c498b,\n        0x26354480,\n        0x7c420fe9,\n        0x724b02e2,\n        0x605015ff,\n        0x6e5918f4,\n        0x44663bc5,\n        0x4a6f36ce,\n        0x587421d3,\n        0x567d2cd8,\n        0x37a10c7a,\n        0x39a80171,\n        0x2bb3166c,\n        0x25ba1b67,\n        0x0f853856,\n        0x018c355d,\n        0x13972240,\n        0x1d9e2f4b,\n        0x47e96422,\n        0x49e06929,\n        0x5bfb7e34,\n        0x55f2733f,\n        0x7fcd500e,\n        0x71c45d05,\n        0x63df4a18,\n        0x6dd64713,\n        0xd731dcca,\n        0xd938d1c1,\n        0xcb23c6dc,\n        0xc52acbd7,\n        0xef15e8e6,\n        0xe11ce5ed,\n        0xf307f2f0,\n        0xfd0efffb,\n        0xa779b492,\n        0xa970b999,\n        0xbb6bae84,\n        0xb562a38f,\n        0x9f5d80be,\n        0x91548db5,\n        0x834f9aa8,\n        0x8d4697a3\n    ];\n    var U2 = [\n        0x00000000,\n        0x0b0e090d,\n        0x161c121a,\n        0x1d121b17,\n        0x2c382434,\n        0x27362d39,\n        0x3a24362e,\n        0x312a3f23,\n        0x58704868,\n        0x537e4165,\n        0x4e6c5a72,\n        0x4562537f,\n        0x74486c5c,\n        0x7f466551,\n        0x62547e46,\n        0x695a774b,\n        0xb0e090d0,\n        0xbbee99dd,\n        0xa6fc82ca,\n        0xadf28bc7,\n        0x9cd8b4e4,\n        0x97d6bde9,\n        0x8ac4a6fe,\n        0x81caaff3,\n        0xe890d8b8,\n        0xe39ed1b5,\n        0xfe8ccaa2,\n        0xf582c3af,\n        0xc4a8fc8c,\n        0xcfa6f581,\n        0xd2b4ee96,\n        0xd9bae79b,\n        0x7bdb3bbb,\n        0x70d532b6,\n        0x6dc729a1,\n        0x66c920ac,\n        0x57e31f8f,\n        0x5ced1682,\n        0x41ff0d95,\n        0x4af10498,\n        0x23ab73d3,\n        0x28a57ade,\n        0x35b761c9,\n        0x3eb968c4,\n        0x0f9357e7,\n        0x049d5eea,\n        0x198f45fd,\n        0x12814cf0,\n        0xcb3bab6b,\n        0xc035a266,\n        0xdd27b971,\n        0xd629b07c,\n        0xe7038f5f,\n        0xec0d8652,\n        0xf11f9d45,\n        0xfa119448,\n        0x934be303,\n        0x9845ea0e,\n        0x8557f119,\n        0x8e59f814,\n        0xbf73c737,\n        0xb47dce3a,\n        0xa96fd52d,\n        0xa261dc20,\n        0xf6ad766d,\n        0xfda37f60,\n        0xe0b16477,\n        0xebbf6d7a,\n        0xda955259,\n        0xd19b5b54,\n        0xcc894043,\n        0xc787494e,\n        0xaedd3e05,\n        0xa5d33708,\n        0xb8c12c1f,\n        0xb3cf2512,\n        0x82e51a31,\n        0x89eb133c,\n        0x94f9082b,\n        0x9ff70126,\n        0x464de6bd,\n        0x4d43efb0,\n        0x5051f4a7,\n        0x5b5ffdaa,\n        0x6a75c289,\n        0x617bcb84,\n        0x7c69d093,\n        0x7767d99e,\n        0x1e3daed5,\n        0x1533a7d8,\n        0x0821bccf,\n        0x032fb5c2,\n        0x32058ae1,\n        0x390b83ec,\n        0x241998fb,\n        0x2f1791f6,\n        0x8d764dd6,\n        0x867844db,\n        0x9b6a5fcc,\n        0x906456c1,\n        0xa14e69e2,\n        0xaa4060ef,\n        0xb7527bf8,\n        0xbc5c72f5,\n        0xd50605be,\n        0xde080cb3,\n        0xc31a17a4,\n        0xc8141ea9,\n        0xf93e218a,\n        0xf2302887,\n        0xef223390,\n        0xe42c3a9d,\n        0x3d96dd06,\n        0x3698d40b,\n        0x2b8acf1c,\n        0x2084c611,\n        0x11aef932,\n        0x1aa0f03f,\n        0x07b2eb28,\n        0x0cbce225,\n        0x65e6956e,\n        0x6ee89c63,\n        0x73fa8774,\n        0x78f48e79,\n        0x49deb15a,\n        0x42d0b857,\n        0x5fc2a340,\n        0x54ccaa4d,\n        0xf741ecda,\n        0xfc4fe5d7,\n        0xe15dfec0,\n        0xea53f7cd,\n        0xdb79c8ee,\n        0xd077c1e3,\n        0xcd65daf4,\n        0xc66bd3f9,\n        0xaf31a4b2,\n        0xa43fadbf,\n        0xb92db6a8,\n        0xb223bfa5,\n        0x83098086,\n        0x8807898b,\n        0x9515929c,\n        0x9e1b9b91,\n        0x47a17c0a,\n        0x4caf7507,\n        0x51bd6e10,\n        0x5ab3671d,\n        0x6b99583e,\n        0x60975133,\n        0x7d854a24,\n        0x768b4329,\n        0x1fd13462,\n        0x14df3d6f,\n        0x09cd2678,\n        0x02c32f75,\n        0x33e91056,\n        0x38e7195b,\n        0x25f5024c,\n        0x2efb0b41,\n        0x8c9ad761,\n        0x8794de6c,\n        0x9a86c57b,\n        0x9188cc76,\n        0xa0a2f355,\n        0xabacfa58,\n        0xb6bee14f,\n        0xbdb0e842,\n        0xd4ea9f09,\n        0xdfe49604,\n        0xc2f68d13,\n        0xc9f8841e,\n        0xf8d2bb3d,\n        0xf3dcb230,\n        0xeecea927,\n        0xe5c0a02a,\n        0x3c7a47b1,\n        0x37744ebc,\n        0x2a6655ab,\n        0x21685ca6,\n        0x10426385,\n        0x1b4c6a88,\n        0x065e719f,\n        0x0d507892,\n        0x640a0fd9,\n        0x6f0406d4,\n        0x72161dc3,\n        0x791814ce,\n        0x48322bed,\n        0x433c22e0,\n        0x5e2e39f7,\n        0x552030fa,\n        0x01ec9ab7,\n        0x0ae293ba,\n        0x17f088ad,\n        0x1cfe81a0,\n        0x2dd4be83,\n        0x26dab78e,\n        0x3bc8ac99,\n        0x30c6a594,\n        0x599cd2df,\n        0x5292dbd2,\n        0x4f80c0c5,\n        0x448ec9c8,\n        0x75a4f6eb,\n        0x7eaaffe6,\n        0x63b8e4f1,\n        0x68b6edfc,\n        0xb10c0a67,\n        0xba02036a,\n        0xa710187d,\n        0xac1e1170,\n        0x9d342e53,\n        0x963a275e,\n        0x8b283c49,\n        0x80263544,\n        0xe97c420f,\n        0xe2724b02,\n        0xff605015,\n        0xf46e5918,\n        0xc544663b,\n        0xce4a6f36,\n        0xd3587421,\n        0xd8567d2c,\n        0x7a37a10c,\n        0x7139a801,\n        0x6c2bb316,\n        0x6725ba1b,\n        0x560f8538,\n        0x5d018c35,\n        0x40139722,\n        0x4b1d9e2f,\n        0x2247e964,\n        0x2949e069,\n        0x345bfb7e,\n        0x3f55f273,\n        0x0e7fcd50,\n        0x0571c45d,\n        0x1863df4a,\n        0x136dd647,\n        0xcad731dc,\n        0xc1d938d1,\n        0xdccb23c6,\n        0xd7c52acb,\n        0xe6ef15e8,\n        0xede11ce5,\n        0xf0f307f2,\n        0xfbfd0eff,\n        0x92a779b4,\n        0x99a970b9,\n        0x84bb6bae,\n        0x8fb562a3,\n        0xbe9f5d80,\n        0xb591548d,\n        0xa8834f9a,\n        0xa38d4697\n    ];\n    var U3 = [\n        0x00000000,\n        0x0d0b0e09,\n        0x1a161c12,\n        0x171d121b,\n        0x342c3824,\n        0x3927362d,\n        0x2e3a2436,\n        0x23312a3f,\n        0x68587048,\n        0x65537e41,\n        0x724e6c5a,\n        0x7f456253,\n        0x5c74486c,\n        0x517f4665,\n        0x4662547e,\n        0x4b695a77,\n        0xd0b0e090,\n        0xddbbee99,\n        0xcaa6fc82,\n        0xc7adf28b,\n        0xe49cd8b4,\n        0xe997d6bd,\n        0xfe8ac4a6,\n        0xf381caaf,\n        0xb8e890d8,\n        0xb5e39ed1,\n        0xa2fe8cca,\n        0xaff582c3,\n        0x8cc4a8fc,\n        0x81cfa6f5,\n        0x96d2b4ee,\n        0x9bd9bae7,\n        0xbb7bdb3b,\n        0xb670d532,\n        0xa16dc729,\n        0xac66c920,\n        0x8f57e31f,\n        0x825ced16,\n        0x9541ff0d,\n        0x984af104,\n        0xd323ab73,\n        0xde28a57a,\n        0xc935b761,\n        0xc43eb968,\n        0xe70f9357,\n        0xea049d5e,\n        0xfd198f45,\n        0xf012814c,\n        0x6bcb3bab,\n        0x66c035a2,\n        0x71dd27b9,\n        0x7cd629b0,\n        0x5fe7038f,\n        0x52ec0d86,\n        0x45f11f9d,\n        0x48fa1194,\n        0x03934be3,\n        0x0e9845ea,\n        0x198557f1,\n        0x148e59f8,\n        0x37bf73c7,\n        0x3ab47dce,\n        0x2da96fd5,\n        0x20a261dc,\n        0x6df6ad76,\n        0x60fda37f,\n        0x77e0b164,\n        0x7aebbf6d,\n        0x59da9552,\n        0x54d19b5b,\n        0x43cc8940,\n        0x4ec78749,\n        0x05aedd3e,\n        0x08a5d337,\n        0x1fb8c12c,\n        0x12b3cf25,\n        0x3182e51a,\n        0x3c89eb13,\n        0x2b94f908,\n        0x269ff701,\n        0xbd464de6,\n        0xb04d43ef,\n        0xa75051f4,\n        0xaa5b5ffd,\n        0x896a75c2,\n        0x84617bcb,\n        0x937c69d0,\n        0x9e7767d9,\n        0xd51e3dae,\n        0xd81533a7,\n        0xcf0821bc,\n        0xc2032fb5,\n        0xe132058a,\n        0xec390b83,\n        0xfb241998,\n        0xf62f1791,\n        0xd68d764d,\n        0xdb867844,\n        0xcc9b6a5f,\n        0xc1906456,\n        0xe2a14e69,\n        0xefaa4060,\n        0xf8b7527b,\n        0xf5bc5c72,\n        0xbed50605,\n        0xb3de080c,\n        0xa4c31a17,\n        0xa9c8141e,\n        0x8af93e21,\n        0x87f23028,\n        0x90ef2233,\n        0x9de42c3a,\n        0x063d96dd,\n        0x0b3698d4,\n        0x1c2b8acf,\n        0x112084c6,\n        0x3211aef9,\n        0x3f1aa0f0,\n        0x2807b2eb,\n        0x250cbce2,\n        0x6e65e695,\n        0x636ee89c,\n        0x7473fa87,\n        0x7978f48e,\n        0x5a49deb1,\n        0x5742d0b8,\n        0x405fc2a3,\n        0x4d54ccaa,\n        0xdaf741ec,\n        0xd7fc4fe5,\n        0xc0e15dfe,\n        0xcdea53f7,\n        0xeedb79c8,\n        0xe3d077c1,\n        0xf4cd65da,\n        0xf9c66bd3,\n        0xb2af31a4,\n        0xbfa43fad,\n        0xa8b92db6,\n        0xa5b223bf,\n        0x86830980,\n        0x8b880789,\n        0x9c951592,\n        0x919e1b9b,\n        0x0a47a17c,\n        0x074caf75,\n        0x1051bd6e,\n        0x1d5ab367,\n        0x3e6b9958,\n        0x33609751,\n        0x247d854a,\n        0x29768b43,\n        0x621fd134,\n        0x6f14df3d,\n        0x7809cd26,\n        0x7502c32f,\n        0x5633e910,\n        0x5b38e719,\n        0x4c25f502,\n        0x412efb0b,\n        0x618c9ad7,\n        0x6c8794de,\n        0x7b9a86c5,\n        0x769188cc,\n        0x55a0a2f3,\n        0x58abacfa,\n        0x4fb6bee1,\n        0x42bdb0e8,\n        0x09d4ea9f,\n        0x04dfe496,\n        0x13c2f68d,\n        0x1ec9f884,\n        0x3df8d2bb,\n        0x30f3dcb2,\n        0x27eecea9,\n        0x2ae5c0a0,\n        0xb13c7a47,\n        0xbc37744e,\n        0xab2a6655,\n        0xa621685c,\n        0x85104263,\n        0x881b4c6a,\n        0x9f065e71,\n        0x920d5078,\n        0xd9640a0f,\n        0xd46f0406,\n        0xc372161d,\n        0xce791814,\n        0xed48322b,\n        0xe0433c22,\n        0xf75e2e39,\n        0xfa552030,\n        0xb701ec9a,\n        0xba0ae293,\n        0xad17f088,\n        0xa01cfe81,\n        0x832dd4be,\n        0x8e26dab7,\n        0x993bc8ac,\n        0x9430c6a5,\n        0xdf599cd2,\n        0xd25292db,\n        0xc54f80c0,\n        0xc8448ec9,\n        0xeb75a4f6,\n        0xe67eaaff,\n        0xf163b8e4,\n        0xfc68b6ed,\n        0x67b10c0a,\n        0x6aba0203,\n        0x7da71018,\n        0x70ac1e11,\n        0x539d342e,\n        0x5e963a27,\n        0x498b283c,\n        0x44802635,\n        0x0fe97c42,\n        0x02e2724b,\n        0x15ff6050,\n        0x18f46e59,\n        0x3bc54466,\n        0x36ce4a6f,\n        0x21d35874,\n        0x2cd8567d,\n        0x0c7a37a1,\n        0x017139a8,\n        0x166c2bb3,\n        0x1b6725ba,\n        0x38560f85,\n        0x355d018c,\n        0x22401397,\n        0x2f4b1d9e,\n        0x642247e9,\n        0x692949e0,\n        0x7e345bfb,\n        0x733f55f2,\n        0x500e7fcd,\n        0x5d0571c4,\n        0x4a1863df,\n        0x47136dd6,\n        0xdccad731,\n        0xd1c1d938,\n        0xc6dccb23,\n        0xcbd7c52a,\n        0xe8e6ef15,\n        0xe5ede11c,\n        0xf2f0f307,\n        0xfffbfd0e,\n        0xb492a779,\n        0xb999a970,\n        0xae84bb6b,\n        0xa38fb562,\n        0x80be9f5d,\n        0x8db59154,\n        0x9aa8834f,\n        0x97a38d46\n    ];\n    var U4 = [\n        0x00000000,\n        0x090d0b0e,\n        0x121a161c,\n        0x1b171d12,\n        0x24342c38,\n        0x2d392736,\n        0x362e3a24,\n        0x3f23312a,\n        0x48685870,\n        0x4165537e,\n        0x5a724e6c,\n        0x537f4562,\n        0x6c5c7448,\n        0x65517f46,\n        0x7e466254,\n        0x774b695a,\n        0x90d0b0e0,\n        0x99ddbbee,\n        0x82caa6fc,\n        0x8bc7adf2,\n        0xb4e49cd8,\n        0xbde997d6,\n        0xa6fe8ac4,\n        0xaff381ca,\n        0xd8b8e890,\n        0xd1b5e39e,\n        0xcaa2fe8c,\n        0xc3aff582,\n        0xfc8cc4a8,\n        0xf581cfa6,\n        0xee96d2b4,\n        0xe79bd9ba,\n        0x3bbb7bdb,\n        0x32b670d5,\n        0x29a16dc7,\n        0x20ac66c9,\n        0x1f8f57e3,\n        0x16825ced,\n        0x0d9541ff,\n        0x04984af1,\n        0x73d323ab,\n        0x7ade28a5,\n        0x61c935b7,\n        0x68c43eb9,\n        0x57e70f93,\n        0x5eea049d,\n        0x45fd198f,\n        0x4cf01281,\n        0xab6bcb3b,\n        0xa266c035,\n        0xb971dd27,\n        0xb07cd629,\n        0x8f5fe703,\n        0x8652ec0d,\n        0x9d45f11f,\n        0x9448fa11,\n        0xe303934b,\n        0xea0e9845,\n        0xf1198557,\n        0xf8148e59,\n        0xc737bf73,\n        0xce3ab47d,\n        0xd52da96f,\n        0xdc20a261,\n        0x766df6ad,\n        0x7f60fda3,\n        0x6477e0b1,\n        0x6d7aebbf,\n        0x5259da95,\n        0x5b54d19b,\n        0x4043cc89,\n        0x494ec787,\n        0x3e05aedd,\n        0x3708a5d3,\n        0x2c1fb8c1,\n        0x2512b3cf,\n        0x1a3182e5,\n        0x133c89eb,\n        0x082b94f9,\n        0x01269ff7,\n        0xe6bd464d,\n        0xefb04d43,\n        0xf4a75051,\n        0xfdaa5b5f,\n        0xc2896a75,\n        0xcb84617b,\n        0xd0937c69,\n        0xd99e7767,\n        0xaed51e3d,\n        0xa7d81533,\n        0xbccf0821,\n        0xb5c2032f,\n        0x8ae13205,\n        0x83ec390b,\n        0x98fb2419,\n        0x91f62f17,\n        0x4dd68d76,\n        0x44db8678,\n        0x5fcc9b6a,\n        0x56c19064,\n        0x69e2a14e,\n        0x60efaa40,\n        0x7bf8b752,\n        0x72f5bc5c,\n        0x05bed506,\n        0x0cb3de08,\n        0x17a4c31a,\n        0x1ea9c814,\n        0x218af93e,\n        0x2887f230,\n        0x3390ef22,\n        0x3a9de42c,\n        0xdd063d96,\n        0xd40b3698,\n        0xcf1c2b8a,\n        0xc6112084,\n        0xf93211ae,\n        0xf03f1aa0,\n        0xeb2807b2,\n        0xe2250cbc,\n        0x956e65e6,\n        0x9c636ee8,\n        0x877473fa,\n        0x8e7978f4,\n        0xb15a49de,\n        0xb85742d0,\n        0xa3405fc2,\n        0xaa4d54cc,\n        0xecdaf741,\n        0xe5d7fc4f,\n        0xfec0e15d,\n        0xf7cdea53,\n        0xc8eedb79,\n        0xc1e3d077,\n        0xdaf4cd65,\n        0xd3f9c66b,\n        0xa4b2af31,\n        0xadbfa43f,\n        0xb6a8b92d,\n        0xbfa5b223,\n        0x80868309,\n        0x898b8807,\n        0x929c9515,\n        0x9b919e1b,\n        0x7c0a47a1,\n        0x75074caf,\n        0x6e1051bd,\n        0x671d5ab3,\n        0x583e6b99,\n        0x51336097,\n        0x4a247d85,\n        0x4329768b,\n        0x34621fd1,\n        0x3d6f14df,\n        0x267809cd,\n        0x2f7502c3,\n        0x105633e9,\n        0x195b38e7,\n        0x024c25f5,\n        0x0b412efb,\n        0xd7618c9a,\n        0xde6c8794,\n        0xc57b9a86,\n        0xcc769188,\n        0xf355a0a2,\n        0xfa58abac,\n        0xe14fb6be,\n        0xe842bdb0,\n        0x9f09d4ea,\n        0x9604dfe4,\n        0x8d13c2f6,\n        0x841ec9f8,\n        0xbb3df8d2,\n        0xb230f3dc,\n        0xa927eece,\n        0xa02ae5c0,\n        0x47b13c7a,\n        0x4ebc3774,\n        0x55ab2a66,\n        0x5ca62168,\n        0x63851042,\n        0x6a881b4c,\n        0x719f065e,\n        0x78920d50,\n        0x0fd9640a,\n        0x06d46f04,\n        0x1dc37216,\n        0x14ce7918,\n        0x2bed4832,\n        0x22e0433c,\n        0x39f75e2e,\n        0x30fa5520,\n        0x9ab701ec,\n        0x93ba0ae2,\n        0x88ad17f0,\n        0x81a01cfe,\n        0xbe832dd4,\n        0xb78e26da,\n        0xac993bc8,\n        0xa59430c6,\n        0xd2df599c,\n        0xdbd25292,\n        0xc0c54f80,\n        0xc9c8448e,\n        0xf6eb75a4,\n        0xffe67eaa,\n        0xe4f163b8,\n        0xedfc68b6,\n        0x0a67b10c,\n        0x036aba02,\n        0x187da710,\n        0x1170ac1e,\n        0x2e539d34,\n        0x275e963a,\n        0x3c498b28,\n        0x35448026,\n        0x420fe97c,\n        0x4b02e272,\n        0x5015ff60,\n        0x5918f46e,\n        0x663bc544,\n        0x6f36ce4a,\n        0x7421d358,\n        0x7d2cd856,\n        0xa10c7a37,\n        0xa8017139,\n        0xb3166c2b,\n        0xba1b6725,\n        0x8538560f,\n        0x8c355d01,\n        0x97224013,\n        0x9e2f4b1d,\n        0xe9642247,\n        0xe0692949,\n        0xfb7e345b,\n        0xf2733f55,\n        0xcd500e7f,\n        0xc45d0571,\n        0xdf4a1863,\n        0xd647136d,\n        0x31dccad7,\n        0x38d1c1d9,\n        0x23c6dccb,\n        0x2acbd7c5,\n        0x15e8e6ef,\n        0x1ce5ede1,\n        0x07f2f0f3,\n        0x0efffbfd,\n        0x79b492a7,\n        0x70b999a9,\n        0x6bae84bb,\n        0x62a38fb5,\n        0x5d80be9f,\n        0x548db591,\n        0x4f9aa883,\n        0x4697a38d\n    ];\n    function convertToInt32(bytes) {\n        var result = [];\n        for(var i = 0; i < bytes.length; i += 4){\n            result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n        }\n        return result;\n    }\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        Object.defineProperty(this, \"key\", {\n            value: coerceArray(key, true)\n        });\n        this._prepare();\n    };\n    AES.prototype._prepare = function() {\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error(\"invalid key size (must be 16, 24 or 32 bytes)\");\n        }\n        // encryption round keys\n        this._Ke = [];\n        // decryption round keys\n        this._Kd = [];\n        for(var i = 0; i <= rounds; i++){\n            this._Ke.push([\n                0,\n                0,\n                0,\n                0\n            ]);\n            this._Kd.push([\n                0,\n                0,\n                0,\n                0\n            ]);\n        }\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n        // copy values into round key arrays\n        var index;\n        for(var i = 0; i < KC; i++){\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while(t < roundKeyCount){\n            tt = tk[KC - 1];\n            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n            rconpointer += 1;\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for(var i = 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for(var i = 1; i < KC / 2; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[KC / 2 - 1];\n                tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n                for(var i = KC / 2 + 1; i < KC; i++){\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while(i < KC && t < roundKeyCount){\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for(var r = 1; r < rounds; r++){\n            for(var c = 0; c < 4; c++){\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n            }\n        }\n    };\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error(\"invalid plaintext size (must be 16 bytes)\");\n        }\n        var rounds = this._Ke.length - 1;\n        var a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for(var i = 0; i < 4; i++){\n            t[i] ^= this._Ke[0][i];\n        }\n        // apply round transforms\n        for(var r = 1; r < rounds; r++){\n            for(var i = 0; i < 4; i++){\n                a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        var result = createArray(16), tt;\n        for(var i = 0; i < 4; i++){\n            tt = this._Ke[rounds][i];\n            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    };\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error(\"invalid ciphertext size (must be 16 bytes)\");\n        }\n        var rounds = this._Kd.length - 1;\n        var a = [\n            0,\n            0,\n            0,\n            0\n        ];\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for(var i = 0; i < 4; i++){\n            t[i] ^= this._Kd[0][i];\n        }\n        // apply round transforms\n        for(var r = 1; r < rounds; r++){\n            for(var i = 0; i < 4; i++){\n                a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];\n            }\n            t = a.slice();\n        }\n        // the last round is special\n        var result = createArray(16), tt;\n        for(var i = 0; i < 4; i++){\n            tt = this._Kd[rounds][i];\n            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n        return result;\n    };\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */ var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n        this._aes = new AES(key);\n    };\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n        if (plaintext.length % 16 !== 0) {\n            throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n        for(var i = 0; i < plaintext.length; i += 16){\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n        return ciphertext;\n    };\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n        if (ciphertext.length % 16 !== 0) {\n            throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n        for(var i = 0; i < ciphertext.length; i += 16){\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n        return plaintext;\n    };\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */ var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n        if (!iv) {\n            iv = createArray(16);\n        } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 bytes)\");\n        }\n        this._lastCipherblock = coerceArray(iv, true);\n        this._aes = new AES(key);\n    };\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n        if (plaintext.length % 16 !== 0) {\n            throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");\n        }\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n        for(var i = 0; i < plaintext.length; i += 16){\n            copyArray(plaintext, block, 0, i, i + 16);\n            for(var j = 0; j < 16; j++){\n                block[j] ^= this._lastCipherblock[j];\n            }\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n        return ciphertext;\n    };\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n        if (ciphertext.length % 16 !== 0) {\n            throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");\n        }\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n        for(var i = 0; i < ciphertext.length; i += 16){\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            for(var j = 0; j < 16; j++){\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n        return plaintext;\n    };\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */ var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n        if (!iv) {\n            iv = createArray(16);\n        } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 size)\");\n        }\n        if (!segmentSize) {\n            segmentSize = 1;\n        }\n        this.segmentSize = segmentSize;\n        this._shiftRegister = coerceArray(iv, true);\n        this._aes = new AES(key);\n    };\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if (plaintext.length % this.segmentSize != 0) {\n            throw new Error(\"invalid plaintext size (must be segmentSize bytes)\");\n        }\n        var encrypted = coerceArray(plaintext, true);\n        var xorSegment;\n        for(var i = 0; i < encrypted.length; i += this.segmentSize){\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for(var j = 0; j < this.segmentSize; j++){\n                encrypted[i + j] ^= xorSegment[j];\n            }\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n        return encrypted;\n    };\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length % this.segmentSize != 0) {\n            throw new Error(\"invalid ciphertext size (must be segmentSize bytes)\");\n        }\n        var plaintext = coerceArray(ciphertext, true);\n        var xorSegment;\n        for(var i = 0; i < plaintext.length; i += this.segmentSize){\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for(var j = 0; j < this.segmentSize; j++){\n                plaintext[i + j] ^= xorSegment[j];\n            }\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n        return plaintext;\n    };\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */ var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n        if (!iv) {\n            iv = createArray(16);\n        } else if (iv.length != 16) {\n            throw new Error(\"invalid initialation vector size (must be 16 bytes)\");\n        }\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n        this._aes = new AES(key);\n    };\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n        for(var i = 0; i < encrypted.length; i++){\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n        return encrypted;\n    };\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n    /**\n     *  Counter object for CTR common mode of operation\n     */ var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error(\"Counter must be instanitated with `new`\");\n        }\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) {\n            initialValue = 1;\n        }\n        if (typeof initialValue === \"number\") {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n        } else {\n            this.setBytes(initialValue);\n        }\n    };\n    Counter.prototype.setValue = function(value) {\n        if (typeof value !== \"number\" || parseInt(value) != value) {\n            throw new Error(\"invalid counter value (must be an integer)\");\n        }\n        for(var index = 15; index >= 0; --index){\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    };\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n        if (bytes.length != 16) {\n            throw new Error(\"invalid counter bytes size (must be 16 bytes)\");\n        }\n        this._counter = bytes;\n    };\n    Counter.prototype.increment = function() {\n        for(var i = 15; i >= 0; i--){\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    };\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */ var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error(\"AES must be instanitated with `new`\");\n        }\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter);\n        }\n        this._counter = counter;\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n        this._aes = new AES(key);\n    };\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n        for(var i = 0; i < encrypted.length; i++){\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n        return encrypted;\n    };\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n    ///////////////////////\n    // Padding\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - data.length % 16;\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for(var i = data.length; i < result.length; i++){\n            result[i] = padder;\n        }\n        return result;\n    }\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) {\n            throw new Error(\"PKCS#7 invalid length\");\n        }\n        var padder = data[data.length - 1];\n        if (padder > 16) {\n            throw new Error(\"PKCS#7 padding byte out of range\");\n        }\n        var length = data.length - padder;\n        for(var i = 0; i < padder; i++){\n            if (data[length + i] !== padder) {\n                throw new Error(\"PKCS#7 invalid padding byte\");\n            }\n        }\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n    ///////////////////////\n    // Exporting\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray\n        }\n    };\n    // node.js\n    if (true) {\n        module.exports = aesjs;\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/aes-js/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bech32/index.js":
/*!**************************************!*\
  !*** ./node_modules/bech32/index.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n// pre-compute lookup table\nvar ALPHABET_MAP = {};\nfor(var z = 0; z < ALPHABET.length; z++){\n    var x = ALPHABET.charAt(z);\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + \" is ambiguous\");\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    var b = pre >> 25;\n    return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\nfunction prefixChk(prefix) {\n    var chk = 1;\n    for(var i = 0; i < prefix.length; ++i){\n        var c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126) return \"Invalid prefix (\" + prefix + \")\";\n        chk = polymodStep(chk) ^ c >> 5;\n    }\n    chk = polymodStep(chk);\n    for(i = 0; i < prefix.length; ++i){\n        var v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ v & 0x1f;\n    }\n    return chk;\n}\nfunction encode(prefix, words, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError(\"Exceeds length limit\");\n    prefix = prefix.toLowerCase();\n    // determine chk mod\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") throw new Error(chk);\n    var result = prefix + \"1\";\n    for(var i = 0; i < words.length; ++i){\n        var x = words[i];\n        if (x >> 5 !== 0) throw new Error(\"Non 5-bit word\");\n        chk = polymodStep(chk) ^ x;\n        result += ALPHABET.charAt(x);\n    }\n    for(i = 0; i < 6; ++i){\n        chk = polymodStep(chk);\n    }\n    chk ^= 1;\n    for(i = 0; i < 6; ++i){\n        var v = chk >> (5 - i) * 5 & 0x1f;\n        result += ALPHABET.charAt(v);\n    }\n    return result;\n}\nfunction __decode(str, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (str.length < 8) return str + \" too short\";\n    if (str.length > LIMIT) return \"Exceeds length limit\";\n    // don't allow mixed case\n    var lowered = str.toLowerCase();\n    var uppered = str.toUpperCase();\n    if (str !== lowered && str !== uppered) return \"Mixed-case string \" + str;\n    str = lowered;\n    var split = str.lastIndexOf(\"1\");\n    if (split === -1) return \"No separator character for \" + str;\n    if (split === 0) return \"Missing prefix for \" + str;\n    var prefix = str.slice(0, split);\n    var wordChars = str.slice(split + 1);\n    if (wordChars.length < 6) return \"Data too short\";\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") return chk;\n    var words = [];\n    for(var i = 0; i < wordChars.length; ++i){\n        var c = wordChars.charAt(i);\n        var v = ALPHABET_MAP[c];\n        if (v === undefined) return \"Unknown character \" + c;\n        chk = polymodStep(chk) ^ v;\n        // not in the checksum?\n        if (i + 6 >= wordChars.length) continue;\n        words.push(v);\n    }\n    if (chk !== 1) return \"Invalid checksum for \" + str;\n    return {\n        prefix: prefix,\n        words: words\n    };\n}\nfunction decodeUnsafe() {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n}\nfunction decode(str) {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n    throw new Error(res);\n}\nfunction convert(data, inBits, outBits, pad) {\n    var value = 0;\n    var bits = 0;\n    var maxV = (1 << outBits) - 1;\n    var result = [];\n    for(var i = 0; i < data.length; ++i){\n        value = value << inBits | data[i];\n        bits += inBits;\n        while(bits >= outBits){\n            bits -= outBits;\n            result.push(value >> bits & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push(value << outBits - bits & maxV);\n        }\n    } else {\n        if (bits >= inBits) return \"Excess padding\";\n        if (value << outBits - bits & maxV) return \"Non-zero padding\";\n    }\n    return result;\n}\nfunction toWordsUnsafe(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n}\nfunction toWords(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nfunction fromWordsUnsafe(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n}\nfunction fromWords(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nmodule.exports = {\n    decodeUnsafe: decodeUnsafe,\n    decode: decode,\n    encode: encode,\n    toWordsUnsafe: toWordsUnsafe,\n    toWords: toWords,\n    fromWordsUnsafe: fromWordsUnsafe,\n    fromWords: fromWords\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bech32/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n(function(module1, exports) {\n    \"use strict\";\n    // Utils\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n    function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    }\n    // BN\n    function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n            return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        // Reduction context\n        this.red = null;\n        if (number !== null) {\n            if (base === \"le\" || base === \"be\") {\n                endian = base;\n                base = 10;\n            }\n            this._init(number || 0, base || 10, endian || \"be\");\n        }\n    }\n    if (typeof module1 === \"object\") {\n        module1.exports = BN;\n    } else {\n        exports.BN = BN;\n    }\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n    try {\n        if ( true && typeof window.Buffer !== \"undefined\") {\n            Buffer = window.Buffer;\n        } else {\n            Buffer = (__webpack_require__(/*! buffer */ \"?f4e8\").Buffer);\n        }\n    } catch (e) {}\n    BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n            return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n    BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n    };\n    BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n    };\n    BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n            return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n            return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n            base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n            start++;\n            this.negative = 1;\n        }\n        if (start < number.length) {\n            if (base === 16) {\n                this._parseHex(number, start, endian);\n            } else {\n                this._parseBase(number, base, start);\n                if (endian === \"le\") {\n                    this._initArray(this.toArray(), base, endian);\n                }\n            }\n        }\n    };\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n            this.negative = 1;\n            number = -number;\n        }\n        if (number < 0x4000000) {\n            this.words = [\n                number & 0x3ffffff\n            ];\n            this.length = 1;\n        } else if (number < 0x10000000000000) {\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff\n            ];\n            this.length = 2;\n        } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff,\n                1\n            ];\n            this.length = 3;\n        }\n        if (endian !== \"le\") return;\n        // Reverse the bytes\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n            this.words = [\n                0\n            ];\n            this.length = 1;\n            return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n            for(i = number.length - 1, j = 0; i >= 0; i -= 3){\n                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        } else if (endian === \"le\") {\n            for(i = 0, j = 0; i < number.length; i += 3){\n                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        }\n        return this._strip();\n    };\n    function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        // '0' - '9'\n        if (c >= 48 && c <= 57) {\n            return c - 48;\n        // 'A' - 'F'\n        } else if (c >= 65 && c <= 70) {\n            return c - 55;\n        // 'a' - 'f'\n        } else if (c >= 97 && c <= 102) {\n            return c - 87;\n        } else {\n            assert(false, \"Invalid character in \" + string);\n        }\n    }\n    function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n            r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n    }\n    BN.prototype._parseHex = function _parseHex(number, start, endian) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        // 24-bits chunks\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n            for(i = number.length - 1; i >= start; i -= 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        } else {\n            var parseLength = number.length - start;\n            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){\n                w = parseHexByte(number, start, i) << off;\n                this.words[j] |= w & 0x3ffffff;\n                if (off >= 18) {\n                    off -= 18;\n                    j += 1;\n                    this.words[j] |= w >>> 26;\n                } else {\n                    off += 8;\n                }\n            }\n        }\n        this._strip();\n    };\n    function parseBase(str, start, end, mul) {\n        var r = 0;\n        var b = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r *= mul;\n            // 'a'\n            if (c >= 49) {\n                b = c - 49 + 0xa;\n            // 'A'\n            } else if (c >= 17) {\n                b = c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                b = c;\n            }\n            assert(c >= 0 && b < mul, \"Invalid character\");\n            r += b;\n        }\n        return r;\n    }\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [\n            0\n        ];\n        this.length = 1;\n        // Find length of limb in base\n        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base){\n            limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for(var i = start; i < end; i += limbLen){\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n            for(i = 0; i < mod; i++){\n                pow *= base;\n            }\n            this.imuln(pow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        this._strip();\n    };\n    BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n    };\n    function move(dest, src) {\n        dest.words = src.words;\n        dest.length = src.length;\n        dest.negative = src.negative;\n        dest.red = src.red;\n    }\n    BN.prototype._move = function _move(dest) {\n        move(dest, this);\n    };\n    BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n    };\n    BN.prototype._expand = function _expand(size) {\n        while(this.length < size){\n            this.words[this.length++] = 0;\n        }\n        return this;\n    };\n    // Remove leading `0` from `this`\n    BN.prototype._strip = function strip() {\n        while(this.length > 1 && this.words[this.length - 1] === 0){\n            this.length--;\n        }\n        return this._normSign();\n    };\n    BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n        }\n        return this;\n    };\n    // Check Symbol.for because not everywhere where Symbol defined\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n    if (typeof Symbol !== \"undefined\" && typeof Symbol.for === \"function\") {\n        try {\n            BN.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = inspect;\n        } catch (e) {\n            BN.prototype.inspect = inspect;\n        }\n    } else {\n        BN.prototype.inspect = inspect;\n    }\n    function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n    }\n    /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */ var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n    ];\n    var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n    ];\n    var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        10000000,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64000000,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        24300000,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n    ];\n    BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n            out = \"\";\n            var off = 0;\n            var carry = 0;\n            for(var i = 0; i < this.length; i++){\n                var w = this.words[i];\n                var word = ((w << off | carry) & 0xffffff).toString(16);\n                carry = w >>> 24 - off & 0xffffff;\n                off += 2;\n                if (off >= 26) {\n                    off -= 26;\n                    i--;\n                }\n                if (carry !== 0 || i !== this.length - 1) {\n                    out = zeros[6 - word.length] + word + out;\n                } else {\n                    out = word + out;\n                }\n            }\n            if (carry !== 0) {\n                out = carry.toString(16) + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base];\n            // var groupBase = Math.pow(base, groupSize);\n            var groupBase = groupBases[base];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while(!c.isZero()){\n                var r = c.modrn(groupBase).toString(base);\n                c = c.idivn(groupBase);\n                if (!c.isZero()) {\n                    out = zeros[groupSize - r.length] + r + out;\n                } else {\n                    out = r + out;\n                }\n            }\n            if (this.isZero()) {\n                out = \"0\" + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n    };\n    BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n            assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n    };\n    BN.prototype.toJSON = function toJSON() {\n        return this.toString(16, 2);\n    };\n    if (Buffer) {\n        BN.prototype.toBuffer = function toBuffer(endian, length) {\n            return this.toArrayLike(Buffer, endian, length);\n        };\n    }\n    BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n    };\n    var allocate = function allocate(ArrayType, size) {\n        if (ArrayType.allocUnsafe) {\n            return ArrayType.allocUnsafe(size);\n        }\n        return new ArrayType(size);\n    };\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        this._strip();\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        var res = allocate(ArrayType, reqLength);\n        var postfix = endian === \"le\" ? \"LE\" : \"BE\";\n        this[\"_toArrayLike\" + postfix](res, byteLength);\n        return res;\n    };\n    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {\n        var position = 0;\n        var carry = 0;\n        for(var i = 0, shift = 0; i < this.length; i++){\n            var word = this.words[i] << shift | carry;\n            res[position++] = word & 0xff;\n            if (position < res.length) {\n                res[position++] = word >> 8 & 0xff;\n            }\n            if (position < res.length) {\n                res[position++] = word >> 16 & 0xff;\n            }\n            if (shift === 6) {\n                if (position < res.length) {\n                    res[position++] = word >> 24 & 0xff;\n                }\n                carry = 0;\n                shift = 0;\n            } else {\n                carry = word >>> 24;\n                shift += 2;\n            }\n        }\n        if (position < res.length) {\n            res[position++] = carry;\n            while(position < res.length){\n                res[position++] = 0;\n            }\n        }\n    };\n    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {\n        var position = res.length - 1;\n        var carry = 0;\n        for(var i = 0, shift = 0; i < this.length; i++){\n            var word = this.words[i] << shift | carry;\n            res[position--] = word & 0xff;\n            if (position >= 0) {\n                res[position--] = word >> 8 & 0xff;\n            }\n            if (position >= 0) {\n                res[position--] = word >> 16 & 0xff;\n            }\n            if (shift === 6) {\n                if (position >= 0) {\n                    res[position--] = word >> 24 & 0xff;\n                }\n                carry = 0;\n                shift = 0;\n            } else {\n                carry = word >>> 24;\n                shift += 2;\n            }\n        }\n        if (position >= 0) {\n            res[position--] = carry;\n            while(position >= 0){\n                res[position--] = 0;\n            }\n        }\n    };\n    if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n        };\n    } else {\n        BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n            if (t >= 0x1000) {\n                r += 13;\n                t >>>= 13;\n            }\n            if (t >= 0x40) {\n                r += 7;\n                t >>>= 7;\n            }\n            if (t >= 0x8) {\n                r += 4;\n                t >>>= 4;\n            }\n            if (t >= 0x02) {\n                r += 2;\n                t >>>= 2;\n            }\n            return r + t;\n        };\n    }\n    BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n        }\n        if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n        }\n        if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n        }\n        if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n        }\n        if ((t & 0x1) === 0) {\n            r++;\n        }\n        return r;\n    };\n    // Return number of used bits in a BN\n    BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n    };\n    function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for(var bit = 0; bit < w.length; bit++){\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = num.words[off] >>> wbit & 0x01;\n        }\n        return w;\n    }\n    // Number of trailing zero bits\n    BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n        for(var i = 0; i < this.length; i++){\n            var b = this._zeroBits(this.words[i]);\n            r += b;\n            if (b !== 26) break;\n        }\n        return r;\n    };\n    BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n    };\n    BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n    };\n    BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n    };\n    BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n    };\n    // Return negative clone of `this`\n    BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n    };\n    BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n            this.negative ^= 1;\n        }\n        return this;\n    };\n    // Or `num` with `this` in-place\n    BN.prototype.iuor = function iuor(num) {\n        while(this.length < num.length){\n            this.words[this.length++] = 0;\n        }\n        for(var i = 0; i < num.length; i++){\n            this.words[i] = this.words[i] | num.words[i];\n        }\n        return this._strip();\n    };\n    BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n    };\n    // Or `num` with `this`\n    BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n    };\n    BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n    };\n    // And `num` with `this` in-place\n    BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n        if (this.length > num.length) {\n            b = num;\n        } else {\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this._strip();\n    };\n    BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n    };\n    // And `num` with `this`\n    BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n    };\n    BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n    };\n    // Xor `num` with `this` in-place\n    BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = a.length;\n        return this._strip();\n    };\n    BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n    };\n    // Xor `num` with `this`\n    BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n    };\n    BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n    };\n    // Not ``this`` with ``width`` bitwidth\n    BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        // Extend the buffer with leading zeroes\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n            bytesNeeded--;\n        }\n        // Handle complete words\n        for(var i = 0; i < bytesNeeded; i++){\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n        }\n        // Handle the residue\n        if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        }\n        // And remove leading zeroes\n        return this._strip();\n    };\n    BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n    };\n    // Set `bit` of `this`\n    BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this._strip();\n    };\n    // Add `num` to `this` in-place\n    BN.prototype.iadd = function iadd(num) {\n        var r;\n        // negative + positive\n        if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n        // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n        }\n        // a.length > b.length\n        var a, b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n        // Copy the rest of the words\n        } else if (a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        return this;\n    };\n    // Add `num` to `this`\n    BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n        }\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n    };\n    // Subtract `num` from `this` in-place\n    BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign();\n        // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n        }\n        // At this point both numbers are positive\n        var cmp = this.cmp(num);\n        // Optimization - zeroify\n        if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n        }\n        // a > b\n        var a, b;\n        if (cmp > 0) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        // Copy rest of the words\n        if (carry === 0 && i < a.length && a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n            this.negative = 1;\n        }\n        return this._strip();\n    };\n    // Subtract `num` from `this`\n    BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n    };\n    function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        // Peel one iteration (compiler can't do it, because of code complexity)\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n        for(var k = 1; k < len; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j | 0;\n                a = self.words[i] | 0;\n                b = num.words[j] | 0;\n                r = a * b + rword;\n                ncarry += r / 0x4000000 | 0;\n                rword = r & 0x3ffffff;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry | 0;\n        } else {\n            out.length--;\n        }\n        return out._strip();\n    }\n    // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */ lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */ lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */ lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */ lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */ lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */ lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */ lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */ lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */ lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */ lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */ lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */ lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */ lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */ lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */ lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */ lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */ lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */ lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */ lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n            o[19] = c;\n            out.length++;\n        }\n        return out;\n    };\n    // Polyfill comb\n    if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n    }\n    function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for(var k = 0; k < out.length - 1; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j;\n                var a = self.words[i] | 0;\n                var b = num.words[j] | 0;\n                var r = a * b;\n                var lo = r & 0x3ffffff;\n                ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n                lo = lo + rword | 0;\n                rword = lo & 0x3ffffff;\n                ncarry = ncarry + (lo >>> 26) | 0;\n                hncarry += ncarry >>> 26;\n                ncarry &= 0x3ffffff;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry;\n        } else {\n            out.length--;\n        }\n        return out._strip();\n    }\n    function jumboMulTo(self, num, out) {\n        // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n        // var fftm = new FFTM();\n        // return fftm.mulp(self, num, out);\n        return bigMulTo(self, num, out);\n    }\n    BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n        } else {\n            res = jumboMulTo(this, num, out);\n        }\n        return res;\n    };\n    // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n    function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for(var i = 0; i < N; i++){\n            t[i] = this.revBin(i, l, N);\n        }\n        return t;\n    };\n    // Returns binary-reversed representation of `x`\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n        for(var i = 0; i < l; i++){\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n        }\n        return rb;\n    };\n    // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for(var i = 0; i < N; i++){\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n        }\n    };\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for(var s = 1; s < N; s <<= 1){\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for(var p = 0; p < N; p += l){\n                var rtwdf_ = rtwdf;\n                var itwdf_ = itwdf;\n                for(var j = 0; j < s; j++){\n                    var re = rtws[p + j];\n                    var ie = itws[p + j];\n                    var ro = rtws[p + j + s];\n                    var io = itws[p + j + s];\n                    var rx = rtwdf_ * ro - itwdf_ * io;\n                    io = rtwdf_ * io + itwdf_ * ro;\n                    ro = rx;\n                    rtws[p + j] = re + ro;\n                    itws[p + j] = ie + io;\n                    rtws[p + j + s] = re - ro;\n                    itws[p + j + s] = ie - io;\n                    /* jshint maxdepth : false */ if (j !== l) {\n                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                        rtwdf_ = rx;\n                    }\n                }\n            }\n        }\n    };\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for(N = N / 2 | 0; N; N = N >>> 1){\n            i++;\n        }\n        return 1 << i + 1 + odd;\n    };\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n        for(var i = 0; i < N / 2; i++){\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n        }\n    };\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for(var i = 0; i < N / 2; i++){\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n            if (w < 0x4000000) {\n                carry = 0;\n            } else {\n                carry = w / 0x4000000 | 0;\n            }\n        }\n        return ws;\n    };\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for(var i = 0; i < len; i++){\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n        }\n        // Pad with zeroes\n        for(i = 2 * len; i < N; ++i){\n            rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n    };\n    FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for(var i = 0; i < N; i++){\n            ph[i] = 0;\n        }\n        return ph;\n    };\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for(var i = 0; i < N; i++){\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out._strip();\n    };\n    // Multiply `this` by `num`\n    BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n    };\n    // Multiply employing FFT\n    BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n    };\n    // In-place Multiplication\n    BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n    };\n    BN.prototype.imuln = function imuln(num) {\n        var isNegNum = num < 0;\n        if (isNegNum) num = -num;\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        // Carry\n        var carry = 0;\n        for(var i = 0; i < this.length; i++){\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0;\n            // NOTE: lo is 27bit maximum\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return isNegNum ? this.ineg() : this;\n    };\n    BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n    };\n    // `this` * `this`\n    BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n    };\n    // `this` * `this` in-place\n    BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n    };\n    // Math.pow(`this`, `num`)\n    BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1);\n        // Skip leading zeroes\n        var res = this;\n        for(var i = 0; i < w.length; i++, res = res.sqr()){\n            if (w[i] !== 0) break;\n        }\n        if (++i < w.length) {\n            for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){\n                if (w[i] === 0) continue;\n                res = res.mul(q);\n            }\n        }\n        return res;\n    };\n    // Shift-left in-place\n    BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n            var carry = 0;\n            for(i = 0; i < this.length; i++){\n                var newCarry = this.words[i] & carryMask;\n                var c = (this.words[i] | 0) - newCarry << r;\n                this.words[i] = c | carry;\n                carry = newCarry >>> 26 - r;\n            }\n            if (carry) {\n                this.words[i] = carry;\n                this.length++;\n            }\n        }\n        if (s !== 0) {\n            for(i = this.length - 1; i >= 0; i--){\n                this.words[i + s] = this.words[i];\n            }\n            for(i = 0; i < s; i++){\n                this.words[i] = 0;\n            }\n            this.length += s;\n        }\n        return this._strip();\n    };\n    BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n    };\n    // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n            h = (hint - hint % 26) / 26;\n        } else {\n            h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        // Extended mode, copy masked part\n        if (maskedWords) {\n            for(var i = 0; i < s; i++){\n                maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n        }\n        if (s === 0) {\n        // No-op, we should not move anything at all\n        } else if (this.length > s) {\n            this.length -= s;\n            for(i = 0; i < this.length; i++){\n                this.words[i] = this.words[i + s];\n            }\n        } else {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        var carry = 0;\n        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n        }\n        // Push carried bits as a mask\n        if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        return this._strip();\n    };\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n    };\n    // Shift-left\n    BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n    };\n    BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n    };\n    // Shift-right\n    BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n    };\n    BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n    };\n    // Test if n bit is set\n    BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) return false;\n        // Check bit and return\n        var w = this.words[s];\n        return !!(w & q);\n    };\n    // Return only lowers bits of number (in-place)\n    BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n            return this;\n        }\n        if (r !== 0) {\n            s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n        }\n        return this._strip();\n    };\n    // Return only lowers bits of number\n    BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n    };\n    // Add plain number `num` to `this`\n    BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num);\n        // Possible sign change\n        if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) <= num) {\n                this.words[0] = num - (this.words[0] | 0);\n                this.negative = 0;\n                return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n        }\n        // Add without checks\n        return this._iaddn(num);\n    };\n    BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        // Carry\n        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){\n            this.words[i] -= 0x4000000;\n            if (i === this.length - 1) {\n                this.words[i + 1] = 1;\n            } else {\n                this.words[i + 1]++;\n            }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n    };\n    // Subtract plain number `num` from `this`\n    BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n        if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n        } else {\n            // Carry\n            for(var i = 0; i < this.length && this.words[i] < 0; i++){\n                this.words[i] += 0x4000000;\n                this.words[i + 1] -= 1;\n            }\n        }\n        return this._strip();\n    };\n    BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n    };\n    BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n    };\n    BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n    };\n    BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n    };\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for(i = 0; i < num.length; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        for(; i < this.length - shift; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        if (carry === 0) return this._strip();\n        // Subtraction overflow\n        assert(carry === -1);\n        carry = 0;\n        for(i = 0; i < this.length; i++){\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n        }\n        this.negative = 1;\n        return this._strip();\n    };\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        // Normalize\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n        }\n        // Initialize quotient\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for(var i = 0; i < q.length; i++){\n                q.words[i] = 0;\n            }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n                q.words[m] = 1;\n            }\n        }\n        for(var j = m - 1; j >= 0; j--){\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);\n            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n            a._ishlnsubmul(b, qj, j);\n            while(a.negative !== 0){\n                qj--;\n                a.negative = 0;\n                a._ishlnsubmul(b, 1, j);\n                if (!a.isZero()) {\n                    a.negative ^= 1;\n                }\n            }\n            if (q) {\n                q.words[j] = qj;\n            }\n        }\n        if (q) {\n            q._strip();\n        }\n        a._strip();\n        // Denormalize\n        if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n        }\n        return {\n            div: q || null,\n            mod: a\n        };\n    };\n    // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n            return {\n                div: new BN(0),\n                mod: new BN(0)\n            };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.iadd(num);\n                }\n            }\n            return {\n                div: div,\n                mod: mod\n            };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            return {\n                div: div,\n                mod: res.mod\n            };\n        }\n        if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.isub(num);\n                }\n            }\n            return {\n                div: res.div,\n                mod: mod\n            };\n        }\n        // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n        if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n                div: new BN(0),\n                mod: this\n            };\n        }\n        // Very short reduction\n        if (num.length === 1) {\n            if (mode === \"div\") {\n                return {\n                    div: this.divn(num.words[0]),\n                    mod: null\n                };\n            }\n            if (mode === \"mod\") {\n                return {\n                    div: null,\n                    mod: new BN(this.modrn(num.words[0]))\n                };\n            }\n            return {\n                div: this.divn(num.words[0]),\n                mod: new BN(this.modrn(num.words[0]))\n            };\n        }\n        return this._wordDiv(num, mode);\n    };\n    // Find `this` / `num`\n    BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n    };\n    // Find `this` % `num`\n    BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n    };\n    BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n    };\n    // Find Round(`this` / `num`)\n    BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        // Fast case - exact division\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        // Round down\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n        // Round up\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n    BN.prototype.modrn = function modrn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum) num = -num;\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return isNegNum ? -acc : acc;\n    };\n    // WARNING: DEPRECATED\n    BN.prototype.modn = function modn(num) {\n        return this.modrn(num);\n    };\n    // In-place division by number\n    BN.prototype.idivn = function idivn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum) num = -num;\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n        }\n        this._strip();\n        return isNegNum ? this.ineg() : this;\n    };\n    BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n    };\n    BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n            x = x.umod(p);\n        } else {\n            x = x.clone();\n        }\n        // A * x + B * y = x\n        var A = new BN(1);\n        var B = new BN(0);\n        // C * x + D * y = y\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while(x.isEven() && y.isEven()){\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while(!x.isZero()){\n            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                x.iushrn(i);\n                while(i-- > 0){\n                    if (A.isOdd() || B.isOdd()) {\n                        A.iadd(yp);\n                        B.isub(xp);\n                    }\n                    A.iushrn(1);\n                    B.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                y.iushrn(j);\n                while(j-- > 0){\n                    if (C.isOdd() || D.isOdd()) {\n                        C.iadd(yp);\n                        D.isub(xp);\n                    }\n                    C.iushrn(1);\n                    D.iushrn(1);\n                }\n            }\n            if (x.cmp(y) >= 0) {\n                x.isub(y);\n                A.isub(C);\n                B.isub(D);\n            } else {\n                y.isub(x);\n                C.isub(A);\n                D.isub(B);\n            }\n        }\n        return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n        };\n    };\n    // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n    BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n            a = a.umod(p);\n        } else {\n            a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){\n            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                a.iushrn(i);\n                while(i-- > 0){\n                    if (x1.isOdd()) {\n                        x1.iadd(delta);\n                    }\n                    x1.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                b.iushrn(j);\n                while(j-- > 0){\n                    if (x2.isOdd()) {\n                        x2.iadd(delta);\n                    }\n                    x2.iushrn(1);\n                }\n            }\n            if (a.cmp(b) >= 0) {\n                a.isub(b);\n                x1.isub(x2);\n            } else {\n                b.isub(a);\n                x2.isub(x1);\n            }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n            res = x1;\n        } else {\n            res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n            res.iadd(p);\n        }\n        return res;\n    };\n    BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        // Remove common factor of two\n        for(var shift = 0; a.isEven() && b.isEven(); shift++){\n            a.iushrn(1);\n            b.iushrn(1);\n        }\n        do {\n            while(a.isEven()){\n                a.iushrn(1);\n            }\n            while(b.isEven()){\n                b.iushrn(1);\n            }\n            var r = a.cmp(b);\n            if (r < 0) {\n                // Swap `a` and `b` to make `a` always bigger than `b`\n                var t = a;\n                a = b;\n                b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n                break;\n            }\n            a.isub(b);\n        }while (true);\n        return b.iushln(shift);\n    };\n    // Invert number in the field F(num)\n    BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n    };\n    BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n    };\n    BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n    };\n    // And first word and num\n    BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n    };\n    // Increment at the bit position in-line\n    BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n        }\n        // Add bit and propagate, if needed\n        var carry = q;\n        for(var i = s; carry !== 0 && i < this.length; i++){\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n    };\n    BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this._strip();\n        var res;\n        if (this.length > 1) {\n            res = 1;\n        } else {\n            if (negative) {\n                num = -num;\n            }\n            assert(num <= 0x3ffffff, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n    BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Unsigned comparison\n    BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n            if (a < b) {\n                res = -1;\n            } else if (a > b) {\n                res = 1;\n            }\n            break;\n        }\n        return res;\n    };\n    BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n    };\n    BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n    };\n    BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n    };\n    BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n    };\n    BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n    };\n    BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n    };\n    BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n    };\n    BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n    };\n    BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n    };\n    BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n    };\n    //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n    BN.red = function red(num) {\n        return new Red(num);\n    };\n    BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n    };\n    BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n    };\n    BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n    };\n    BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n    };\n    BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n    };\n    BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n    };\n    BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n    };\n    BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n    };\n    BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n    };\n    BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n    };\n    BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n    };\n    BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n    };\n    BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n    };\n    // Square root over p\n    BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n    };\n    BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n    };\n    // Return negative clone of `this` % `red modulo`\n    BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n    };\n    BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n    };\n    // Prime numbers with efficient reduction\n    var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n    };\n    // Pseudo-Mersenne prime\n    function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n    }\n    MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n    };\n    MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n        do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n        }while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n        } else if (cmp > 0) {\n            r.isub(this.p);\n        } else {\n            if (r.strip !== undefined) {\n                // r is a BN v4 instance\n                r.strip();\n            } else {\n                // r is a BN v5 instance\n                r._strip();\n            }\n        }\n        return r;\n    };\n    MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n    };\n    MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n    };\n    function K256() {\n        MPrime.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n    }\n    inherits(K256, MPrime);\n    K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n        for(var i = 0; i < outLen; i++){\n            output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n        }\n        // Shift by 9 limbs\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for(i = 10; i < input.length; i++){\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n        } else {\n            input.length -= 9;\n        }\n    };\n    K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n        var lo = 0;\n        for(var i = 0; i < num.length; i++){\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n        }\n        // Fast length reduction\n        if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n                num.length--;\n            }\n        }\n        return num;\n    };\n    function P224() {\n        MPrime.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n    }\n    inherits(P224, MPrime);\n    function P192() {\n        MPrime.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n    }\n    inherits(P192, MPrime);\n    function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n    }\n    inherits(P25519, MPrime);\n    P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n        for(var i = 0; i < num.length; i++){\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n        }\n        if (carry !== 0) {\n            num.words[num.length++] = carry;\n        }\n        return num;\n    };\n    // Exported mostly for testing purposes, use plain name instead\n    BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n        if (name === \"k256\") {\n            prime = new K256();\n        } else if (name === \"p224\") {\n            prime = new P224();\n        } else if (name === \"p192\") {\n            prime = new P192();\n        } else if (name === \"p25519\") {\n            prime = new P25519();\n        } else {\n            throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime;\n        return prime;\n    };\n    //\n    // Base reduction engine\n    //\n    function Red(m) {\n        if (typeof m === \"string\") {\n            var prime = BN._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n        } else {\n            assert(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n    };\n    Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(a.red && a.red === b.red, \"red works only with red numbers\");\n    };\n    Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        move(a, a.umod(this.m)._forceRed(this));\n        return a;\n    };\n    Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n    };\n    Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    };\n    Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    };\n    Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n    };\n    Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n    };\n    Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n    };\n    Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n    };\n    Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n    };\n    Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        var q = this.m.subn(1);\n        var s = 0;\n        while(!q.isZero() && q.andln(1) === 0){\n            s++;\n            q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while(this.pow(z, lpow).cmp(nOne) !== 0){\n            z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while(t.cmp(one) !== 0){\n            var tmp = t;\n            for(var i = 0; tmp.cmp(one) !== 0; i++){\n                tmp = tmp.redSqr();\n            }\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    };\n    Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        } else {\n            return this.imod(inv);\n        }\n    };\n    Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for(var i = 2; i < wnd.length; i++){\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for(i = num.length - 1; i >= 0; i--){\n            var word = num.words[i];\n            for(var j = start - 1; j >= 0; j--){\n                var bit = word >> j & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    };\n    Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    };\n    Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n    };\n    //\n    // Montgomery method engine\n    //\n    BN.mont = function mont(num) {\n        return new Mont(num);\n    };\n    function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    inherits(Mont, Red);\n    Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    };\n    Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    };\n    Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n    };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bn.js/lib/bn.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ethers/lib.esm/_version.js":
/*!*************************************************!*\
  !*** ./node_modules/ethers/lib.esm/_version.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\nconst version = \"ethers/5.7.2\"; //# sourceMappingURL=_version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9fdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxlQUFlLENBQ3RDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZXRoZXJzL2xpYi5lc20vX3ZlcnNpb24uanM/NmUxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiZXRoZXJzLzUuNy4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ethers/lib.esm/_version.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ethers/lib.esm/ethers.js":
/*!***********************************************!*\
  !*** ./node_modules/ethers/lib.esm/ethers.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: function() { return /* reexport safe */ _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_5__.BaseContract; },\n/* harmony export */   BigNumber: function() { return /* reexport safe */ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber; },\n/* harmony export */   Contract: function() { return /* reexport safe */ _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_5__.Contract; },\n/* harmony export */   ContractFactory: function() { return /* reexport safe */ _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_5__.ContractFactory; },\n/* harmony export */   FixedNumber: function() { return /* reexport safe */ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_7__.FixedNumber; },\n/* harmony export */   Signer: function() { return /* reexport safe */ _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_2__.Signer; },\n/* harmony export */   VoidSigner: function() { return /* reexport safe */ _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_2__.VoidSigner; },\n/* harmony export */   Wallet: function() { return /* reexport safe */ _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_3__.Wallet; },\n/* harmony export */   Wordlist: function() { return /* reexport safe */ _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_11__.Wordlist; },\n/* harmony export */   constants: function() { return /* reexport module object */ _ethersproject_constants__WEBPACK_IMPORTED_MODULE_8__; },\n/* harmony export */   errors: function() { return /* reexport safe */ _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.ErrorCode; },\n/* harmony export */   getDefaultProvider: function() { return /* reexport safe */ _ethersproject_providers__WEBPACK_IMPORTED_MODULE_4__.getDefaultProvider; },\n/* harmony export */   logger: function() { return /* binding */ logger; },\n/* harmony export */   providers: function() { return /* reexport module object */ _ethersproject_providers__WEBPACK_IMPORTED_MODULE_4__; },\n/* harmony export */   utils: function() { return /* reexport module object */ _utils__WEBPACK_IMPORTED_MODULE_9__; },\n/* harmony export */   version: function() { return /* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_1__.version; },\n/* harmony export */   wordlists: function() { return /* reexport safe */ _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_10__.wordlists; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_contracts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/contracts */ \"(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\");\n/* harmony import */ var _ethersproject_abstract_signer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/abstract-signer */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/wallet */ \"(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/constants */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_providers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/providers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/wordlists */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\");\n/* harmony import */ var _ethersproject_wordlists__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/wordlists */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_version */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/_version.js\");\n\n\n\n\n\n\n\n\n\n\n\n////////////////////////\n// Compile-Time Constants\n// This is generated by \"npm run dist\"\n\nconst logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_0__.Logger(_version__WEBPACK_IMPORTED_MODULE_1__.version);\n////////////////////////\n// Exports\n //# sourceMappingURL=ethers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9ldGhlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUNzRTtBQUNqQjtBQUNFO0FBQ3JCO0FBQ087QUFDQTtBQUNRO0FBQ0M7QUFDOUI7QUFDbUM7QUFDcEUsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QixzQ0FBc0M7QUFDRDtBQUNyQyxNQUFNa0IsU0FBUyxJQUFJRix5REFBTUEsQ0FBQ0MsNkNBQU9BO0FBQ2pDLHdCQUF3QjtBQUN4QixVQUFVO0FBSVUsQ0FDcEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9ldGhlcnMuanM/M2JhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IEJhc2VDb250cmFjdCwgQ29udHJhY3QsIENvbnRyYWN0RmFjdG9yeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgRml4ZWROdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBTaWduZXIsIFZvaWRTaWduZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyXCI7XG5pbXBvcnQgeyBXYWxsZXQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2FsbGV0XCI7XG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIkBldGhlcnNwcm9qZWN0L2NvbnN0YW50c1wiO1xuaW1wb3J0ICogYXMgcHJvdmlkZXJzIGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm92aWRlcnNcIjtcbmltcG9ydCB7IFdvcmRsaXN0LCB3b3JkbGlzdHMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgRXJyb3JDb2RlIGFzIGVycm9ycywgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG4vLyBUaGlzIGlzIGdlbmVyYXRlZCBieSBcIm5wbSBydW4gZGlzdFwiXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEV4cG9ydHNcbmV4cG9ydCB7IFNpZ25lciwgV2FsbGV0LCBWb2lkU2lnbmVyLCBnZXREZWZhdWx0UHJvdmlkZXIsIHByb3ZpZGVycywgQmFzZUNvbnRyYWN0LCBDb250cmFjdCwgQ29udHJhY3RGYWN0b3J5LCBCaWdOdW1iZXIsIEZpeGVkTnVtYmVyLCBjb25zdGFudHMsIGVycm9ycywgbG9nZ2VyLCB1dGlscywgd29yZGxpc3RzLCBcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ29tcGlsZS1UaW1lIENvbnN0YW50c1xudmVyc2lvbiwgV29yZGxpc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV0aGVycy5qcy5tYXAiXSwibmFtZXMiOlsiQmFzZUNvbnRyYWN0IiwiQ29udHJhY3QiLCJDb250cmFjdEZhY3RvcnkiLCJCaWdOdW1iZXIiLCJGaXhlZE51bWJlciIsIlNpZ25lciIsIlZvaWRTaWduZXIiLCJXYWxsZXQiLCJjb25zdGFudHMiLCJwcm92aWRlcnMiLCJnZXREZWZhdWx0UHJvdmlkZXIiLCJXb3JkbGlzdCIsIndvcmRsaXN0cyIsInV0aWxzIiwiRXJyb3JDb2RlIiwiZXJyb3JzIiwiTG9nZ2VyIiwidmVyc2lvbiIsImxvZ2dlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ethers/lib.esm/ethers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ethers/lib.esm/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethers/lib.esm/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseContract: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_4__.BaseContract; },\n/* harmony export */   BigNumber: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_5__.BigNumber; },\n/* harmony export */   Contract: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_4__.Contract; },\n/* harmony export */   ContractFactory: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_4__.ContractFactory; },\n/* harmony export */   FixedNumber: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_6__.FixedNumber; },\n/* harmony export */   Signer: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_1__.Signer; },\n/* harmony export */   VoidSigner: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_1__.VoidSigner; },\n/* harmony export */   Wallet: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_2__.Wallet; },\n/* harmony export */   Wordlist: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_12__.Wordlist; },\n/* harmony export */   constants: function() { return /* reexport module object */ _ethers__WEBPACK_IMPORTED_MODULE_7__; },\n/* harmony export */   errors: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_8__.ErrorCode; },\n/* harmony export */   ethers: function() { return /* reexport module object */ _ethers__WEBPACK_IMPORTED_MODULE_0__; },\n/* harmony export */   getDefaultProvider: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_3__.getDefaultProvider; },\n/* harmony export */   logger: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_0__.logger; },\n/* harmony export */   providers: function() { return /* reexport module object */ _ethers__WEBPACK_IMPORTED_MODULE_3__; },\n/* harmony export */   utils: function() { return /* reexport module object */ _ethers__WEBPACK_IMPORTED_MODULE_9__; },\n/* harmony export */   version: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_11__.version; },\n/* harmony export */   wordlists: function() { return /* reexport safe */ _ethers__WEBPACK_IMPORTED_MODULE_10__.wordlists; }\n/* harmony export */ });\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/ethers.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/constants/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/_version.js\");\n/* harmony import */ var _ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js\");\n\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\ntry {\n    const anyGlobal = window;\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = _ethers__WEBPACK_IMPORTED_MODULE_0__;\n    }\n} catch (error) {}\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWE7QUFDYiwrRUFBK0U7QUFDNUM7QUFDbkMsSUFBSTtJQUNBLE1BQU1DLFlBQVlDO0lBQ2xCLElBQUlELFVBQVVFLE9BQU8sSUFBSSxNQUFNO1FBQzNCRixVQUFVRSxPQUFPLEdBQUdILG9DQUFNQTtJQUM5QjtBQUNKLEVBQ0EsT0FBT0ksT0FBTyxDQUFFO0FBQ0U7QUFJa0IsQ0FDcEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9ldGhlcnMvbGliLmVzbS9pbmRleC5qcz83ZTMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gVG8gbW9kaWZ5IHRoaXMgZmlsZSwgeW91IG11c3QgdXBkYXRlIC4vbWlzYy9hZG1pbi9saWIvY21kcy91cGRhdGUtZXhwb3J0cy5qc1xuaW1wb3J0ICogYXMgZXRoZXJzIGZyb20gXCIuL2V0aGVyc1wiO1xudHJ5IHtcbiAgICBjb25zdCBhbnlHbG9iYWwgPSB3aW5kb3c7XG4gICAgaWYgKGFueUdsb2JhbC5fZXRoZXJzID09IG51bGwpIHtcbiAgICAgICAgYW55R2xvYmFsLl9ldGhlcnMgPSBldGhlcnM7XG4gICAgfVxufVxuY2F0Y2ggKGVycm9yKSB7IH1cbmV4cG9ydCB7IGV0aGVycyB9O1xuZXhwb3J0IHsgU2lnbmVyLCBXYWxsZXQsIFZvaWRTaWduZXIsIGdldERlZmF1bHRQcm92aWRlciwgcHJvdmlkZXJzLCBCYXNlQ29udHJhY3QsIENvbnRyYWN0LCBDb250cmFjdEZhY3RvcnksIEJpZ051bWJlciwgRml4ZWROdW1iZXIsIGNvbnN0YW50cywgZXJyb3JzLCBsb2dnZXIsIHV0aWxzLCB3b3JkbGlzdHMsIFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG52ZXJzaW9uLCBXb3JkbGlzdCB9IGZyb20gXCIuL2V0aGVyc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImV0aGVycyIsImFueUdsb2JhbCIsIndpbmRvdyIsIl9ldGhlcnMiLCJlcnJvciIsIlNpZ25lciIsIldhbGxldCIsIlZvaWRTaWduZXIiLCJnZXREZWZhdWx0UHJvdmlkZXIiLCJwcm92aWRlcnMiLCJCYXNlQ29udHJhY3QiLCJDb250cmFjdCIsIkNvbnRyYWN0RmFjdG9yeSIsIkJpZ051bWJlciIsIkZpeGVkTnVtYmVyIiwiY29uc3RhbnRzIiwiZXJyb3JzIiwibG9nZ2VyIiwidXRpbHMiLCJ3b3JkbGlzdHMiLCJ2ZXJzaW9uIiwiV29yZGxpc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ethers/lib.esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ethers/lib.esm/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/ethers/lib.esm/utils.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiCoder: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_0__.AbiCoder; },\n/* harmony export */   ConstructorFragment: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.ConstructorFragment; },\n/* harmony export */   ErrorFragment: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.ErrorFragment; },\n/* harmony export */   EventFragment: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.EventFragment; },\n/* harmony export */   FormatTypes: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.FormatTypes; },\n/* harmony export */   Fragment: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.Fragment; },\n/* harmony export */   FunctionFragment: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.FunctionFragment; },\n/* harmony export */   HDNode: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.HDNode; },\n/* harmony export */   Indexed: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_10__.Indexed; },\n/* harmony export */   Interface: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_10__.Interface; },\n/* harmony export */   LogDescription: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_10__.LogDescription; },\n/* harmony export */   Logger: function() { return /* reexport safe */ _ethersproject_logger__WEBPACK_IMPORTED_MODULE_3__.Logger; },\n/* harmony export */   ParamType: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__.ParamType; },\n/* harmony export */   RLP: function() { return /* reexport module object */ _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_4__; },\n/* harmony export */   SigningKey: function() { return /* reexport safe */ _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__.SigningKey; },\n/* harmony export */   SupportedAlgorithm: function() { return /* reexport safe */ _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_30__.SupportedAlgorithm; },\n/* harmony export */   TransactionDescription: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_10__.TransactionDescription; },\n/* harmony export */   TransactionTypes: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.TransactionTypes; },\n/* harmony export */   UnicodeNormalizationForm: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.UnicodeNormalizationForm; },\n/* harmony export */   Utf8ErrorFuncs: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.Utf8ErrorFuncs; },\n/* harmony export */   Utf8ErrorReason: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.Utf8ErrorReason; },\n/* harmony export */   _TypedDataEncoder: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_19__.TypedDataEncoder; },\n/* harmony export */   _fetchData: function() { return /* reexport safe */ _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__._fetchData; },\n/* harmony export */   _toEscapedUtf8String: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__._toEscapedUtf8String; },\n/* harmony export */   accessListify: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.accessListify; },\n/* harmony export */   arrayify: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.arrayify; },\n/* harmony export */   base58: function() { return /* reexport safe */ _ethersproject_basex__WEBPACK_IMPORTED_MODULE_11__.Base58; },\n/* harmony export */   base64: function() { return /* reexport module object */ _ethersproject_base64__WEBPACK_IMPORTED_MODULE_12__; },\n/* harmony export */   checkProperties: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.checkProperties; },\n/* harmony export */   checkResultErrors: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_2__.checkResultErrors; },\n/* harmony export */   commify: function() { return /* reexport safe */ _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__.commify; },\n/* harmony export */   computeAddress: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.computeAddress; },\n/* harmony export */   computeHmac: function() { return /* reexport safe */ _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_22__.computeHmac; },\n/* harmony export */   computePublicKey: function() { return /* reexport safe */ _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__.computePublicKey; },\n/* harmony export */   concat: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.concat; },\n/* harmony export */   deepCopy: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.deepCopy; },\n/* harmony export */   defaultAbiCoder: function() { return /* reexport safe */ _ethersproject_abi__WEBPACK_IMPORTED_MODULE_0__.defaultAbiCoder; },\n/* harmony export */   defaultPath: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.defaultPath; },\n/* harmony export */   defineReadOnly: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.defineReadOnly; },\n/* harmony export */   dnsEncode: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_16__.dnsEncode; },\n/* harmony export */   entropyToMnemonic: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.entropyToMnemonic; },\n/* harmony export */   fetchJson: function() { return /* reexport safe */ _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.fetchJson; },\n/* harmony export */   formatBytes32String: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_15__.formatBytes32String; },\n/* harmony export */   formatEther: function() { return /* reexport safe */ _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__.formatEther; },\n/* harmony export */   formatUnits: function() { return /* reexport safe */ _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__.formatUnits; },\n/* harmony export */   getAccountPath: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.getAccountPath; },\n/* harmony export */   getAddress: function() { return /* reexport safe */ _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__.getAddress; },\n/* harmony export */   getContractAddress: function() { return /* reexport safe */ _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__.getContractAddress; },\n/* harmony export */   getCreate2Address: function() { return /* reexport safe */ _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__.getCreate2Address; },\n/* harmony export */   getIcapAddress: function() { return /* reexport safe */ _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__.getIcapAddress; },\n/* harmony export */   getJsonWalletAddress: function() { return /* reexport safe */ _ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_28__.getJsonWalletAddress; },\n/* harmony export */   getStatic: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.getStatic; },\n/* harmony export */   hashMessage: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_17__.hashMessage; },\n/* harmony export */   hexConcat: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexConcat; },\n/* harmony export */   hexDataLength: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexDataLength; },\n/* harmony export */   hexDataSlice: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexDataSlice; },\n/* harmony export */   hexStripZeros: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexStripZeros; },\n/* harmony export */   hexValue: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexValue; },\n/* harmony export */   hexZeroPad: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexZeroPad; },\n/* harmony export */   hexlify: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.hexlify; },\n/* harmony export */   id: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_18__.id; },\n/* harmony export */   isAddress: function() { return /* reexport safe */ _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__.isAddress; },\n/* harmony export */   isBytes: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isBytes; },\n/* harmony export */   isBytesLike: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isBytesLike; },\n/* harmony export */   isHexString: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.isHexString; },\n/* harmony export */   isValidMnemonic: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.isValidMnemonic; },\n/* harmony export */   isValidName: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_16__.isValidName; },\n/* harmony export */   joinSignature: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.joinSignature; },\n/* harmony export */   keccak256: function() { return /* reexport safe */ _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_23__.keccak256; },\n/* harmony export */   mnemonicToEntropy: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.mnemonicToEntropy; },\n/* harmony export */   mnemonicToSeed: function() { return /* reexport safe */ _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__.mnemonicToSeed; },\n/* harmony export */   namehash: function() { return /* reexport safe */ _ethersproject_hash__WEBPACK_IMPORTED_MODULE_16__.namehash; },\n/* harmony export */   nameprep: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_13__.nameprep; },\n/* harmony export */   parseBytes32String: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_15__.parseBytes32String; },\n/* harmony export */   parseEther: function() { return /* reexport safe */ _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__.parseEther; },\n/* harmony export */   parseTransaction: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.parse; },\n/* harmony export */   parseUnits: function() { return /* reexport safe */ _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__.parseUnits; },\n/* harmony export */   poll: function() { return /* reexport safe */ _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__.poll; },\n/* harmony export */   randomBytes: function() { return /* reexport safe */ _ethersproject_random__WEBPACK_IMPORTED_MODULE_24__.randomBytes; },\n/* harmony export */   recoverAddress: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.recoverAddress; },\n/* harmony export */   recoverPublicKey: function() { return /* reexport safe */ _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__.recoverPublicKey; },\n/* harmony export */   resolveProperties: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.resolveProperties; },\n/* harmony export */   ripemd160: function() { return /* reexport safe */ _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_22__.ripemd160; },\n/* harmony export */   serializeTransaction: function() { return /* reexport safe */ _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__.serialize; },\n/* harmony export */   sha256: function() { return /* reexport safe */ _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_22__.sha256; },\n/* harmony export */   sha512: function() { return /* reexport safe */ _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_22__.sha512; },\n/* harmony export */   shallowCopy: function() { return /* reexport safe */ _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__.shallowCopy; },\n/* harmony export */   shuffled: function() { return /* reexport safe */ _ethersproject_random__WEBPACK_IMPORTED_MODULE_25__.shuffled; },\n/* harmony export */   solidityKeccak256: function() { return /* reexport safe */ _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_26__.keccak256; },\n/* harmony export */   solidityPack: function() { return /* reexport safe */ _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_26__.pack; },\n/* harmony export */   soliditySha256: function() { return /* reexport safe */ _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_26__.sha256; },\n/* harmony export */   splitSignature: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.splitSignature; },\n/* harmony export */   stripZeros: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.stripZeros; },\n/* harmony export */   toUtf8Bytes: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.toUtf8Bytes; },\n/* harmony export */   toUtf8CodePoints: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.toUtf8CodePoints; },\n/* harmony export */   toUtf8String: function() { return /* reexport safe */ _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__.toUtf8String; },\n/* harmony export */   verifyMessage: function() { return /* reexport safe */ _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_29__.verifyMessage; },\n/* harmony export */   verifyTypedData: function() { return /* reexport safe */ _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_29__.verifyTypedData; },\n/* harmony export */   zeroPad: function() { return /* reexport safe */ _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__.zeroPad; }\n/* harmony export */ });\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js\");\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/fragments.js\");\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\");\n/* harmony import */ var _ethersproject_abi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ethersproject/abi */ \"(app-pages-browser)/./node_modules/@ethersproject/abi/lib.esm/interface.js\");\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @ethersproject/address */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_base64__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ethersproject/base64 */ \"(app-pages-browser)/./node_modules/@ethersproject/base64/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_basex__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ethersproject/basex */ \"(app-pages-browser)/./node_modules/@ethersproject/basex/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ethersproject/bytes */ \"(app-pages-browser)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/namehash.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/message.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/id.js\");\n/* harmony import */ var _ethersproject_hash__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @ethersproject/hash */ \"(app-pages-browser)/./node_modules/@ethersproject/hash/lib.esm/typed-data.js\");\n/* harmony import */ var _ethersproject_hdnode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ethersproject/hdnode */ \"(app-pages-browser)/./node_modules/@ethersproject/hdnode/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_json_wallets__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @ethersproject/json-wallets */ \"(app-pages-browser)/./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js\");\n/* harmony import */ var _ethersproject_keccak256__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @ethersproject/keccak256 */ \"(app-pages-browser)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/logger */ \"(app-pages-browser)/./node_modules/@ethersproject/logger/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/sha2.js\");\n/* harmony import */ var _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @ethersproject/solidity */ \"(app-pages-browser)/./node_modules/@ethersproject/solidity/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_random__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @ethersproject/random */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/random.js\");\n/* harmony import */ var _ethersproject_random__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @ethersproject/random */ \"(app-pages-browser)/./node_modules/@ethersproject/random/lib.esm/shuffle.js\");\n/* harmony import */ var _ethersproject_properties__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/properties */ \"(app-pages-browser)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_rlp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/rlp */ \"(app-pages-browser)/./node_modules/@ethersproject/rlp/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_signing_key__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ethersproject/signing-key */ \"(app-pages-browser)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/idna.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/utf8.js\");\n/* harmony import */ var _ethersproject_strings__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ethersproject/strings */ \"(app-pages-browser)/./node_modules/@ethersproject/strings/lib.esm/bytes32.js\");\n/* harmony import */ var _ethersproject_transactions__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @ethersproject/transactions */ \"(app-pages-browser)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_units__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @ethersproject/units */ \"(app-pages-browser)/./node_modules/@ethersproject/units/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_wallet__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @ethersproject/wallet */ \"(app-pages-browser)/./node_modules/@ethersproject/wallet/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_web__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/web */ \"(app-pages-browser)/./node_modules/@ethersproject/web/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_sha2__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @ethersproject/sha2 */ \"(app-pages-browser)/./node_modules/@ethersproject/sha2/lib.esm/types.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n////////////////////////\n// Enums\n\n\n////////////////////////\n// Exports\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ethers/lib.esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var hash = exports;\nhash.utils = __webpack_require__(/*! ./hash/utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nhash.common = __webpack_require__(/*! ./hash/common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nhash.sha = __webpack_require__(/*! ./hash/sha */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\");\nhash.ripemd = __webpack_require__(/*! ./hash/ripemd */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\");\nhash.hmac = __webpack_require__(/*! ./hash/hmac */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\");\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DO0FBRVhELEtBQUtFLEtBQUssR0FBR0MsbUJBQU9BLENBQUM7QUFDckJILEtBQUtJLE1BQU0sR0FBR0QsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtLLEdBQUcsR0FBR0YsbUJBQU9BLENBQUM7QUFDbkJILEtBQUtNLE1BQU0sR0FBR0gsbUJBQU9BLENBQUM7QUFDdEJILEtBQUtPLElBQUksR0FBR0osbUJBQU9BLENBQUM7QUFFcEIsMENBQTBDO0FBQzFDSCxLQUFLUSxJQUFJLEdBQUdSLEtBQUtLLEdBQUcsQ0FBQ0csSUFBSTtBQUN6QlIsS0FBS1MsTUFBTSxHQUFHVCxLQUFLSyxHQUFHLENBQUNJLE1BQU07QUFDN0JULEtBQUtVLE1BQU0sR0FBR1YsS0FBS0ssR0FBRyxDQUFDSyxNQUFNO0FBQzdCVixLQUFLVyxNQUFNLEdBQUdYLEtBQUtLLEdBQUcsQ0FBQ00sTUFBTTtBQUM3QlgsS0FBS1ksTUFBTSxHQUFHWixLQUFLSyxHQUFHLENBQUNPLE1BQU07QUFDN0JaLEtBQUthLFNBQVMsR0FBR2IsS0FBS00sTUFBTSxDQUFDTyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzPzE2YTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIl0sIm5hbWVzIjpbImhhc2giLCJleHBvcnRzIiwidXRpbHMiLCJyZXF1aXJlIiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyNTYiLCJzaGEyMjQiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = \"big\";\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n}\n_c = BlockHash;\nexports.BlockHash = BlockHash;\nBlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;\n    else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length;\n    // Enough data, try updating\n    if (this.pending.length >= this._delta8) {\n        msg = this.pending;\n        // Process pending data in blocks\n        var r = msg.length % this._delta8;\n        this.pending = msg.slice(msg.length - r, msg.length);\n        if (this.pending.length === 0) this.pending = null;\n        msg = utils.join32(msg, 0, msg.length - r, this.endian);\n        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);\n    }\n    return this;\n};\nBlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    assert(this.pending === null);\n    return this._digest(enc);\n};\nBlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n    for(var i = 1; i < k; i++)res[i] = 0;\n    // Append length\n    len <<= 3;\n    if (this.endian === \"big\") {\n        for(var t = 8; t < this.padLength; t++)res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len & 0xff;\n    } else {\n        res[i++] = len & 0xff;\n        res[i++] = len >>> 8 & 0xff;\n        res[i++] = len >>> 16 & 0xff;\n        res[i++] = len >>> 24 & 0xff;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        res[i++] = 0;\n        for(t = 8; t < this.padLength; t++)res[i++] = 0;\n    }\n    return res;\n};\nvar _c;\n$RefreshReg$(_c, \"BlockHash\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBRXJCLFNBQVNFO0lBQ1AsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDZixJQUFJLENBQUNDLFlBQVksR0FBRztJQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0QsU0FBUztJQUMzQyxJQUFJLENBQUNFLE9BQU8sR0FBRyxJQUFJLENBQUNELFdBQVcsQ0FBQ0MsT0FBTztJQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0UsWUFBWTtJQUNqRCxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNILFdBQVcsQ0FBQ0csU0FBUyxHQUFHO0lBQzlDLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBRWQsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDTixTQUFTLEdBQUc7SUFDaEMsSUFBSSxDQUFDTyxRQUFRLEdBQUcsSUFBSSxDQUFDUCxTQUFTLEdBQUc7QUFDbkM7S0FYU0g7QUFZVFcsaUJBQWlCLEdBQUdYO0FBRXBCQSxVQUFVWSxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDbkQsK0RBQStEO0lBQy9ERCxNQUFNakIsTUFBTW1CLE9BQU8sQ0FBQ0YsS0FBS0M7SUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQ2QsT0FBTyxFQUNmLElBQUksQ0FBQ0EsT0FBTyxHQUFHYTtTQUVmLElBQUksQ0FBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQ0EsT0FBTyxDQUFDZ0IsTUFBTSxDQUFDSDtJQUNyQyxJQUFJLENBQUNaLFlBQVksSUFBSVksSUFBSUksTUFBTTtJQUUvQiw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENB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azovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanM/ZDM2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImFzc2VydCIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJibG9ja1NpemUiLCJjb25zdHJ1Y3RvciIsIm91dFNpemUiLCJobWFjU3RyZW5ndGgiLCJwYWRMZW5ndGgiLCJlbmRpYW4iLCJfZGVsdGE4IiwiX2RlbHRhMzIiLCJleHBvcnRzIiwicHJvdG90eXBlIiwidXBkYXRlIiwibXNnIiwiZW5jIiwidG9BcnJheSIsImNvbmNhdCIsImxlbmd0aCIsInIiLCJzbGljZSIsImpvaW4zMiIsImkiLCJfdXBkYXRlIiwiZGlnZXN0IiwiX3BhZCIsIl9kaWdlc3QiLCJwYWQiLCJsZW4iLCJieXRlcyIsImsiLCJyZXMiLCJBcnJheSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nfunction Hmac(hash, key, enc) {\n    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n    this._init(utils.toArray(key, enc));\n}\n_c = Hmac;\nmodule.exports = Hmac;\nHmac.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    assert(key.length <= this.blockSize);\n    // Add padding to key\n    for(var i = key.length; i < this.blockSize; i++)key.push(0);\n    for(i = 0; i < key.length; i++)key[i] ^= 0x36;\n    this.inner = new this.Hash().update(key);\n    // 0x36 ^ 0x5c = 0x6a\n    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;\n    this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n};\nHmac.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n};\nvar _c;\n$RefreshReg$(_c, \"Hmac\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRSxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUMxQixJQUFJLENBQUUsS0FBSSxZQUFZSCxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUEsS0FBS0MsTUFBTUMsS0FBS0M7SUFDN0IsSUFBSSxDQUFDQyxJQUFJLEdBQUdIO0lBQ1osSUFBSSxDQUFDSSxTQUFTLEdBQUdKLEtBQUtJLFNBQVMsR0FBRztJQUNsQyxJQUFJLENBQUNDLE9BQU8sR0FBR0wsS0FBS0ssT0FBTyxHQUFHO0lBQzlCLElBQUksQ0FBQ0MsS0FBSyxHQUFHO0lBQ2IsSUFBSSxDQUFDQyxLQUFLLEdBQUc7SUFFYixJQUFJLENBQUNDLEtBQUssQ0FBQ1osTUFBTWEsT0FBTyxDQUFDUixLQUFLQztBQUNoQztLQVZTSDtBQVdUVyxPQUFPQyxPQUFPLEdBQUdaO0FBRWpCQSxLQUFLYSxTQUFTLENBQUNKLEtBQUssR0FBRyxTQUFTSyxLQUFLWixHQUFHO0lBQ3RDLHlCQUF5QjtJQUN6QixJQUFJQSxJQUFJYSxNQUFNLEdBQUcsSUFBSSxDQUFDVixTQUFTLEVBQzdCSCxNQUFNLElBQUksSUFBSSxDQUFDRSxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2QsS0FBS2UsTUFBTTtJQUMxQ2xCLE9BQU9HLElBQUlhLE1BQU0sSUFBSSxJQUFJLENBQUNWLFNBQVM7SUFFbkMscUJBQXFCO0lBQ3JCLElBQUssSUFBSWEsSUFBSWhCLElBQUlhLE1BQU0sRUFBRUcsSUFBSSxJQUFJLENBQUNiLFNBQVMsRUFBRWEsSUFDM0NoQixJQUFJaUIsSUFBSSxDQUFDO0lBRVgsSUFBS0QsSUFBSSxHQUFHQSxJQUFJaEIsSUFBSWEsTUFBTSxFQUFFRyxJQUMxQmhCLEdBQUcsQ0FBQ2dCLEVBQUUsSUFBSTtJQUNaLElBQUksQ0FBQ1gsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDSCxJQUFJLEdBQUdZLE1BQU0sQ0FBQ2Q7SUFFcEMscUJBQXFCO0lBQ3JCLElBQUtnQixJQUFJLEdBQUdBLElBQUloQixJQUFJYSxNQUFNLEVBQUVHLElBQzFCaEIsR0FBRyxDQUFDZ0IsRUFBRSxJQUFJO0lBQ1osSUFBSSxDQUFDVixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUNKLElBQUksR0FBR1ksTUFBTSxDQUFDZDtBQUN0QztBQUVBRixLQUFLYSxTQUFTLENBQUNHLE1BQU0sR0FBRyxTQUFTQSxPQUFPSSxHQUFHLEVBQUVqQixHQUFHO0lBQzlDLElBQUksQ0FBQ0ksS0FBSyxDQUFDUyxNQUFNLENBQUNJLEtBQUtqQjtJQUN2QixPQUFPLElBQUk7QUFDYjtBQUVBSCxLQUFLYSxTQUFTLENBQUNJLE1BQU0sR0FBRyxTQUFTQSxPQUFPZCxHQUFHO0lBQ3pDLElBQUksQ0FBQ0ssS0FBSyxDQUFDUSxNQUFNLENBQUMsSUFBSSxDQUFDVCxLQUFLLENBQUNVLE1BQU07SUFDbkMsT0FBTyxJQUFJLENBQUNULEtBQUssQ0FBQ1MsTUFBTSxDQUFDZDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzPzg5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJhc3NlcnQiLCJIbWFjIiwiaGFzaCIsImtleSIsImVuYyIsIkhhc2giLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaW5uZXIiLCJvdXRlciIsIl9pbml0IiwidG9BcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJpbml0IiwibGVuZ3RoIiwidXBkYXRlIiwiZGlnZXN0IiwiaSIsInB1c2giLCJtc2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/hmac.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n    if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.endian = \"little\";\n}\n_c = RIPEMD160;\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n    for(var j = 0; j < 80; j++){\n        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n        A = E;\n        E = D;\n        D = rotl32(C, 10);\n        C = B;\n        B = T;\n        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n        Ah = Eh;\n        Eh = Dh;\n        Dh = rotl32(Ch, 10);\n        Ch = Bh;\n        Bh = T;\n    }\n    T = sum32_3(this.h[1], C, Dh);\n    this.h[1] = sum32_3(this.h[2], D, Eh);\n    this.h[2] = sum32_3(this.h[3], E, Ah);\n    this.h[3] = sum32_3(this.h[4], A, Bh);\n    this.h[4] = sum32_3(this.h[0], B, Ch);\n    this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"little\");\n    else return utils.split32(this.h, \"little\");\n};\nfunction f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;\n    else if (j <= 31) return x & y | ~x & z;\n    else if (j <= 47) return (x | ~y) ^ z;\n    else if (j <= 63) return x & z | y & ~z;\n    else return x ^ (y | ~z);\n}\nfunction K(j) {\n    if (j <= 15) return 0x00000000;\n    else if (j <= 31) return 0x5a827999;\n    else if (j <= 47) return 0x6ed9eba1;\n    else if (j <= 63) return 0x8f1bbcdc;\n    else return 0xa953fd4e;\n}\n_c1 = K;\nfunction Kh(j) {\n    if (j <= 15) return 0x50a28be6;\n    else if (j <= 31) return 0x5c4dd124;\n    else if (j <= 47) return 0x6d703ef3;\n    else if (j <= 63) return 0x7a6d76e9;\n    else return 0x00000000;\n}\n_c2 = Kh;\nvar r = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n];\nvar rh = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n];\nvar s = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n];\nvar sh = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n];\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"RIPEMD160\");\n$RefreshReg$(_c1, \"K\");\n$RefreshReg$(_c2, \"Kh\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/ripemd.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.sha1 = __webpack_require__(/*! ./sha/1 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\");\nexports.sha224 = __webpack_require__(/*! ./sha/224 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\");\nexports.sha256 = __webpack_require__(/*! ./sha/256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nexports.sha384 = __webpack_require__(/*! ./sha/384 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\");\nexports.sha512 = __webpack_require__(/*! ./sha/512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxpSEFBdUI7QUFDdkJBLHVIQUF5QjtBQUN6QkEsdUhBQXlCO0FBQ3pCQSx1SEFBeUI7QUFDekJBLHVIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanM/MWZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInNoYTEiLCJyZXF1aXJlIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\nvar sha1_K = [\n    0x5A827999,\n    0x6ED9EBA1,\n    0x8F1BBCDC,\n    0xCA62C1D6\n];\nfunction SHA1() {\n    if (!(this instanceof SHA1)) return new SHA1();\n    BlockHash.call(this);\n    this.h = [\n        0x67452301,\n        0xefcdab89,\n        0x98badcfe,\n        0x10325476,\n        0xc3d2e1f0\n    ];\n    this.W = new Array(80);\n}\n_c = SHA1;\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    for(i = 0; i < W.length; i++){\n        var s = ~~(i / 20);\n        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n        e = d;\n        d = c;\n        c = rotl32(b, 30);\n        b = a;\n        a = t;\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA1\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUM7QUFFeEIsSUFBSUcsU0FBU0osTUFBTUksTUFBTTtBQUN6QixJQUFJQyxRQUFRTCxNQUFNSyxLQUFLO0FBQ3ZCLElBQUlDLFVBQVVOLE1BQU1NLE9BQU87QUFDM0IsSUFBSUMsT0FBT0osVUFBVUksSUFBSTtBQUN6QixJQUFJQyxZQUFZTixPQUFPTSxTQUFTO0FBRWhDLElBQUlDLFNBQVM7SUFDWDtJQUFZO0lBQ1o7SUFBWTtDQUNiO0FBRUQsU0FBU0M7SUFDUCxJQUFJLENBQUUsS0FBSSxZQUFZQSxJQUFHLEdBQ3ZCLE9BQU8sSUFBSUE7SUFFYkYsVUFBVUcsSUFBSSxDQUFDLElBQUk7SUFDbkIsSUFBSSxDQUFDQyxDQUFDLEdBQUc7UUFDUDtRQUFZO1FBQVk7UUFDeEI7UUFBWTtLQUFZO0lBQzFCLElBQUksQ0FBQ0MsQ0FBQyxHQUFHLElBQUlDLE1BQU07QUFDckI7S0FUU0o7QUFXVFYsTUFBTWUsUUFBUSxDQUFDTCxNQUFNRjtBQUNyQlEsT0FBT0MsT0FBTyxHQUFHUDtBQUVqQkEsS0FBS1EsU0FBUyxHQUFHO0FBQ2pCUixLQUFLUyxPQUFPLEdBQUc7QUFDZlQsS0FBS1UsWUFBWSxHQUFHO0FBQ3BCVixLQUFLVyxTQUFTLEdBQUc7QUFFakJYLEtBQUtZLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHLFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsS0FBSztJQUNsRCxJQUFJWixJQUFJLElBQUksQ0FBQ0EsQ0FBQztJQUVkLElBQUssSUFBSWEsSUFBSSxHQUFHQSxJQUFJLElBQUlBLElBQ3RCYixDQUFDLENBQUNhLEVBQUUsR0FBR0YsR0FBRyxDQUFDQyxRQUFRQyxFQUFFO0lBRXZCLE1BQU1BLElBQUliLEVBQUVjLE1BQU0sRUFBRUQsSUFDbEJiLENBQUMsQ0FBQ2EsRUFBRSxHQUFHdEIsT0FBT1MsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEVBQUUsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsR0FBR2IsQ0FBQyxDQUFDYSxJQUFJLEdBQUcsRUFBRTtJQUU3RCxJQUFJRSxJQUFJLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlpQixJQUFJLElBQUksQ0FBQ2pCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlrQixJQUFJLElBQUksQ0FBQ2xCLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUltQixJQUFJLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFO0lBQ2pCLElBQUlvQixJQUFJLElBQUksQ0FBQ3BCLENBQUMsQ0FBQyxFQUFFO0lBRWpCLElBQUtjLElBQUksR0FBR0EsSUFBSWIsRUFBRWMsTUFBTSxFQUFFRCxJQUFLO1FBQzdCLElBQUlPLElBQUksQ0FBQyxDQUFFUCxDQUFBQSxJQUFJLEVBQUM7UUFDaEIsSUFBSVEsSUFBSTVCLFFBQVFGLE9BQU93QixHQUFHLElBQUlyQixLQUFLMEIsR0FBR0osR0FBR0MsR0FBR0MsSUFBSUMsR0FBR25CLENBQUMsQ0FBQ2EsRUFBRSxFQUFFakIsTUFBTSxDQUFDd0IsRUFBRTtRQUNsRUQsSUFBSUQ7UUFDSkEsSUFBSUQ7UUFDSkEsSUFBSTFCLE9BQU95QixHQUFHO1FBQ2RBLElBQUlEO1FBQ0pBLElBQUlNO0lBQ047SUFFQSxJQUFJLENBQUN0QixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRWdCO0lBQzdCLElBQUksQ0FBQ2hCLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFaUI7SUFDN0IsSUFBSSxDQUFDakIsQ0FBQyxDQUFDLEVBQUUsR0FBR1AsTUFBTSxJQUFJLENBQUNPLENBQUMsQ0FBQyxFQUFFLEVBQUVrQjtJQUM3QixJQUFJLENBQUNsQixDQUFDLENBQUMsRUFBRSxHQUFHUCxNQUFNLElBQUksQ0FBQ08sQ0FBQyxDQUFDLEVBQUUsRUFBRW1CO0lBQzdCLElBQUksQ0FBQ25CLENBQUMsQ0FBQyxFQUFFLEdBQUdQLE1BQU0sSUFBSSxDQUFDTyxDQUFDLENBQUMsRUFBRSxFQUFFb0I7QUFDL0I7QUFFQXRCLEtBQUtZLFNBQVMsQ0FBQ2EsT0FBTyxHQUFHLFNBQVNDLE9BQU9DLEdBQUc7SUFDMUMsSUFBSUEsUUFBUSxPQUNWLE9BQU9yQyxNQUFNc0MsT0FBTyxDQUFDLElBQUksQ0FBQzFCLENBQUMsRUFBRTtTQUU3QixPQUFPWixNQUFNdUMsT0FBTyxDQUFDLElBQUksQ0FBQzNCLENBQUMsRUFBRTtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcz8zOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJjb21tb24iLCJzaGFDb21tb24iLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzUiLCJmdF8xIiwiQmxvY2tIYXNoIiwic2hhMV9LIiwiU0hBMSIsImNhbGwiLCJoIiwiVyIsIkFycmF5IiwiaW5oZXJpdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmxvY2tTaXplIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsInByb3RvdHlwZSIsIl91cGRhdGUiLCJtc2ciLCJzdGFydCIsImkiLCJsZW5ndGgiLCJhIiwiYiIsImMiLCJkIiwiZSIsInMiLCJ0IiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzcGxpdDMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA256 = __webpack_require__(/*! ./256 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\");\nfunction SHA224() {\n    if (!(this instanceof SHA224)) return new SHA224();\n    SHA256.call(this);\n    this.h = [\n        0xc1059ed8,\n        0x367cd507,\n        0x3070dd17,\n        0xf70e5939,\n        0xffc00b31,\n        0x68581511,\n        0x64f98fa7,\n        0xbefa4fa4\n    ];\n}\n_c = SHA224;\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n    // Just truncate output\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 7), \"big\");\n    else return utils.split32(this.h.slice(0, 7), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA224\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFBWTtRQUFZO1FBQ3BDO1FBQVk7UUFBWTtRQUFZO0tBQVk7QUFDcEQ7S0FSU0Y7QUFTVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLHVCQUF1QjtJQUN2QixJQUFJQSxRQUFRLE9BQ1YsT0FBT2hCLE1BQU1pQixPQUFPLENBQUMsSUFBSSxDQUFDWixDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7U0FFekMsT0FBT2xCLE1BQU1tQixPQUFPLENBQUMsSUFBSSxDQUFDZCxDQUFDLENBQUNhLEtBQUssQ0FBQyxHQUFHLElBQUk7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcz8wNjA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBMjU2IiwiU0hBMjI0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/224.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash = common.BlockHash;\nvar sha256_K = [\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n];\nfunction SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xbb67ae85,\n        0x3c6ef372,\n        0xa54ff53a,\n        0x510e527f,\n        0x9b05688c,\n        0x1f83d9ab,\n        0x5be0cd19\n    ];\n    this.k = sha256_K;\n    this.W = new Array(64);\n}\n_c = SHA256;\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\nSHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n    for(var i = 0; i < 16; i++)W[i] = msg[start + i];\n    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    assert(this.k.length === W.length);\n    for(i = 0; i < W.length; i++){\n        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n        var T2 = sum32(s0_256(a), maj32(a, b, c));\n        h = g;\n        g = f;\n        f = e;\n        e = sum32(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = sum32(T1, T2);\n    }\n    this.h[0] = sum32(this.h[0], a);\n    this.h[1] = sum32(this.h[1], b);\n    this.h[2] = sum32(this.h[2], c);\n    this.h[3] = sum32(this.h[3], d);\n    this.h[4] = sum32(this.h[4], e);\n    this.h[5] = sum32(this.h[5], f);\n    this.h[6] = sum32(this.h[6], g);\n    this.h[7] = sum32(this.h[7], h);\n};\nSHA256.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA256\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA512 = __webpack_require__(/*! ./512 */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\");\nfunction SHA384() {\n    if (!(this instanceof SHA384)) return new SHA384();\n    SHA512.call(this);\n    this.h = [\n        0xcbbb9d5d,\n        0xc1059ed8,\n        0x629a292a,\n        0x367cd507,\n        0x9159015a,\n        0x3070dd17,\n        0x152fecd8,\n        0xf70e5939,\n        0x67332667,\n        0xffc00b31,\n        0x8eb44a87,\n        0x68581511,\n        0xdb0c2e0d,\n        0x64f98fa7,\n        0x47b5481d,\n        0xbefa4fa4\n    ];\n}\n_c = SHA384;\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h.slice(0, 12), \"big\");\n    else return utils.split32(this.h.slice(0, 12), \"big\");\n};\nvar _c;\n$RefreshReg$(_c, \"SHA384\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixTQUFTRTtJQUNQLElBQUksQ0FBRSxLQUFJLFlBQVlBLE1BQUssR0FDekIsT0FBTyxJQUFJQTtJQUViRCxPQUFPRSxJQUFJLENBQUMsSUFBSTtJQUNoQixJQUFJLENBQUNDLENBQUMsR0FBRztRQUNQO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO1FBQ1o7UUFBWTtRQUNaO1FBQVk7UUFDWjtRQUFZO0tBQVk7QUFDNUI7S0FkU0Y7QUFlVEgsTUFBTU0sUUFBUSxDQUFDSCxRQUFRRDtBQUN2QkssT0FBT0MsT0FBTyxHQUFHTDtBQUVqQkEsT0FBT00sU0FBUyxHQUFHO0FBQ25CTixPQUFPTyxPQUFPLEdBQUc7QUFDakJQLE9BQU9RLFlBQVksR0FBRztBQUN0QlIsT0FBT1MsU0FBUyxHQUFHO0FBRW5CVCxPQUFPVSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxPQUFPQyxHQUFHO0lBQzVDLElBQUlBLFFBQVEsT0FDVixPQUFPaEIsTUFBTWlCLE9BQU8sQ0FBQyxJQUFJLENBQUNaLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztTQUUxQyxPQUFPbEIsTUFBTW1CLE9BQU8sQ0FBQyxJQUFJLENBQUNkLENBQUMsQ0FBQ2EsS0FBSyxDQUFDLEdBQUcsS0FBSztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzPzMwZDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiU0hBNTEyIiwiU0hBMzg0IiwiY2FsbCIsImgiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwicHJvdG90eXBlIiwiX2RpZ2VzdCIsImRpZ2VzdCIsImVuYyIsInRvSGV4MzIiLCJzbGljZSIsInNwbGl0MzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/384.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\nvar BlockHash = common.BlockHash;\nvar sha512_K = [\n    0x428a2f98,\n    0xd728ae22,\n    0x71374491,\n    0x23ef65cd,\n    0xb5c0fbcf,\n    0xec4d3b2f,\n    0xe9b5dba5,\n    0x8189dbbc,\n    0x3956c25b,\n    0xf348b538,\n    0x59f111f1,\n    0xb605d019,\n    0x923f82a4,\n    0xaf194f9b,\n    0xab1c5ed5,\n    0xda6d8118,\n    0xd807aa98,\n    0xa3030242,\n    0x12835b01,\n    0x45706fbe,\n    0x243185be,\n    0x4ee4b28c,\n    0x550c7dc3,\n    0xd5ffb4e2,\n    0x72be5d74,\n    0xf27b896f,\n    0x80deb1fe,\n    0x3b1696b1,\n    0x9bdc06a7,\n    0x25c71235,\n    0xc19bf174,\n    0xcf692694,\n    0xe49b69c1,\n    0x9ef14ad2,\n    0xefbe4786,\n    0x384f25e3,\n    0x0fc19dc6,\n    0x8b8cd5b5,\n    0x240ca1cc,\n    0x77ac9c65,\n    0x2de92c6f,\n    0x592b0275,\n    0x4a7484aa,\n    0x6ea6e483,\n    0x5cb0a9dc,\n    0xbd41fbd4,\n    0x76f988da,\n    0x831153b5,\n    0x983e5152,\n    0xee66dfab,\n    0xa831c66d,\n    0x2db43210,\n    0xb00327c8,\n    0x98fb213f,\n    0xbf597fc7,\n    0xbeef0ee4,\n    0xc6e00bf3,\n    0x3da88fc2,\n    0xd5a79147,\n    0x930aa725,\n    0x06ca6351,\n    0xe003826f,\n    0x14292967,\n    0x0a0e6e70,\n    0x27b70a85,\n    0x46d22ffc,\n    0x2e1b2138,\n    0x5c26c926,\n    0x4d2c6dfc,\n    0x5ac42aed,\n    0x53380d13,\n    0x9d95b3df,\n    0x650a7354,\n    0x8baf63de,\n    0x766a0abb,\n    0x3c77b2a8,\n    0x81c2c92e,\n    0x47edaee6,\n    0x92722c85,\n    0x1482353b,\n    0xa2bfe8a1,\n    0x4cf10364,\n    0xa81a664b,\n    0xbc423001,\n    0xc24b8b70,\n    0xd0f89791,\n    0xc76c51a3,\n    0x0654be30,\n    0xd192e819,\n    0xd6ef5218,\n    0xd6990624,\n    0x5565a910,\n    0xf40e3585,\n    0x5771202a,\n    0x106aa070,\n    0x32bbd1b8,\n    0x19a4c116,\n    0xb8d2d0c8,\n    0x1e376c08,\n    0x5141ab53,\n    0x2748774c,\n    0xdf8eeb99,\n    0x34b0bcb5,\n    0xe19b48a8,\n    0x391c0cb3,\n    0xc5c95a63,\n    0x4ed8aa4a,\n    0xe3418acb,\n    0x5b9cca4f,\n    0x7763e373,\n    0x682e6ff3,\n    0xd6b2b8a3,\n    0x748f82ee,\n    0x5defb2fc,\n    0x78a5636f,\n    0x43172f60,\n    0x84c87814,\n    0xa1f0ab72,\n    0x8cc70208,\n    0x1a6439ec,\n    0x90befffa,\n    0x23631e28,\n    0xa4506ceb,\n    0xde82bde9,\n    0xbef9a3f7,\n    0xb2c67915,\n    0xc67178f2,\n    0xe372532b,\n    0xca273ece,\n    0xea26619c,\n    0xd186b8c7,\n    0x21c0c207,\n    0xeada7dd6,\n    0xcde0eb1e,\n    0xf57d4f7f,\n    0xee6ed178,\n    0x06f067aa,\n    0x72176fba,\n    0x0a637dc5,\n    0xa2c898a6,\n    0x113f9804,\n    0xbef90dae,\n    0x1b710b35,\n    0x131c471b,\n    0x28db77f5,\n    0x23047d84,\n    0x32caab7b,\n    0x40c72493,\n    0x3c9ebe0a,\n    0x15c9bebc,\n    0x431d67c4,\n    0x9c100d4c,\n    0x4cc5d4be,\n    0xcb3e42b6,\n    0x597f299c,\n    0xfc657e2a,\n    0x5fcb6fab,\n    0x3ad6faec,\n    0x6c44198c,\n    0x4a475817\n];\nfunction SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash.call(this);\n    this.h = [\n        0x6a09e667,\n        0xf3bcc908,\n        0xbb67ae85,\n        0x84caa73b,\n        0x3c6ef372,\n        0xfe94f82b,\n        0xa54ff53a,\n        0x5f1d36f1,\n        0x510e527f,\n        0xade682d1,\n        0x9b05688c,\n        0x2b3e6c1f,\n        0x1f83d9ab,\n        0xfb41bd6b,\n        0x5be0cd19,\n        0x137e2179\n    ];\n    this.k = sha512_K;\n    this.W = new Array(160);\n}\n_c = SHA512;\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W;\n    // 32 x 32bit words\n    for(var i = 0; i < 32; i++)W[i] = msg[start + i];\n    for(; i < W.length; i += 2){\n        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n        var c1_hi = W[i - 14]; // i - 7\n        var c1_lo = W[i - 13];\n        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n        var c3_hi = W[i - 32]; // i - 16\n        var c3_lo = W[i - 31];\n        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n};\nSHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    assert(this.k.length === W.length);\n    for(var i = 0; i < W.length; i += 2){\n        var c0_hi = hh;\n        var c0_lo = hl;\n        var c1_hi = s1_512_hi(eh, el);\n        var c1_lo = s1_512_lo(eh, el);\n        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n        var c3_hi = this.k[i];\n        var c3_lo = this.k[i + 1];\n        var c4_hi = W[i];\n        var c4_lo = W[i + 1];\n        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n        c0_hi = s0_512_hi(ah, al);\n        c0_lo = s0_512_lo(ah, al);\n        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n        hh = gh;\n        hl = gl;\n        gh = fh;\n        gl = fl;\n        fh = eh;\n        fl = el;\n        eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n        el = sum64_lo(dl, dl, T1_hi, T1_lo);\n        dh = ch;\n        dl = cl;\n        ch = bh;\n        cl = bl;\n        bh = ah;\n        bl = al;\n        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n    sum64(this.h, 0, ah, al);\n    sum64(this.h, 2, bh, bl);\n    sum64(this.h, 4, ch, cl);\n    sum64(this.h, 6, dh, dl);\n    sum64(this.h, 8, eh, el);\n    sum64(this.h, 10, fh, fl);\n    sum64(this.h, 12, gh, gl);\n    sum64(this.h, 14, hh, hl);\n};\nSHA512.prototype._digest = function digest(enc) {\n    if (enc === \"hex\") return utils.toHex32(this.h, \"big\");\n    else return utils.split32(this.h, \"big\");\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 28);\n    var c1_hi = rotr64_hi(xl, xh, 2); // 34\n    var c2_hi = rotr64_hi(xl, xh, 7); // 39\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 28);\n    var c1_lo = rotr64_lo(xl, xh, 2); // 34\n    var c2_lo = rotr64_lo(xl, xh, 7); // 39\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 14);\n    var c1_hi = rotr64_hi(xh, xl, 18);\n    var c2_hi = rotr64_hi(xl, xh, 9); // 41\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 14);\n    var c1_lo = rotr64_lo(xh, xl, 18);\n    var c2_lo = rotr64_lo(xl, xh, 9); // 41\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 1);\n    var c1_hi = rotr64_hi(xh, xl, 8);\n    var c2_hi = shr64_hi(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 1);\n    var c1_lo = rotr64_lo(xh, xl, 8);\n    var c2_lo = shr64_lo(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi(xh, xl, 19);\n    var c1_hi = rotr64_hi(xl, xh, 29); // 61\n    var c2_hi = shr64_hi(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nfunction g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo(xh, xl, 19);\n    var c1_lo = rotr64_lo(xl, xh, 29); // 61\n    var c2_lo = shr64_lo(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n}\nvar _c;\n$RefreshReg$(_c, \"SHA512\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar utils = __webpack_require__(/*! ../utils */ \"(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\");\nvar rotr32 = utils.rotr32;\nfunction ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\nfunction ch32(x, y, z) {\n    return x & y ^ ~x & z;\n}\nexports.ch32 = ch32;\nfunction maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n}\nexports.maj32 = maj32;\nfunction p32(x, y, z) {\n    return x ^ y ^ z;\n}\nexports.p32 = p32;\nfunction s0_256(x) {\n    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\nfunction s1_256(x) {\n    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\nfunction g0_256(x) {\n    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\nexports.g0_256 = g0_256;\nfunction g1_256(x) {\n    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\nexports.g1_256 = g1_256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxTQUFTRixNQUFNRSxNQUFNO0FBRXpCLFNBQVNDLEtBQUtDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDdEIsSUFBSUgsTUFBTSxHQUNSLE9BQU9JLEtBQUtILEdBQUdDLEdBQUdDO0lBQ3BCLElBQUlILE1BQU0sS0FBS0EsTUFBTSxHQUNuQixPQUFPSyxJQUFJSixHQUFHQyxHQUFHQztJQUNuQixJQUFJSCxNQUFNLEdBQ1IsT0FBT00sTUFBTUwsR0FBR0MsR0FBR0M7QUFDdkI7QUFDQUksWUFBWSxHQUFHUjtBQUVmLFNBQVNLLEtBQUtILENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ25CLE9BQU8sSUFBS0QsSUFBTSxDQUFFRCxJQUFLRTtBQUMzQjtBQUNBSSxZQUFZLEdBQUdIO0FBRWYsU0FBU0UsTUFBTUwsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7SUFDcEIsT0FBTyxJQUFLRCxJQUFNRCxJQUFJRSxJQUFNRCxJQUFJQztBQUNsQztBQUNBSSxhQUFhLEdBQUdEO0FBRWhCLFNBQVNELElBQUlKLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ2xCLE9BQU9GLElBQUlDLElBQUlDO0FBQ2pCO0FBQ0FJLFdBQVcsR0FBR0Y7QUFFZCxTQUFTRyxPQUFPUCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHQztBQUVqQixTQUFTQyxPQUFPUixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU1ILE9BQU9HLEdBQUc7QUFDbEQ7QUFDQU0sY0FBYyxHQUFHRTtBQUVqQixTQUFTQyxPQUFPVCxDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxLQUFLSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDL0M7QUFDQU0sY0FBYyxHQUFHRztBQUVqQixTQUFTQyxPQUFPVixDQUFDO0lBQ2YsT0FBT0gsT0FBT0csR0FBRyxNQUFNSCxPQUFPRyxHQUFHLE1BQU9BLE1BQU07QUFDaEQ7QUFDQU0sY0FBYyxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzP2IyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwicm90cjMyIiwiZnRfMSIsInMiLCJ4IiwieSIsInoiLCJjaDMyIiwicDMyIiwibWFqMzIiLCJleHBvcnRzIiwiczBfMjU2IiwiczFfMjU2IiwiZzBfMjU2IiwiZzFfMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/sha/common.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"(app-pages-browser)/./node_modules/minimalistic-assert/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"(app-pages-browser)/./node_modules/inherits/inherits_browser.js\");\nexports.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n        return false;\n    }\n    if (i < 0 || i + 1 >= msg.length) {\n        return false;\n    }\n    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n    if (typeof msg === \"string\") {\n        if (!enc) {\n            // Inspired by stringToUtf8ByteArray() in closure-library by Google\n            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n            // Apache License 2.0\n            // https://github.com/google/closure-library/blob/master/LICENSE\n            var p = 0;\n            for(var i = 0; i < msg.length; i++){\n                var c = msg.charCodeAt(i);\n                if (c < 128) {\n                    res[p++] = c;\n                } else if (c < 2048) {\n                    res[p++] = c >> 6 | 192;\n                    res[p++] = c & 63 | 128;\n                } else if (isSurrogatePair(msg, i)) {\n                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n                    res[p++] = c >> 18 | 240;\n                    res[p++] = c >> 12 & 63 | 128;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                } else {\n                    res[p++] = c >> 12 | 224;\n                    res[p++] = c >> 6 & 63 | 128;\n                    res[p++] = c & 63 | 128;\n                }\n            }\n        } else if (enc === \"hex\") {\n            msg = msg.replace(/[^a-z0-9]+/ig, \"\");\n            if (msg.length % 2 !== 0) msg = \"0\" + msg;\n            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));\n        }\n    } else {\n        for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;\n    }\n    return res;\n}\nexports.toArray = toArray;\nfunction toHex(msg) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));\n    return res;\n}\nexports.toHex = toHex;\nfunction htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n}\nexports.htonl = htonl;\nfunction toHex32(msg, endian) {\n    var res = \"\";\n    for(var i = 0; i < msg.length; i++){\n        var w = msg[i];\n        if (endian === \"little\") w = htonl(w);\n        res += zero8(w.toString(16));\n    }\n    return res;\n}\nexports.toHex32 = toHex32;\nfunction zero2(word) {\n    if (word.length === 1) return \"0\" + word;\n    else return word;\n}\nexports.zero2 = zero2;\nfunction zero8(word) {\n    if (word.length === 7) return \"0\" + word;\n    else if (word.length === 6) return \"00\" + word;\n    else if (word.length === 5) return \"000\" + word;\n    else if (word.length === 4) return \"0000\" + word;\n    else if (word.length === 3) return \"00000\" + word;\n    else if (word.length === 2) return \"000000\" + word;\n    else if (word.length === 1) return \"0000000\" + word;\n    else return word;\n}\nexports.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n    var len = end - start;\n    assert(len % 4 === 0);\n    var res = new Array(len / 4);\n    for(var i = 0, k = start; i < res.length; i++, k += 4){\n        var w;\n        if (endian === \"big\") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];\n        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n        res[i] = w >>> 0;\n    }\n    return res;\n}\nexports.join32 = join32;\nfunction split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n    for(var i = 0, k = 0; i < msg.length; i++, k += 4){\n        var m = msg[i];\n        if (endian === \"big\") {\n            res[k] = m >>> 24;\n            res[k + 1] = m >>> 16 & 0xff;\n            res[k + 2] = m >>> 8 & 0xff;\n            res[k + 3] = m & 0xff;\n        } else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = m >>> 16 & 0xff;\n            res[k + 1] = m >>> 8 & 0xff;\n            res[k] = m & 0xff;\n        }\n    }\n    return res;\n}\nexports.split32 = split32;\nfunction rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n}\nexports.rotr32 = rotr32;\nfunction rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n}\nexports.rotl32 = rotl32;\nfunction sum32(a, b) {\n    return a + b >>> 0;\n}\nexports.sum32 = sum32;\nfunction sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n}\nexports.sum32_3 = sum32_3;\nfunction sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n}\nexports.sum32_4 = sum32_4;\nfunction sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n}\nexports.sum32_5 = sum32_5;\nfunction sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\nfunction sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\nfunction sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\nfunction rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\nfunction rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\nfunction shr64_hi(ah, al, num) {\n    return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\nfunction shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hash.js/lib/hash/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (typeof Object.create === \"function\") {\n    // implementation from standard node.js 'util' module\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            ctor.prototype = Object.create(superCtor.prototype, {\n                constructor: {\n                    value: ctor,\n                    enumerable: false,\n                    writable: true,\n                    configurable: true\n                }\n            });\n        }\n    };\n} else {\n    // old school shim for old browsers\n    module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n            ctor.super_ = superCtor;\n            var TempCtor = function() {};\n            TempCtor.prototype = superCtor.prototype;\n            ctor.prototype = new TempCtor();\n            ctor.prototype.constructor = ctor;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLE9BQU9BLE9BQU9DLE1BQU0sS0FBSyxZQUFZO0lBQ3ZDLHFEQUFxRDtJQUNyREMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFNBQVNDLElBQUksRUFBRUMsU0FBUztRQUNoRCxJQUFJQSxXQUFXO1lBQ2JELEtBQUtFLE1BQU0sR0FBR0Q7WUFDZEQsS0FBS0csU0FBUyxHQUFHUixPQUFPQyxNQUFNLENBQUNLLFVBQVVFLFNBQVMsRUFBRTtnQkFDbERDLGFBQWE7b0JBQ1hDLE9BQU9MO29CQUNQTSxZQUFZO29CQUNaQyxVQUFVO29CQUNWQyxjQUFjO2dCQUNoQjtZQUNGO1FBQ0Y7SUFDRjtBQUNGLE9BQU87SUFDTCxtQ0FBbUM7SUFDbkNYLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxTQUFTQyxJQUFJLEVBQUVDLFNBQVM7UUFDaEQsSUFBSUEsV0FBVztZQUNiRCxLQUFLRSxNQUFNLEdBQUdEO1lBQ2QsSUFBSVEsV0FBVyxZQUFhO1lBQzVCQSxTQUFTTixTQUFTLEdBQUdGLFVBQVVFLFNBQVM7WUFDeENILEtBQUtHLFNBQVMsR0FBRyxJQUFJTTtZQUNyQlQsS0FBS0csU0FBUyxDQUFDQyxXQUFXLEdBQUdKO1FBQy9CO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz9lM2M2Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/inherits/inherits_browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/js-sha3/src/sha3.js":
/*!******************************************!*\
  !*** ./node_modules/js-sha3/src/sha3.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar __WEBPACK_AMD_DEFINE_RESULT__;\n/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */ /*jslint bitwise: true */ (function() {\n    \"use strict\";\n    var INPUT_ERROR = \"input is invalid type\";\n    var FINALIZE_ERROR = \"finalize already called\";\n    var WINDOW = \"object\" === \"object\";\n    var root = WINDOW ? window : {};\n    if (root.JS_SHA3_NO_WINDOW) {\n        WINDOW = false;\n    }\n    var WEB_WORKER = !WINDOW && typeof self === \"object\";\n    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === \"object\" && process.versions && process.versions.node;\n    if (NODE_JS) {\n        root = __webpack_require__.g;\n    } else if (WEB_WORKER) {\n        root = self;\n    }\n    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && \"object\" === \"object\" && module.exports;\n    var AMD =  true && __webpack_require__.amdO;\n    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n    var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n    var SHAKE_PADDING = [\n        31,\n        7936,\n        2031616,\n        520093696\n    ];\n    var CSHAKE_PADDING = [\n        4,\n        1024,\n        262144,\n        67108864\n    ];\n    var KECCAK_PADDING = [\n        1,\n        256,\n        65536,\n        16777216\n    ];\n    var PADDING = [\n        6,\n        1536,\n        393216,\n        100663296\n    ];\n    var SHIFT = [\n        0,\n        8,\n        16,\n        24\n    ];\n    var RC = [\n        1,\n        0,\n        32898,\n        0,\n        32906,\n        2147483648,\n        2147516416,\n        2147483648,\n        32907,\n        0,\n        2147483649,\n        0,\n        2147516545,\n        2147483648,\n        32777,\n        2147483648,\n        138,\n        0,\n        136,\n        0,\n        2147516425,\n        0,\n        2147483658,\n        0,\n        2147516555,\n        0,\n        139,\n        2147483648,\n        32905,\n        2147483648,\n        32771,\n        2147483648,\n        32770,\n        2147483648,\n        128,\n        2147483648,\n        32778,\n        0,\n        2147483658,\n        2147483648,\n        2147516545,\n        2147483648,\n        32896,\n        2147483648,\n        2147483649,\n        0,\n        2147516424,\n        2147483648\n    ];\n    var BITS = [\n        224,\n        256,\n        384,\n        512\n    ];\n    var SHAKE_BITS = [\n        128,\n        256\n    ];\n    var OUTPUT_TYPES = [\n        \"hex\",\n        \"buffer\",\n        \"arrayBuffer\",\n        \"array\",\n        \"digest\"\n    ];\n    var CSHAKE_BYTEPAD = {\n        \"128\": 168,\n        \"256\": 136\n    };\n    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n        Array.isArray = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n    }\n    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n        ArrayBuffer.isView = function(obj) {\n            return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n        };\n    }\n    var createOutputMethod = function(bits, padding, outputType) {\n        return function(message) {\n            return new Keccak(bits, padding, bits).update(message)[outputType]();\n        };\n    };\n    var createShakeOutputMethod = function(bits, padding, outputType) {\n        return function(message, outputBits) {\n            return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n        };\n    };\n    var createCshakeOutputMethod = function(bits, padding, outputType) {\n        return function(message, outputBits, n, s) {\n            return methods[\"cshake\" + bits].update(message, outputBits, n, s)[outputType]();\n        };\n    };\n    var createKmacOutputMethod = function(bits, padding, outputType) {\n        return function(key, message, outputBits, s) {\n            return methods[\"kmac\" + bits].update(key, message, outputBits, s)[outputType]();\n        };\n    };\n    var createOutputMethods = function(method, createMethod, bits, padding) {\n        for(var i = 0; i < OUTPUT_TYPES.length; ++i){\n            var type = OUTPUT_TYPES[i];\n            method[type] = createMethod(bits, padding, type);\n        }\n        return method;\n    };\n    var createMethod = function(bits, padding) {\n        var method = createOutputMethod(bits, padding, \"hex\");\n        method.create = function() {\n            return new Keccak(bits, padding, bits);\n        };\n        method.update = function(message) {\n            return method.create().update(message);\n        };\n        return createOutputMethods(method, createOutputMethod, bits, padding);\n    };\n    var createShakeMethod = function(bits, padding) {\n        var method = createShakeOutputMethod(bits, padding, \"hex\");\n        method.create = function(outputBits) {\n            return new Keccak(bits, padding, outputBits);\n        };\n        method.update = function(message, outputBits) {\n            return method.create(outputBits).update(message);\n        };\n        return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n    };\n    var createCshakeMethod = function(bits, padding) {\n        var w = CSHAKE_BYTEPAD[bits];\n        var method = createCshakeOutputMethod(bits, padding, \"hex\");\n        method.create = function(outputBits, n, s) {\n            if (!n && !s) {\n                return methods[\"shake\" + bits].create(outputBits);\n            } else {\n                return new Keccak(bits, padding, outputBits).bytepad([\n                    n,\n                    s\n                ], w);\n            }\n        };\n        method.update = function(message, outputBits, n, s) {\n            return method.create(outputBits, n, s).update(message);\n        };\n        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n    };\n    var createKmacMethod = function(bits, padding) {\n        var w = CSHAKE_BYTEPAD[bits];\n        var method = createKmacOutputMethod(bits, padding, \"hex\");\n        method.create = function(key, outputBits, s) {\n            return new Kmac(bits, padding, outputBits).bytepad([\n                \"KMAC\",\n                s\n            ], w).bytepad([\n                key\n            ], w);\n        };\n        method.update = function(key, message, outputBits, s) {\n            return method.create(key, outputBits, s).update(message);\n        };\n        return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n    };\n    var algorithms = [\n        {\n            name: \"keccak\",\n            padding: KECCAK_PADDING,\n            bits: BITS,\n            createMethod: createMethod\n        },\n        {\n            name: \"sha3\",\n            padding: PADDING,\n            bits: BITS,\n            createMethod: createMethod\n        },\n        {\n            name: \"shake\",\n            padding: SHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createShakeMethod\n        },\n        {\n            name: \"cshake\",\n            padding: CSHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createCshakeMethod\n        },\n        {\n            name: \"kmac\",\n            padding: CSHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createKmacMethod\n        }\n    ];\n    var methods = {}, methodNames = [];\n    for(var i = 0; i < algorithms.length; ++i){\n        var algorithm = algorithms[i];\n        var bits = algorithm.bits;\n        for(var j = 0; j < bits.length; ++j){\n            var methodName = algorithm.name + \"_\" + bits[j];\n            methodNames.push(methodName);\n            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n            if (algorithm.name !== \"sha3\") {\n                var newMethodName = algorithm.name + bits[j];\n                methodNames.push(newMethodName);\n                methods[newMethodName] = methods[methodName];\n            }\n        }\n    }\n    function Keccak(bits, padding, outputBits) {\n        this.blocks = [];\n        this.s = [];\n        this.padding = padding;\n        this.outputBits = outputBits;\n        this.reset = true;\n        this.finalized = false;\n        this.block = 0;\n        this.start = 0;\n        this.blockCount = 1600 - (bits << 1) >> 5;\n        this.byteCount = this.blockCount << 2;\n        this.outputBlocks = outputBits >> 5;\n        this.extraBytes = (outputBits & 31) >> 3;\n        for(var i = 0; i < 50; ++i){\n            this.s[i] = 0;\n        }\n    }\n    Keccak.prototype.update = function(message) {\n        if (this.finalized) {\n            throw new Error(FINALIZE_ERROR);\n        }\n        var notString, type = typeof message;\n        if (type !== \"string\") {\n            if (type === \"object\") {\n                if (message === null) {\n                    throw new Error(INPUT_ERROR);\n                } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n                    message = new Uint8Array(message);\n                } else if (!Array.isArray(message)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                        throw new Error(INPUT_ERROR);\n                    }\n                }\n            } else {\n                throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n        }\n        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i, code;\n        while(index < length){\n            if (this.reset) {\n                this.reset = false;\n                blocks[0] = this.block;\n                for(i = 1; i < blockCount + 1; ++i){\n                    blocks[i] = 0;\n                }\n            }\n            if (notString) {\n                for(i = this.start; index < length && i < byteCount; ++index){\n                    blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n                }\n            } else {\n                for(i = this.start; index < length && i < byteCount; ++index){\n                    code = message.charCodeAt(index);\n                    if (code < 0x80) {\n                        blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                    } else if (code < 0x800) {\n                        blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else if (code < 0xd800 || code >= 0xe000) {\n                        blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    } else {\n                        code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                        blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                        blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                    }\n                }\n            }\n            this.lastByteIndex = i;\n            if (i >= byteCount) {\n                this.start = i - byteCount;\n                this.block = blocks[blockCount];\n                for(i = 0; i < blockCount; ++i){\n                    s[i] ^= blocks[i];\n                }\n                f(s);\n                this.reset = true;\n            } else {\n                this.start = i;\n            }\n        }\n        return this;\n    };\n    Keccak.prototype.encode = function(x, right) {\n        var o = x & 255, n = 1;\n        var bytes = [\n            o\n        ];\n        x = x >> 8;\n        o = x & 255;\n        while(o > 0){\n            bytes.unshift(o);\n            x = x >> 8;\n            o = x & 255;\n            ++n;\n        }\n        if (right) {\n            bytes.push(n);\n        } else {\n            bytes.unshift(n);\n        }\n        this.update(bytes);\n        return bytes.length;\n    };\n    Keccak.prototype.encodeString = function(str) {\n        var notString, type = typeof str;\n        if (type !== \"string\") {\n            if (type === \"object\") {\n                if (str === null) {\n                    throw new Error(INPUT_ERROR);\n                } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n                    str = new Uint8Array(str);\n                } else if (!Array.isArray(str)) {\n                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n                        throw new Error(INPUT_ERROR);\n                    }\n                }\n            } else {\n                throw new Error(INPUT_ERROR);\n            }\n            notString = true;\n        }\n        var bytes = 0, length = str.length;\n        if (notString) {\n            bytes = length;\n        } else {\n            for(var i = 0; i < str.length; ++i){\n                var code = str.charCodeAt(i);\n                if (code < 0x80) {\n                    bytes += 1;\n                } else if (code < 0x800) {\n                    bytes += 2;\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    bytes += 3;\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);\n                    bytes += 4;\n                }\n            }\n        }\n        bytes += this.encode(bytes * 8);\n        this.update(str);\n        return bytes;\n    };\n    Keccak.prototype.bytepad = function(strs, w) {\n        var bytes = this.encode(w);\n        for(var i = 0; i < strs.length; ++i){\n            bytes += this.encodeString(strs[i]);\n        }\n        var paddingBytes = w - bytes % w;\n        var zeros = [];\n        zeros.length = paddingBytes;\n        this.update(zeros);\n        return this;\n    };\n    Keccak.prototype.finalize = function() {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n        blocks[i >> 2] |= this.padding[i & 3];\n        if (this.lastByteIndex === this.byteCount) {\n            blocks[0] = blocks[blockCount];\n            for(i = 1; i < blockCount + 1; ++i){\n                blocks[i] = 0;\n            }\n        }\n        blocks[blockCount - 1] |= 0x80000000;\n        for(i = 0; i < blockCount; ++i){\n            s[i] ^= blocks[i];\n        }\n        f(s);\n    };\n    Keccak.prototype.toString = Keccak.prototype.hex = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var hex = \"\", block;\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                block = s[i];\n                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n            }\n            if (j % blockCount === 0) {\n                f(s);\n                i = 0;\n            }\n        }\n        if (extraBytes) {\n            block = s[i];\n            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n            if (extraBytes > 1) {\n                hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n            }\n            if (extraBytes > 2) {\n                hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n            }\n        }\n        return hex;\n    };\n    Keccak.prototype.arrayBuffer = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var bytes = this.outputBits >> 3;\n        var buffer;\n        if (extraBytes) {\n            buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n        } else {\n            buffer = new ArrayBuffer(bytes);\n        }\n        var array = new Uint32Array(buffer);\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                array[j] = s[i];\n            }\n            if (j % blockCount === 0) {\n                f(s);\n            }\n        }\n        if (extraBytes) {\n            array[i] = s[i];\n            buffer = buffer.slice(0, bytes);\n        }\n        return buffer;\n    };\n    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n    Keccak.prototype.digest = Keccak.prototype.array = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;\n        var array = [], offset, block;\n        while(j < outputBlocks){\n            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){\n                offset = j << 2;\n                block = s[i];\n                array[offset] = block & 0xFF;\n                array[offset + 1] = block >> 8 & 0xFF;\n                array[offset + 2] = block >> 16 & 0xFF;\n                array[offset + 3] = block >> 24 & 0xFF;\n            }\n            if (j % blockCount === 0) {\n                f(s);\n            }\n        }\n        if (extraBytes) {\n            offset = j << 2;\n            block = s[i];\n            array[offset] = block & 0xFF;\n            if (extraBytes > 1) {\n                array[offset + 1] = block >> 8 & 0xFF;\n            }\n            if (extraBytes > 2) {\n                array[offset + 2] = block >> 16 & 0xFF;\n            }\n        }\n        return array;\n    };\n    function Kmac(bits, padding, outputBits) {\n        Keccak.call(this, bits, padding, outputBits);\n    }\n    Kmac.prototype = new Keccak();\n    Kmac.prototype.finalize = function() {\n        this.encode(this.outputBits, true);\n        return Keccak.prototype.finalize.call(this);\n    };\n    var f = function(s) {\n        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n        for(n = 0; n < 48; n += 2){\n            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n            h = c8 ^ (c2 << 1 | c3 >>> 31);\n            l = c9 ^ (c3 << 1 | c2 >>> 31);\n            s[0] ^= h;\n            s[1] ^= l;\n            s[10] ^= h;\n            s[11] ^= l;\n            s[20] ^= h;\n            s[21] ^= l;\n            s[30] ^= h;\n            s[31] ^= l;\n            s[40] ^= h;\n            s[41] ^= l;\n            h = c0 ^ (c4 << 1 | c5 >>> 31);\n            l = c1 ^ (c5 << 1 | c4 >>> 31);\n            s[2] ^= h;\n            s[3] ^= l;\n            s[12] ^= h;\n            s[13] ^= l;\n            s[22] ^= h;\n            s[23] ^= l;\n            s[32] ^= h;\n            s[33] ^= l;\n            s[42] ^= h;\n            s[43] ^= l;\n            h = c2 ^ (c6 << 1 | c7 >>> 31);\n            l = c3 ^ (c7 << 1 | c6 >>> 31);\n            s[4] ^= h;\n            s[5] ^= l;\n            s[14] ^= h;\n            s[15] ^= l;\n            s[24] ^= h;\n            s[25] ^= l;\n            s[34] ^= h;\n            s[35] ^= l;\n            s[44] ^= h;\n            s[45] ^= l;\n            h = c4 ^ (c8 << 1 | c9 >>> 31);\n            l = c5 ^ (c9 << 1 | c8 >>> 31);\n            s[6] ^= h;\n            s[7] ^= l;\n            s[16] ^= h;\n            s[17] ^= l;\n            s[26] ^= h;\n            s[27] ^= l;\n            s[36] ^= h;\n            s[37] ^= l;\n            s[46] ^= h;\n            s[47] ^= l;\n            h = c6 ^ (c0 << 1 | c1 >>> 31);\n            l = c7 ^ (c1 << 1 | c0 >>> 31);\n            s[8] ^= h;\n            s[9] ^= l;\n            s[18] ^= h;\n            s[19] ^= l;\n            s[28] ^= h;\n            s[29] ^= l;\n            s[38] ^= h;\n            s[39] ^= l;\n            s[48] ^= h;\n            s[49] ^= l;\n            b0 = s[0];\n            b1 = s[1];\n            b32 = s[11] << 4 | s[10] >>> 28;\n            b33 = s[10] << 4 | s[11] >>> 28;\n            b14 = s[20] << 3 | s[21] >>> 29;\n            b15 = s[21] << 3 | s[20] >>> 29;\n            b46 = s[31] << 9 | s[30] >>> 23;\n            b47 = s[30] << 9 | s[31] >>> 23;\n            b28 = s[40] << 18 | s[41] >>> 14;\n            b29 = s[41] << 18 | s[40] >>> 14;\n            b20 = s[2] << 1 | s[3] >>> 31;\n            b21 = s[3] << 1 | s[2] >>> 31;\n            b2 = s[13] << 12 | s[12] >>> 20;\n            b3 = s[12] << 12 | s[13] >>> 20;\n            b34 = s[22] << 10 | s[23] >>> 22;\n            b35 = s[23] << 10 | s[22] >>> 22;\n            b16 = s[33] << 13 | s[32] >>> 19;\n            b17 = s[32] << 13 | s[33] >>> 19;\n            b48 = s[42] << 2 | s[43] >>> 30;\n            b49 = s[43] << 2 | s[42] >>> 30;\n            b40 = s[5] << 30 | s[4] >>> 2;\n            b41 = s[4] << 30 | s[5] >>> 2;\n            b22 = s[14] << 6 | s[15] >>> 26;\n            b23 = s[15] << 6 | s[14] >>> 26;\n            b4 = s[25] << 11 | s[24] >>> 21;\n            b5 = s[24] << 11 | s[25] >>> 21;\n            b36 = s[34] << 15 | s[35] >>> 17;\n            b37 = s[35] << 15 | s[34] >>> 17;\n            b18 = s[45] << 29 | s[44] >>> 3;\n            b19 = s[44] << 29 | s[45] >>> 3;\n            b10 = s[6] << 28 | s[7] >>> 4;\n            b11 = s[7] << 28 | s[6] >>> 4;\n            b42 = s[17] << 23 | s[16] >>> 9;\n            b43 = s[16] << 23 | s[17] >>> 9;\n            b24 = s[26] << 25 | s[27] >>> 7;\n            b25 = s[27] << 25 | s[26] >>> 7;\n            b6 = s[36] << 21 | s[37] >>> 11;\n            b7 = s[37] << 21 | s[36] >>> 11;\n            b38 = s[47] << 24 | s[46] >>> 8;\n            b39 = s[46] << 24 | s[47] >>> 8;\n            b30 = s[8] << 27 | s[9] >>> 5;\n            b31 = s[9] << 27 | s[8] >>> 5;\n            b12 = s[18] << 20 | s[19] >>> 12;\n            b13 = s[19] << 20 | s[18] >>> 12;\n            b44 = s[29] << 7 | s[28] >>> 25;\n            b45 = s[28] << 7 | s[29] >>> 25;\n            b26 = s[38] << 8 | s[39] >>> 24;\n            b27 = s[39] << 8 | s[38] >>> 24;\n            b8 = s[48] << 14 | s[49] >>> 18;\n            b9 = s[49] << 14 | s[48] >>> 18;\n            s[0] = b0 ^ ~b2 & b4;\n            s[1] = b1 ^ ~b3 & b5;\n            s[10] = b10 ^ ~b12 & b14;\n            s[11] = b11 ^ ~b13 & b15;\n            s[20] = b20 ^ ~b22 & b24;\n            s[21] = b21 ^ ~b23 & b25;\n            s[30] = b30 ^ ~b32 & b34;\n            s[31] = b31 ^ ~b33 & b35;\n            s[40] = b40 ^ ~b42 & b44;\n            s[41] = b41 ^ ~b43 & b45;\n            s[2] = b2 ^ ~b4 & b6;\n            s[3] = b3 ^ ~b5 & b7;\n            s[12] = b12 ^ ~b14 & b16;\n            s[13] = b13 ^ ~b15 & b17;\n            s[22] = b22 ^ ~b24 & b26;\n            s[23] = b23 ^ ~b25 & b27;\n            s[32] = b32 ^ ~b34 & b36;\n            s[33] = b33 ^ ~b35 & b37;\n            s[42] = b42 ^ ~b44 & b46;\n            s[43] = b43 ^ ~b45 & b47;\n            s[4] = b4 ^ ~b6 & b8;\n            s[5] = b5 ^ ~b7 & b9;\n            s[14] = b14 ^ ~b16 & b18;\n            s[15] = b15 ^ ~b17 & b19;\n            s[24] = b24 ^ ~b26 & b28;\n            s[25] = b25 ^ ~b27 & b29;\n            s[34] = b34 ^ ~b36 & b38;\n            s[35] = b35 ^ ~b37 & b39;\n            s[44] = b44 ^ ~b46 & b48;\n            s[45] = b45 ^ ~b47 & b49;\n            s[6] = b6 ^ ~b8 & b0;\n            s[7] = b7 ^ ~b9 & b1;\n            s[16] = b16 ^ ~b18 & b10;\n            s[17] = b17 ^ ~b19 & b11;\n            s[26] = b26 ^ ~b28 & b20;\n            s[27] = b27 ^ ~b29 & b21;\n            s[36] = b36 ^ ~b38 & b30;\n            s[37] = b37 ^ ~b39 & b31;\n            s[46] = b46 ^ ~b48 & b40;\n            s[47] = b47 ^ ~b49 & b41;\n            s[8] = b8 ^ ~b0 & b2;\n            s[9] = b9 ^ ~b1 & b3;\n            s[18] = b18 ^ ~b10 & b12;\n            s[19] = b19 ^ ~b11 & b13;\n            s[28] = b28 ^ ~b20 & b22;\n            s[29] = b29 ^ ~b21 & b23;\n            s[38] = b38 ^ ~b30 & b32;\n            s[39] = b39 ^ ~b31 & b33;\n            s[48] = b48 ^ ~b40 & b42;\n            s[49] = b49 ^ ~b41 & b43;\n            s[0] ^= RC[n];\n            s[1] ^= RC[n + 1];\n        }\n    };\n    if (COMMON_JS) {\n        module.exports = methods;\n    } else {\n        for(i = 0; i < methodNames.length; ++i){\n            root[methodNames[i]] = methods[methodNames[i]];\n        }\n        if (AMD) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n                return methods;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/js-sha3/src/sha3.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = assert;\nfunction assert(val, msg) {\n    if (!val) throw new Error(msg || \"Assertion failed\");\n}\nassert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || \"Assertion failed: \" + l + \" != \" + r);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxHQUFHLEVBQUVDLEdBQUc7SUFDdEIsSUFBSSxDQUFDRCxLQUNILE1BQU0sSUFBSUUsTUFBTUQsT0FBTztBQUMzQjtBQUVBRixPQUFPSSxLQUFLLEdBQUcsU0FBU0MsWUFBWUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVMLEdBQUc7SUFDM0MsSUFBSUksS0FBS0MsR0FDUCxNQUFNLElBQUlKLE1BQU1ELE9BQVEsdUJBQXVCSSxJQUFJLFNBQVNDO0FBQ2hFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzPzQ3YTQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImFzc2VydCIsInZhbCIsIm1zZyIsIkVycm9yIiwiZXF1YWwiLCJhc3NlcnRFcXVhbCIsImwiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/minimalistic-assert/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/scrypt-js/scrypt.js":
/*!******************************************!*\
  !*** ./node_modules/scrypt-js/scrypt.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n(function(root) {\n    const MAX_VALUE = 0x7fffffff;\n    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n    // See: https://github.com/dchest/scrypt-async-js\n    function SHA256(m) {\n        const K = new Uint32Array([\n            0x428a2f98,\n            0x71374491,\n            0xb5c0fbcf,\n            0xe9b5dba5,\n            0x3956c25b,\n            0x59f111f1,\n            0x923f82a4,\n            0xab1c5ed5,\n            0xd807aa98,\n            0x12835b01,\n            0x243185be,\n            0x550c7dc3,\n            0x72be5d74,\n            0x80deb1fe,\n            0x9bdc06a7,\n            0xc19bf174,\n            0xe49b69c1,\n            0xefbe4786,\n            0x0fc19dc6,\n            0x240ca1cc,\n            0x2de92c6f,\n            0x4a7484aa,\n            0x5cb0a9dc,\n            0x76f988da,\n            0x983e5152,\n            0xa831c66d,\n            0xb00327c8,\n            0xbf597fc7,\n            0xc6e00bf3,\n            0xd5a79147,\n            0x06ca6351,\n            0x14292967,\n            0x27b70a85,\n            0x2e1b2138,\n            0x4d2c6dfc,\n            0x53380d13,\n            0x650a7354,\n            0x766a0abb,\n            0x81c2c92e,\n            0x92722c85,\n            0xa2bfe8a1,\n            0xa81a664b,\n            0xc24b8b70,\n            0xc76c51a3,\n            0xd192e819,\n            0xd6990624,\n            0xf40e3585,\n            0x106aa070,\n            0x19a4c116,\n            0x1e376c08,\n            0x2748774c,\n            0x34b0bcb5,\n            0x391c0cb3,\n            0x4ed8aa4a,\n            0x5b9cca4f,\n            0x682e6ff3,\n            0x748f82ee,\n            0x78a5636f,\n            0x84c87814,\n            0x8cc70208,\n            0x90befffa,\n            0xa4506ceb,\n            0xbef9a3f7,\n            0xc67178f2\n        ]);\n        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n        function blocks(p) {\n            let off = 0, len = p.length;\n            while(len >= 64){\n                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n                for(i = 0; i < 16; i++){\n                    j = off + i * 4;\n                    w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n                }\n                for(i = 16; i < 64; i++){\n                    u = w[i - 2];\n                    t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n                    u = w[i - 15];\n                    t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n                }\n                for(i = 0; i < 64; i++){\n                    t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n                    t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n                    h = g;\n                    g = f;\n                    f = e;\n                    e = d + t1 | 0;\n                    d = c;\n                    c = b;\n                    b = a;\n                    a = t1 + t2 | 0;\n                }\n                h0 = h0 + a | 0;\n                h1 = h1 + b | 0;\n                h2 = h2 + c | 0;\n                h3 = h3 + d | 0;\n                h4 = h4 + e | 0;\n                h5 = h5 + f | 0;\n                h6 = h6 + g | 0;\n                h7 = h7 + h | 0;\n                off += 64;\n                len -= 64;\n            }\n        }\n        blocks(m);\n        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 0x20000000 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);\n        p.push(0x80);\n        for(i = bytesLeft + 1; i < numZeros; i++){\n            p.push(0);\n        }\n        p.push(bitLenHi >>> 24 & 0xff);\n        p.push(bitLenHi >>> 16 & 0xff);\n        p.push(bitLenHi >>> 8 & 0xff);\n        p.push(bitLenHi >>> 0 & 0xff);\n        p.push(bitLenLo >>> 24 & 0xff);\n        p.push(bitLenLo >>> 16 & 0xff);\n        p.push(bitLenLo >>> 8 & 0xff);\n        p.push(bitLenLo >>> 0 & 0xff);\n        blocks(p);\n        return [\n            h0 >>> 24 & 0xff,\n            h0 >>> 16 & 0xff,\n            h0 >>> 8 & 0xff,\n            h0 >>> 0 & 0xff,\n            h1 >>> 24 & 0xff,\n            h1 >>> 16 & 0xff,\n            h1 >>> 8 & 0xff,\n            h1 >>> 0 & 0xff,\n            h2 >>> 24 & 0xff,\n            h2 >>> 16 & 0xff,\n            h2 >>> 8 & 0xff,\n            h2 >>> 0 & 0xff,\n            h3 >>> 24 & 0xff,\n            h3 >>> 16 & 0xff,\n            h3 >>> 8 & 0xff,\n            h3 >>> 0 & 0xff,\n            h4 >>> 24 & 0xff,\n            h4 >>> 16 & 0xff,\n            h4 >>> 8 & 0xff,\n            h4 >>> 0 & 0xff,\n            h5 >>> 24 & 0xff,\n            h5 >>> 16 & 0xff,\n            h5 >>> 8 & 0xff,\n            h5 >>> 0 & 0xff,\n            h6 >>> 24 & 0xff,\n            h6 >>> 16 & 0xff,\n            h6 >>> 8 & 0xff,\n            h6 >>> 0 & 0xff,\n            h7 >>> 24 & 0xff,\n            h7 >>> 16 & 0xff,\n            h7 >>> 8 & 0xff,\n            h7 >>> 0 & 0xff\n        ];\n    }\n    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = password.length <= 64 ? password : SHA256(password);\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n        let i;\n        let dk = [];\n        // inner = (password ^ ipad) || salt || counter\n        for(i = 0; i < 64; i++){\n            inner[i] = 0x36;\n        }\n        for(i = 0; i < password.length; i++){\n            inner[i] ^= password[i];\n        }\n        for(i = 0; i < salt.length; i++){\n            inner[64 + i] = salt[i];\n        }\n        for(i = innerLen - 4; i < innerLen; i++){\n            inner[i] = 0;\n        }\n        // outerKey = password ^ opad\n        for(i = 0; i < 64; i++)outerKey[i] = 0x5c;\n        for(i = 0; i < password.length; i++)outerKey[i] ^= password[i];\n        // increments counter inside inner\n        function incrementCounter() {\n            for(let i = innerLen - 1; i >= innerLen - 4; i--){\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n            }\n        }\n        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n        while(dkLen >= 32){\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n            dkLen -= 32;\n        }\n        if (dkLen > 0) {\n            incrementCounter();\n            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n        return dk;\n    }\n    // The following is an adaptation of scryptsy\n    // See: https://www.npmjs.com/package/scryptsy\n    function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n        for(i = 0; i < 2 * r; i++){\n            blockxor(BY, i * 16, _X, 16);\n            salsa20_8(_X, x);\n            arraycopy(_X, 0, BY, Yi + i * 16, 16);\n        }\n        for(i = 0; i < r; i++){\n            arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n        }\n        for(i = 0; i < r; i++){\n            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n    }\n    function R(a, b) {\n        return a << b | a >>> 32 - b;\n    }\n    function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n        for(let i = 8; i > 0; i -= 2){\n            x[4] ^= R(x[0] + x[12], 7);\n            x[8] ^= R(x[4] + x[0], 9);\n            x[12] ^= R(x[8] + x[4], 13);\n            x[0] ^= R(x[12] + x[8], 18);\n            x[9] ^= R(x[5] + x[1], 7);\n            x[13] ^= R(x[9] + x[5], 9);\n            x[1] ^= R(x[13] + x[9], 13);\n            x[5] ^= R(x[1] + x[13], 18);\n            x[14] ^= R(x[10] + x[6], 7);\n            x[2] ^= R(x[14] + x[10], 9);\n            x[6] ^= R(x[2] + x[14], 13);\n            x[10] ^= R(x[6] + x[2], 18);\n            x[3] ^= R(x[15] + x[11], 7);\n            x[7] ^= R(x[3] + x[15], 9);\n            x[11] ^= R(x[7] + x[3], 13);\n            x[15] ^= R(x[11] + x[7], 18);\n            x[1] ^= R(x[0] + x[3], 7);\n            x[2] ^= R(x[1] + x[0], 9);\n            x[3] ^= R(x[2] + x[1], 13);\n            x[0] ^= R(x[3] + x[2], 18);\n            x[6] ^= R(x[5] + x[4], 7);\n            x[7] ^= R(x[6] + x[5], 9);\n            x[4] ^= R(x[7] + x[6], 13);\n            x[5] ^= R(x[4] + x[7], 18);\n            x[11] ^= R(x[10] + x[9], 7);\n            x[8] ^= R(x[11] + x[10], 9);\n            x[9] ^= R(x[8] + x[11], 13);\n            x[10] ^= R(x[9] + x[8], 18);\n            x[12] ^= R(x[15] + x[14], 7);\n            x[13] ^= R(x[12] + x[15], 9);\n            x[14] ^= R(x[13] + x[12], 13);\n            x[15] ^= R(x[14] + x[13], 18);\n        }\n        for(let i = 0; i < 16; ++i){\n            B[i] += x[i];\n        }\n    }\n    // naive approach... going back to loop unrolling may yield additional performance\n    function blockxor(S, Si, D, len) {\n        for(let i = 0; i < len; i++){\n            D[i] ^= S[Si + i];\n        }\n    }\n    function arraycopy(src, srcPos, dest, destPos, length) {\n        while(length--){\n            dest[destPos++] = src[srcPos++];\n        }\n    }\n    function checkBufferish(o) {\n        if (!o || typeof o.length !== \"number\") {\n            return false;\n        }\n        for(let i = 0; i < o.length; i++){\n            const v = o[i];\n            if (typeof v !== \"number\" || v % 1 || v < 0 || v >= 256) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function ensureInteger(value, name) {\n        if (typeof value !== \"number\" || value % 1) {\n            throw new Error(\"invalid \" + name);\n        }\n        return value;\n    }\n    // N = Cpu cost, r = Memory cost, p = parallelization cost\n    // callback(error, progress, key)\n    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n        N = ensureInteger(N, \"N\");\n        r = ensureInteger(r, \"r\");\n        p = ensureInteger(p, \"p\");\n        dkLen = ensureInteger(dkLen, \"dkLen\");\n        if (N === 0 || (N & N - 1) !== 0) {\n            throw new Error(\"N must be power of 2\");\n        }\n        if (N > MAX_VALUE / 128 / r) {\n            throw new Error(\"N too large\");\n        }\n        if (r > MAX_VALUE / 128 / p) {\n            throw new Error(\"r too large\");\n        }\n        if (!checkBufferish(password)) {\n            throw new Error(\"password must be an array or buffer\");\n        }\n        password = Array.prototype.slice.call(password);\n        if (!checkBufferish(salt)) {\n            throw new Error(\"salt must be an array or buffer\");\n        }\n        salt = Array.prototype.slice.call(salt);\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r);\n        for(let i = 0; i < B.length; i++){\n            const j = i * 4;\n            B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;\n        }\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n        const Yi = 32 * r;\n        // scratch space\n        const x = new Uint32Array(16); // salsa20_8\n        const _X = new Uint32Array(16); // blockmix_salsa8\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null;\n        // Set this to true to abandon the scrypt on the next step\n        let stop = false;\n        // State information\n        let state = 0;\n        let i0 = 0, i1;\n        let Bi;\n        // How many blockmix_salsa8 can we do per step?\n        const limit = callback ? parseInt(1000 / r) : 0xffffffff;\n        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n        const nextTick = typeof setImmediate !== \"undefined\" ? setImmediate : setTimeout;\n        // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n        const incrementalSMix = function() {\n            if (stop) {\n                return callback(new Error(\"cancelled\"), currentOp / totalOps);\n            }\n            let steps;\n            switch(state){\n                case 0:\n                    // for (var i = 0; i < p; i++)...\n                    Bi = i0 * 32 * r;\n                    arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1\n                    state = 1; // Move to ROMix 2\n                    i1 = 0;\n                // Fall through\n                case 1:\n                    // Run up to 1000 steps of the first inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) {\n                        steps = limit;\n                    }\n                    for(let i = 0; i < steps; i++){\n                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi) // ROMix - 3\n                        ;\n                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4\n                    }\n                    // for (var i = 0; i < N; i++)\n                    i1 += steps;\n                    currentOp += steps;\n                    if (callback) {\n                        // Call the callback with the progress (optionally stopping us)\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) {\n                                break;\n                            }\n                            lastPercent10 = percent10;\n                        }\n                    }\n                    if (i1 < N) {\n                        break;\n                    }\n                    i1 = 0; // Move to ROMix 6\n                    state = 2;\n                // Fall through\n                case 2:\n                    // Run up to 1000 steps of the second inner smix loop\n                    steps = N - i1;\n                    if (steps > limit) {\n                        steps = limit;\n                    }\n                    for(let i = 0; i < steps; i++){\n                        const offset = (2 * r - 1) * 16; // ROMix - 7\n                        const j = XY[offset] & N - 1;\n                        blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)\n                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)\n                    }\n                    // for (var i = 0; i < N; i++)...\n                    i1 += steps;\n                    currentOp += steps;\n                    // Call the callback with the progress (optionally stopping us)\n                    if (callback) {\n                        const percent10 = parseInt(1000 * currentOp / totalOps);\n                        if (percent10 !== lastPercent10) {\n                            stop = callback(null, currentOp / totalOps);\n                            if (stop) {\n                                break;\n                            }\n                            lastPercent10 = percent10;\n                        }\n                    }\n                    if (i1 < N) {\n                        break;\n                    }\n                    arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10\n                    // for (var i = 0; i < p; i++)...\n                    i0++;\n                    if (i0 < p) {\n                        state = 0;\n                        break;\n                    }\n                    b = [];\n                    for(let i = 0; i < B.length; i++){\n                        b.push(B[i] >> 0 & 0xff);\n                        b.push(B[i] >> 8 & 0xff);\n                        b.push(B[i] >> 16 & 0xff);\n                        b.push(B[i] >> 24 & 0xff);\n                    }\n                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n                    // Send the result to the callback\n                    if (callback) {\n                        callback(null, 1.0, derivedKey);\n                    }\n                    // Done; don't break (which would reschedule)\n                    return derivedKey;\n            }\n            // Schedule the next steps\n            if (callback) {\n                nextTick(incrementalSMix);\n            }\n        };\n        // Run the smix state machine until completion\n        if (!callback) {\n            while(true){\n                const derivedKey = incrementalSMix();\n                if (derivedKey != undefined) {\n                    return derivedKey;\n                }\n            }\n        }\n        // Bootstrap the async incremental smix\n        incrementalSMix();\n    }\n    const lib = {\n        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n            return new Promise(function(resolve, reject) {\n                let lastProgress = 0;\n                if (progressCallback) {\n                    progressCallback(0);\n                }\n                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n                    if (error) {\n                        reject(error);\n                    } else if (key) {\n                        if (progressCallback && lastProgress !== 1) {\n                            progressCallback(1);\n                        }\n                        resolve(new Uint8Array(key));\n                    } else if (progressCallback && progress !== lastProgress) {\n                        lastProgress = progress;\n                        return progressCallback(progress);\n                    }\n                });\n            });\n        },\n        syncScrypt: function(password, salt, N, r, p, dkLen) {\n            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n    };\n    // node.js\n    if (true) {\n        module.exports = lib;\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/scrypt-js/scrypt.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/MentorList.tsx":
/*!***************************************!*\
  !*** ./src/components/MentorList.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MentorList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/users.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/wallet.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/message-square.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/external-link.js\");\n/* harmony import */ var _barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=ExternalLink,Loader2,MessageSquare,Users,Wallet!=!lucide-react */ \"(app-pages-browser)/./node_modules/lucide-react/dist/esm/icons/loader-2.js\");\n// 'use client';\n// import { Users, MessageSquare } from 'lucide-react';\n// interface MentorListProps {\n//   careerPath: string;\n// }\n// const MOCK_MENTORS = [\n//   {\n//     id: 1,\n//     name: 'Sarah Johnson',\n//     role: 'Senior AI Engineer',\n//     company: 'Google',\n//     rate: 150,\n//     availability: 'Available',\n//   },\n//   {\n//     id: 2,\n//     name: 'Michael Chen',\n//     role: 'Lead Developer',\n//     company: 'Microsoft',\n//     rate: 120,\n//     availability: 'Booked',\n//   },\n//   {\n//     id: 3,\n//     name: 'Emma Davis',\n//     role: 'Data Scientist',\n//     company: 'Amazon',\n//     rate: 100,\n//     availability: 'Available',\n//   },\n// ];\n// export const MentorList: React.FC<MentorListProps> = ({ careerPath }) => {\n//   return (\n//     <div className=\"bg-white rounded-xl shadow-lg p-6\">\n//       <div className=\"flex items-center gap-2 mb-6\">\n//         <Users className=\"w-6 h-6 text-blue-600\" />\n//         <h2 className=\"text-xl font-bold\">Available Mentors</h2>\n//       </div>\n//       <div className=\"space-y-4\">\n//         {MOCK_MENTORS.map((mentor) => (\n//           <div\n//             key={mentor.id}\n//             className=\"border rounded-lg p-4 hover:border-blue-200 transition-colors\"\n//           >\n//             <div className=\"flex justify-between items-start mb-2\">\n//               <div>\n//                 <h3 className=\"font-semibold\">{mentor.name}</h3>\n//                 <p className=\"text-sm text-gray-600\">{mentor.role} at {mentor.company}</p>\n//               </div>\n//               <span className={`text-sm px-2 py-1 rounded ${\n//                 mentor.availability === 'Available'\n//                   ? 'bg-green-100 text-green-800'\n//                   : 'bg-gray-100 text-gray-800'\n//               }`}>\n//                 {mentor.availability}\n//               </span>\n//             </div>\n//             <div className=\"flex justify-between items-center mt-4\">\n//               <span className=\"text-sm text-gray-600\">${mentor.rate}/hour</span>\n//               <button\n//                 disabled={mentor.availability !== 'Available'}\n//                 className=\"flex items-center gap-1 text-sm bg-blue-600 text-white px-3 py-1.5 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n//               >\n//                 <MessageSquare className=\"w-4 h-4\" />\n//                 Book Session\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n// \"use client\"\n// import { useState, useEffect } from \"react\"\n// import { Users, MessageSquare, Wallet, ExternalLink, Loader2 } from \"lucide-react\"\n// // Types\n// interface Mentor {\n//   id: number\n//   name: string\n//   role: string\n//   company: string\n//   rate: number\n//   availability: \"Available\" | \"Booked\"\n//   walletAddress: string\n//   image: string\n// }\n// interface MetaMaskError {\n//   code: number\n//   message: string\n// }\n// // Constants\n// const EDUCHAIN_CHAIN_ID = \"656476\" // Convert decimal 656476 to hex\n// const EDUCHAIN_CONFIG = {\n//   chainId: EDUCHAIN_CHAIN_ID,\n//   chainName: \"EDU Chain Testnet\",\n//   nativeCurrency: {\n//     name: \"EduChain Ether\",\n//     symbol: \"EDU\",\n//     decimals: 18,\n//   },\n//   rpcUrls: [\"https://open-campus-codex-sepolia.drpc.org\"],\n//   blockExplorerUrls: [\"https://opencampus-codex.blockscout.com/\"],\n// }\n// const MOCK_MENTORS: Mentor[] = [\n//   {\n//     id: 1,\n//     name: \"Sarah Johnson\",\n//     role: \"Senior AI Engineer\",\n//     company: \"Google\",\n//     rate: 0.001,\n//     availability: \"Available\",\n//     walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n//     image: \"/placeholder.svg?height=100&width=100\",\n//   },\n//   {\n//     id: 2,\n//     name: \"Michael Chen\",\n//     role: \"Lead Developer\",\n//     company: \"Microsoft\",\n//     rate: 0.001,\n//     availability: \"Booked\",\n//     walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n//     image: \"/placeholder.svg?height=100&width=100\",\n//   },\n//   {\n//     id: 3,\n//     name: \"Emma Davis\",\n//     role: \"Data Scientist\",\n//     company: \"Amazon\",\n//     rate: 0.001,\n//     availability: \"Available\",\n//     walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n//     image: \"/placeholder.svg?height=100&width=100\",\n//   },\n// ]\n// export default function MentorList({ careerPath }: { careerPath: string }) {\n//   // State\n//   const [isConnected, setIsConnected] = useState(false)\n//   const [address, setAddress] = useState(\"\")\n//   const [selectedMentor, setSelectedMentor] = useState<Mentor | null>(null)\n//   const [isPaying, setIsPaying] = useState(false)\n//   const [txHash, setTxHash] = useState<string | null>(null)\n//   const [showToast, setShowToast] = useState(false)\n//   const [toastMessage, setToastMessage] = useState({ title: \"\", message: \"\", type: \"success\" })\n//   // Toast helper\n//   const showNotification = (title: string, message: string, type: \"success\" | \"error\") => {\n//     setToastMessage({ title, message, type })\n//     setShowToast(true)\n//     setTimeout(() => setShowToast(false), 5000)\n//   }\n//   // Network checking\n//   const checkNetwork = async () => {\n//     if (!window.ethereum) return false\n//     try {\n//       const chainId = await window.ethereum.request({ method: \"eth_chainId\" })\n//       if (chainId !== EDUCHAIN_CHAIN_ID) {\n//         await window.ethereum\n//           .request({\n//             method: \"wallet_switchEthereumChain\",\n//             params: [{ chainId: EDUCHAIN_CHAIN_ID }],\n//           })\n//           .catch(async (switchError: MetaMaskError) => {\n//             if (switchError.code === 4902) {\n//               await window.ethereum.request({\n//                 method: \"wallet_addEthereumChain\",\n//                 params: [EDUCHAIN_CONFIG],\n//               })\n//             }\n//           })\n//       }\n//       return true\n//     } catch (error) {\n//       console.error(\"Error checking/switching network:\", error)\n//       return false\n//     }\n//   }\n//   // Wallet connection\n//   const connectWallet = async () => {\n//     if (!window.ethereum) {\n//       showNotification(\"MetaMask Required\", \"Please install MetaMask to connect your wallet.\", \"error\")\n//       return\n//     }\n//     try {\n//       const networkOk = await checkNetwork()\n//       if (!networkOk) {\n//         showNotification(\"Network Error\", \"Please switch to EduChain network\", \"error\")\n//         return\n//       }\n//       const accounts = await window.ethereum.request({\n//         method: \"eth_requestAccounts\",\n//       })\n//       setAddress(accounts[0])\n//       setIsConnected(true)\n//     } catch (error) {\n//       console.error(\"Error connecting wallet:\", error)\n//       showNotification(\"Connection Failed\", \"Failed to connect wallet. Please try again.\", \"error\")\n//     }\n//   }\n//   // Payment handling\n//   const handlePayment = async () => {\n//     if (!isConnected) {\n//       await connectWallet()\n//       return\n//     }\n//     if (!selectedMentor) return\n//     setIsPaying(true)\n//     setTxHash(null)\n//     try {\n//       const transactionParams = {\n//         from: address,\n//         to: selectedMentor.walletAddress,\n//         value: `0x${(selectedMentor.rate * 1e18).toString(16)}`,\n//         gas: \"21000\",\n//       }\n//       const hash = await window.ethereum.request({\n//         method: \"eth_sendTransaction\",\n//         params: [transactionParams],\n//       })\n//       setTxHash(hash)\n//       showNotification(\"Payment Successful\", \"Your booking has been confirmed!\", \"success\")\n//     } catch (error) {\n//       console.error(\"Payment error:\", error)\n//       showNotification(\"Payment Failed\", \"Transaction could not be completed. Please try again.\", \"error\")\n//     } finally {\n//       setIsPaying(false)\n//     }\n//   }\n//   // Wallet event listeners\n//   useEffect(() => {\n//     if (window.ethereum) {\n//       window.ethereum.request({ method: \"eth_accounts\" }).then((accounts: string[]) => {\n//         if (accounts.length > 0) {\n//           setAddress(accounts[0])\n//           setIsConnected(true)\n//         }\n//       })\n//       window.ethereum.on(\"accountsChanged\", (accounts: string[]) => {\n//         if (accounts.length > 0) {\n//           setAddress(accounts[0])\n//           setIsConnected(true)\n//         } else {\n//           setAddress(\"\")\n//           setIsConnected(false)\n//         }\n//       })\n//       window.ethereum.on(\"chainChanged\", () => {\n//         window.location.reload()\n//       })\n//     }\n//   }, [])\n//   return (\n//     <div className=\"w-full max-w-4xl mx-auto bg-white rounded-xl shadow-lg\">\n//       {/* Header */}\n//       <div className=\"flex items-center justify-between p-6 border-b\">\n//         <div className=\"flex items-center gap-2\">\n//           <Users className=\"h-6 w-6 text-blue-600\" />\n//           <h2 className=\"text-xl font-bold\">Available Mentors</h2>\n//         </div>\n//         <button\n//           onClick={connectWallet}\n//           className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n//             isConnected ? \"border border-gray-200 hover:bg-gray-50\" : \"bg-blue-600 text-white hover:bg-blue-700\"\n//           }`}\n//         >\n//           <Wallet className=\"h-4 w-4\" />\n//           {isConnected ? <span>{`${address.slice(0, 6)}...${address.slice(-4)}`}</span> : \"Connect Wallet\"}\n//         </button>\n//       </div>\n//       {/* Mentor List */}\n//       <div className=\"p-6 space-y-6\">\n//         {MOCK_MENTORS.map((mentor) => (\n//           <div\n//             key={mentor.id}\n//             className=\"flex items-start gap-4 rounded-lg border p-4 transition-colors hover:border-blue-100\"\n//           >\n//             <img src={mentor.image || \"/placeholder.svg\"} alt={mentor.name} className=\"h-12 w-12 rounded-full\" />\n//             <div className=\"flex-1 space-y-1\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <h3 className=\"font-semibold\">{mentor.name}</h3>\n//                   <p className=\"text-sm text-gray-600\">\n//                     {mentor.role} at {mentor.company}\n//                   </p>\n//                 </div>\n//                 <span\n//                   className={`px-2 py-1 text-sm rounded-full ${\n//                     mentor.availability === \"Available\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"\n//                   }`}\n//                 >\n//                   {mentor.availability}\n//                 </span>\n//               </div>\n//               <div className=\"flex items-center justify-between pt-2\">\n//                 <span className=\"text-sm font-medium\">{mentor.rate} EDU/hour</span>\n//                 <button\n//                   onClick={() => setSelectedMentor(mentor)}\n//                   disabled={mentor.availability !== \"Available\"}\n//                   className=\"flex items-center gap-2 px-3 py-1.5 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n//                 >\n//                   <MessageSquare className=\"h-4 w-4\" />\n//                   Book Session\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       {/* Payment Modal */}\n//       {selectedMentor && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-xl shadow-lg max-w-md w-full p-6\">\n//             <h3 className=\"text-xl font-bold mb-4\">Confirm Booking</h3>\n//             <p className=\"text-gray-600 mb-6\">You're about to book a mentoring session</p>\n//             <div className=\"space-y-4\">\n//               <div className=\"flex items-center gap-4 rounded-lg border p-4\">\n//                 <img\n//                   src={selectedMentor.image || \"/placeholder.svg\"}\n//                   alt={selectedMentor.name}\n//                   className=\"h-12 w-12 rounded-full\"\n//                 />\n//                 <div>\n//                   <h3 className=\"font-semibold\">{selectedMentor.name}</h3>\n//                   <p className=\"text-sm text-gray-600\">\n//                     {selectedMentor.role} at {selectedMentor.company}\n//                   </p>\n//                 </div>\n//               </div>\n//               <div className=\"rounded-lg border p-4\">\n//                 <div className=\"flex justify-between text-sm\">\n//                   <span>Session Rate</span>\n//                   <span className=\"font-medium\">{selectedMentor.rate} EDU</span>\n//                 </div>\n//               </div>\n//               {txHash && (\n//                 <div className=\"rounded-lg bg-blue-50 p-4 text-sm\">\n//                   <div className=\"flex items-center gap-2\">\n//                     <span>Transaction submitted:</span>\n//                     <a\n//                       href={`${EDUCHAIN_CONFIG.blockExplorerUrls[0]}/tx/${txHash}`}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"flex items-center gap-1 text-blue-600 hover:underline\"\n//                     >\n//                       View on Explorer\n//                       <ExternalLink className=\"h-3 w-3\" />\n//                     </a>\n//                   </div>\n//                 </div>\n//               )}\n//               <div className=\"flex justify-end gap-2 pt-4\">\n//                 <button\n//                   onClick={() => setSelectedMentor(null)}\n//                   disabled={isPaying}\n//                   className=\"px-4 py-2 rounded-lg border hover:bg-gray-50 disabled:opacity-50\"\n//                 >\n//                   Cancel\n//                 </button>\n//                 <button\n//                   onClick={handlePayment}\n//                   disabled={isPaying}\n//                   className=\"min-w-[100px] px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2\"\n//                 >\n//                   {isPaying ? (\n//                     <>\n//                       <Loader2 className=\"h-4 w-4 animate-spin\" />\n//                       Processing\n//                     </>\n//                   ) : (\n//                     \"Confirm & Pay\"\n//                   )}\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {/* Toast Notification */}\n//       {showToast && (\n//         <div\n//           className={`fixed bottom-4 right-4 max-w-md w-full rounded-lg shadow-lg p-4 transition-all transform translate-y-0 ${\n//             toastMessage.type === \"success\" ? \"bg-green-50\" : \"bg-red-50\"\n//           }`}\n//         >\n//           <div className=\"flex gap-2\">\n//             <div className=\"flex-1\">\n//               <h4 className={`font-medium ${toastMessage.type === \"success\" ? \"text-green-800\" : \"text-red-800\"}`}>\n//                 {toastMessage.title}\n//               </h4>\n//               <p className={toastMessage.type === \"success\" ? \"text-green-600\" : \"text-red-600\"}>\n//                 {toastMessage.message}\n//               </p>\n//             </div>\n//             <button onClick={() => setShowToast(false)} className=\"text-gray-500 hover:text-gray-700\">\n//               ×\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n// Constants\nconst EDUCHAIN_CHAIN_ID = \"656476\"; // Hexadecimal format for 656476\nconst EDUCHAIN_CONFIG = {\n    chainId: EDUCHAIN_CHAIN_ID,\n    chainName: \"EDU Chain Testnet\",\n    nativeCurrency: {\n        name: \"EduChain Ether\",\n        symbol: \"EDU\",\n        decimals: 18\n    },\n    rpcUrls: [\n        \"https://open-campus-codex-sepolia.drpc.org\"\n    ],\n    blockExplorerUrls: [\n        \"https://opencampus-codex.blockscout.com/\"\n    ]\n};\nconst MOCK_MENTORS = [\n    {\n        id: 1,\n        name: \"Sarah Johnson\",\n        role: \"Senior AI Engineer\",\n        company: \"Google\",\n        rate: 0.002,\n        availability: \"Available\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"/placeholder.svg?height=100&width=100\"\n    },\n    {\n        id: 2,\n        name: \"Michael Chen\",\n        role: \"Lead Developer\",\n        company: \"Microsoft\",\n        rate: 0.002,\n        availability: \"Booked\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"/placeholder.svg?height=100&width=100\"\n    },\n    {\n        id: 3,\n        name: \"Emma Davis\",\n        role: \"Data Scientist\",\n        company: \"Amazon\",\n        rate: 0.002,\n        availability: \"Available\",\n        walletAddress: \"0x7C38926C4fa95E84BCf784857F7C2FF342190368\",\n        image: \"/placeholder.svg?height=100&width=100\"\n    }\n];\nfunction MentorList(param) {\n    let { careerPath } = param;\n    _s();\n    // State\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedMentor, setSelectedMentor] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isPaying, setIsPaying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [txHash, setTxHash] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showToast, setShowToast] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [toastMessage, setToastMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        title: \"\",\n        message: \"\",\n        type: \"success\"\n    });\n    // Toast helper\n    const showNotification = (title, message, type)=>{\n        setToastMessage({\n            title,\n            message,\n            type\n        });\n        setShowToast(true);\n        setTimeout(()=>setShowToast(false), 5000);\n    };\n    // Network checking\n    const checkNetwork = async ()=>{\n        if (!window.ethereum) {\n            showNotification(\"MetaMask Required\", \"MetaMask is not installed or accessible.\", \"error\");\n            return false;\n        }\n        try {\n            const currentChainId = await window.ethereum.request({\n                method: \"eth_chainId\"\n            });\n            if (currentChainId !== EDUCHAIN_CHAIN_ID) {\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [\n                            {\n                                chainId: EDUCHAIN_CHAIN_ID\n                            }\n                        ]\n                    });\n                } catch (switchError) {\n                    if (switchError.code === 4902) {\n                        await window.ethereum.request({\n                            method: \"wallet_addEthereumChain\",\n                            params: [\n                                EDUCHAIN_CONFIG\n                            ]\n                        });\n                    } else {\n                        throw switchError;\n                    }\n                }\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error switching network:\", error);\n            showNotification(\"Network Error\", \"Failed to switch to EduChain. Please try again.\", \"error\");\n            return false;\n        }\n    };\n    // Wallet connection\n    const connectWallet = async ()=>{\n        if (!window.ethereum) {\n            showNotification(\"MetaMask Required\", \"Please install MetaMask to connect your wallet.\", \"error\");\n            return;\n        }\n        try {\n            const networkOk = await checkNetwork();\n            if (!networkOk) {\n                showNotification(\"Network Error\", \"Please switch to EduChain network\", \"error\");\n                return;\n            }\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setAddress(accounts[0]);\n            setIsConnected(true);\n        } catch (error) {\n            console.error(\"Error connecting wallet:\", error);\n            showNotification(\"Connection Failed\", \"Failed to connect wallet. Please try again.\", \"error\");\n        }\n    };\n    // Payment handling\n    // const handlePayment = async () => {\n    //   if (!isConnected) {\n    //     await connectWallet();\n    //     return;\n    //   }\n    //   if (!selectedMentor) return;\n    //   setIsPaying(true);\n    //   setTxHash(null);\n    //   try {\n    //     const transactionParams = {\n    //       from: address,\n    //       to: selectedMentor.walletAddress,\n    //       // value: `0x${Math.floor(selectedMentor.rate * 1e18).toString(16)}`,\n    //       value:\"0.0000000000000001\",\n    //       gas: \"21000\",\n    //     };\n    //     const hash = await window.ethereum.request({\n    //       method: \"eth_sendTransaction\",\n    //       params: [transactionParams],\n    //     });\n    //     setTxHash(hash);\n    //     showNotification(\"Payment Successful\", \"Your booking has been confirmed!\", \"success\");\n    //   } catch (error: any) {\n    //     console.error(\"Payment error:\", error);\n    //     const errorMessage = error?.message || \"Transaction could not be completed. Please try again.\";\n    //     showNotification(\"Payment Failed\", errorMessage, \"error\");\n    //   } finally {\n    //     setIsPaying(false);\n    //   }\n    // };\n    const handlePayment = async ()=>{\n        if (!isConnected) {\n            await connectWallet();\n            return;\n        }\n        if (!selectedMentor) return;\n        setIsPaying(true);\n        setTxHash(null);\n        try {\n            const value = ethers__WEBPACK_IMPORTED_MODULE_2__[\"default\"].utils.parseEther(selectedMentor.rate.toString()); // Convert rate to wei\n            const transactionParams = {\n                from: address,\n                to: selectedMentor.walletAddress,\n                value: value.toHexString(),\n                gas: \"21000\"\n            };\n            const hash = await window.ethereum.request({\n                method: \"eth_sendTransaction\",\n                params: [\n                    transactionParams\n                ]\n            });\n            setTxHash(hash);\n            showNotification(\"Payment Successful\", \"Your booking has been confirmed!\", \"success\");\n        } catch (error) {\n            console.error(\"Payment error:\", error);\n            const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || \"Transaction could not be completed. Please try again.\";\n            showNotification(\"Payment Failed\", errorMessage, \"error\");\n        } finally{\n            setIsPaying(false);\n        }\n    };\n    // Wallet event listeners\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (window.ethereum) {\n            window.ethereum.request({\n                method: \"eth_accounts\"\n            }).then((accounts)=>{\n                if (accounts.length > 0) {\n                    setAddress(accounts[0]);\n                    setIsConnected(true);\n                }\n            });\n            window.ethereum.on(\"accountsChanged\", (accounts)=>{\n                if (accounts.length > 0) {\n                    setAddress(accounts[0]);\n                    setIsConnected(true);\n                } else {\n                    setAddress(\"\");\n                    setIsConnected(false);\n                }\n            });\n            window.ethereum.on(\"chainChanged\", ()=>{\n                window.location.reload();\n            });\n        }\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full max-w-4xl mx-auto bg-white rounded-xl shadow-lg\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex items-center justify-between p-6 border-b\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                className: \"h-6 w-6 text-blue-600\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 702,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                className: \"text-xl font-bold\",\n                                children: \"Available Mentors\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 703,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 701,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: connectWallet,\n                        className: \"flex items-center gap-2 px-4 py-2 rounded-lg transition-colors \".concat(isConnected ? \"border border-gray-200 hover:bg-gray-50\" : \"bg-blue-600 text-white hover:bg-blue-700\"),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                className: \"h-4 w-4\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 711,\n                                columnNumber: 11\n                            }, this),\n                            isConnected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"\".concat(address.slice(0, 6), \"...\").concat(address.slice(-4))\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 712,\n                                columnNumber: 26\n                            }, this) : \"Connect Wallet\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 705,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 700,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"p-6 space-y-6\",\n                children: MOCK_MENTORS.map((mentor)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-start gap-4 rounded-lg border p-4 transition-colors hover:border-blue-100\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: mentor.image || \"/placeholder.svg\",\n                                alt: mentor.name,\n                                className: \"h-12 w-12 rounded-full\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 723,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex-1 space-y-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-between\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                        className: \"font-semibold\",\n                                                        children: mentor.name\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 727,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                        className: \"text-sm text-gray-600\",\n                                                        children: [\n                                                            mentor.role,\n                                                            \" at \",\n                                                            mentor.company\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 728,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 726,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"px-2 py-1 text-sm rounded-full \".concat(mentor.availability === \"Available\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"),\n                                                children: mentor.availability\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 732,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 725,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center justify-between pt-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"text-sm font-medium\",\n                                                children: [\n                                                    mentor.rate,\n                                                    \" EDU/hour\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 741,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                onClick: ()=>setSelectedMentor(mentor),\n                                                disabled: mentor.availability !== \"Available\",\n                                                className: \"flex items-center gap-2 px-3 py-1.5 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                                        className: \"h-4 w-4\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 747,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    \"Book Session\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 742,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 740,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                lineNumber: 724,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, mentor.id, true, {\n                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                        lineNumber: 719,\n                        columnNumber: 11\n                    }, this))\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 717,\n                columnNumber: 7\n            }, this),\n            selectedMentor && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-xl shadow-lg max-w-md w-full p-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"text-xl font-bold mb-4\",\n                            children: \"Confirm Booking\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 760,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-gray-600 mb-6\",\n                            children: \"You're about to book a mentoring session\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 761,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"space-y-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center gap-4 rounded-lg border p-4\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                            src: selectedMentor.image || \"/placeholder.svg\",\n                                            alt: selectedMentor.name,\n                                            className: \"h-12 w-12 rounded-full\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 765,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"font-semibold\",\n                                                    children: selectedMentor.name\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                    lineNumber: 771,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-gray-600\",\n                                                    children: [\n                                                        selectedMentor.role,\n                                                        \" at \",\n                                                        selectedMentor.company\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                    lineNumber: 772,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 770,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 764,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"rounded-lg border p-4\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex justify-between text-sm\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: \"Session Rate\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 780,\n                                                columnNumber: 19\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"font-medium\",\n                                                children: [\n                                                    selectedMentor.rate,\n                                                    \" EDU\"\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 781,\n                                                columnNumber: 19\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 779,\n                                        columnNumber: 17\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 778,\n                                    columnNumber: 15\n                                }, this),\n                                txHash && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"rounded-lg bg-blue-50 p-4 text-sm\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex items-center gap-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                children: \"Transaction submitted:\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 788,\n                                                columnNumber: 21\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                                href: \"\".concat(EDUCHAIN_CONFIG.blockExplorerUrls[0], \"/tx/\").concat(txHash),\n                                                target: \"_blank\",\n                                                rel: \"noopener noreferrer\",\n                                                className: \"flex items-center gap-1 text-blue-600 hover:underline\",\n                                                children: [\n                                                    \"View on Explorer\",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                        className: \"h-3 w-3\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 796,\n                                                        columnNumber: 23\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                lineNumber: 789,\n                                                columnNumber: 21\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                        lineNumber: 787,\n                                        columnNumber: 19\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 786,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex justify-end gap-2 pt-4\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: ()=>setSelectedMentor(null),\n                                            disabled: isPaying,\n                                            className: \"px-4 py-2 rounded-lg border hover:bg-gray-50 disabled:opacity-50\",\n                                            children: \"Cancel\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 803,\n                                            columnNumber: 17\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: handlePayment,\n                                            disabled: isPaying,\n                                            className: \"min-w-[100px] px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2\",\n                                            children: isPaying ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ExternalLink_Loader2_MessageSquare_Users_Wallet_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                        className: \"h-4 w-4 animate-spin\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                                        lineNumber: 817,\n                                                        columnNumber: 23\n                                                    }, this),\n                                                    \"Processing\"\n                                                ]\n                                            }, void 0, true) : \"Confirm & Pay\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                            lineNumber: 810,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 802,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 763,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                    lineNumber: 759,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 758,\n                columnNumber: 9\n            }, this),\n            showToast && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed bottom-4 right-4 max-w-md w-full rounded-lg shadow-lg p-4 transition-all transform translate-y-0 \".concat(toastMessage.type === \"success\" ? \"bg-green-50\" : \"bg-red-50\"),\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex gap-2\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex-1\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                    className: \"font-medium \".concat(toastMessage.type === \"success\" ? \"text-green-800\" : \"text-red-800\"),\n                                    children: toastMessage.title\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 839,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: toastMessage.type === \"success\" ? \"text-green-600\" : \"text-red-600\",\n                                    children: toastMessage.message\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                                    lineNumber: 842,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 838,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: ()=>setShowToast(false),\n                            className: \"text-gray-500 hover:text-gray-700\",\n                            children: \"\\xd7\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                            lineNumber: 846,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                    lineNumber: 837,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n                lineNumber: 832,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\dell\\\\Downloads\\\\project-bolt-sb1-kyxqtvuw\\\\project\\\\src\\\\components\\\\MentorList.tsx\",\n        lineNumber: 698,\n        columnNumber: 5\n    }, this);\n}\n_s(MentorList, \"QRiyLOxKniouV+aalwoltTXGGjc=\");\n_c = MentorList;\nvar _c;\n$RefreshReg$(_c, \"MentorList\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MentorList.tsx\n"));

/***/ })

});